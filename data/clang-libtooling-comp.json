{"clang":["COMPLETION: AANT_ArgumentIdentifier : [#clang::AttributeArgumentNType#]AANT_ArgumentIdentifier","COMPLETION: AANT_ArgumentIntegerConstant : [#clang::AttributeArgumentNType#]AANT_ArgumentIntegerConstant","COMPLETION: AANT_ArgumentIntOrBool : [#clang::AttributeArgumentNType#]AANT_ArgumentIntOrBool","COMPLETION: AANT_ArgumentString : [#clang::AttributeArgumentNType#]AANT_ArgumentString","COMPLETION: AArch64 : AArch64","COMPLETION: AbiTagAttr : AbiTagAttr","COMPLETION: AbstractConditionalOperator : AbstractConditionalOperator","COMPLETION: AccessSpecDecl : AccessSpecDecl","COMPLETION: AccessSpecifier : AccessSpecifier","COMPLETION: AcquireCapabilityAttr : AcquireCapabilityAttr","COMPLETION: AcquiredAfterAttr : AcquiredAfterAttr","COMPLETION: AcquiredBeforeAttr : AcquiredBeforeAttr","COMPLETION: ActionResult : ActionResult\u003c\u003c#class PtrTy#\u003e{#, \u003c#bool CompressInvalid#\u003e#}\u003e","COMPLETION: AddFlagValue : AddFlagValue","COMPLETION: AddrLabelExpr : AddrLabelExpr","COMPLETION: AdjustedLocInfo : AdjustedLocInfo","COMPLETION: AdjustedType : AdjustedType","COMPLETION: AdjustedTypeLoc : AdjustedTypeLoc","COMPLETION: ADLResult : ADLResult","COMPLETION: AliasAttr : AliasAttr","COMPLETION: alignedAllocMinVersion : [#VersionTuple#]alignedAllocMinVersion(\u003c#llvm::Triple::OSType OS#\u003e)","COMPLETION: AlignedAttr : AlignedAttr","COMPLETION: AlignMac68kAttr : AlignMac68kAttr","COMPLETION: AlignValueAttr : AlignValueAttr","COMPLETION: All : [#clang::AnalysisInliningMode#]All","COMPLETION: ALL_GNU_LANGUAGES : [#clang::LanguageID#]ALL_GNU_LANGUAGES","COMPLETION: ALL_LANGUAGES : [#clang::LanguageID#]ALL_LANGUAGES","COMPLETION: ALL_MS_LANGUAGES : [#clang::LanguageID#]ALL_MS_LANGUAGES","COMPLETION: ALL_OCLC_LANGUAGES : [#clang::LanguageID#]ALL_OCLC_LANGUAGES","COMPLETION: AllocAlignAttr : AllocAlignAttr","COMPLETION: allocateDefaultArgStorageChain : [#void *#]allocateDefaultArgStorageChain(\u003c#const ASTContext \u0026C#\u003e)","COMPLETION: AllocSizeAttr : AllocSizeAttr","COMPLETION: AlwaysInlineAttr : AlwaysInlineAttr","COMPLETION: AmbiguousConversionSequence : AmbiguousConversionSequence","COMPLETION: AMDGPU : AMDGPU","COMPLETION: AMDGPUFlatWorkGroupSizeAttr : AMDGPUFlatWorkGroupSizeAttr","COMPLETION: AMDGPUNumSGPRAttr : AMDGPUNumSGPRAttr","COMPLETION: AMDGPUNumVGPRAttr : AMDGPUNumVGPRAttr","COMPLETION: AMDGPUWavesPerEUAttr : AMDGPUWavesPerEUAttr","COMPLETION: Analyses : Analyses","COMPLETION: AnalysisConstraints : AnalysisConstraints","COMPLETION: AnalysisDeclContext : AnalysisDeclContext","COMPLETION: AnalysisDeclContextManager : AnalysisDeclContextManager","COMPLETION: AnalysisDiagClients : AnalysisDiagClients","COMPLETION: AnalysisInliningMode : AnalysisInliningMode","COMPLETION: AnalysisPurgeMode : AnalysisPurgeMode","COMPLETION: AnalysisStores : AnalysisStores","COMPLETION: analyze_format_string : analyze_format_string","COMPLETION: analyze_os_log : analyze_os_log","COMPLETION: analyze_printf : analyze_printf","COMPLETION: analyze_scanf : analyze_scanf","COMPLETION: AnalyzerNoReturnAttr : AnalyzerNoReturnAttr","COMPLETION: AnalyzerOptions : AnalyzerOptions","COMPLETION: AnalyzerOptionsRef : AnalyzerOptionsRef","COMPLETION: AnnotateAttr : AnnotateAttr","COMPLETION: AnyFunctionDecl : AnyFunctionDecl","COMPLETION: AnyX86InterruptAttr : AnyX86InterruptAttr","COMPLETION: AnyX86NoCallerSavedRegistersAttr : AnyX86NoCallerSavedRegistersAttr","COMPLETION: APFloatStorage : APFloatStorage","COMPLETION: APIntStorage : APIntStorage","COMPLETION: APNumericStorage : APNumericStorage","COMPLETION: ApplyHeaderSearchOptions : [#void#]ApplyHeaderSearchOptions(\u003c#HeaderSearch \u0026HS#\u003e, \u003c#const HeaderSearchOptions \u0026HSOpts#\u003e, \u003c#const LangOptions \u0026Lang#\u003e, \u003c#const llvm::Triple \u0026triple#\u003e)","COMPLETION: APValue : APValue","COMPLETION: AR_Available : [#clang::AvailabilityResult#]AR_Available","COMPLETION: AR_Deprecated : [#clang::AvailabilityResult#]AR_Deprecated","COMPLETION: AR_NotYetIntroduced : [#clang::AvailabilityResult#]AR_NotYetIntroduced","COMPLETION: AR_Unavailable : [#clang::AvailabilityResult#]AR_Unavailable","COMPLETION: arcmt : arcmt","COMPLETION: ArcWeakrefUnavailableAttr : ArcWeakrefUnavailableAttr","COMPLETION: ARCXX_libcxx : [#clang::ObjCXXARCStandardLibraryKind#]ARCXX_libcxx","COMPLETION: ARCXX_libstdcxx : [#clang::ObjCXXARCStandardLibraryKind#]ARCXX_libstdcxx","COMPLETION: ARCXX_nolib : [#clang::ObjCXXARCStandardLibraryKind#]ARCXX_nolib","COMPLETION: ArgsUnion : ArgsUnion","COMPLETION: ArgsVector : ArgsVector","COMPLETION: ArgumentWithTypeTagAttr : ArgumentWithTypeTagAttr","COMPLETION: ARM : ARM","COMPLETION: ARMInterruptAttr : ARMInterruptAttr","COMPLETION: ArrayInitIndexExpr : ArrayInitIndexExpr","COMPLETION: ArrayInitLoopExpr : ArrayInitLoopExpr","COMPLETION: ArrayLocInfo : ArrayLocInfo","COMPLETION: ArrayRef : ArrayRef\u003c\u003c#typename T#\u003e\u003e","COMPLETION: ArraySubscriptExpr : ArraySubscriptExpr","COMPLETION: ArrayType : ArrayType","COMPLETION: ArrayTypeLoc : ArrayTypeLoc","COMPLETION: ArrayTypeTrait : ArrayTypeTrait","COMPLETION: ArrayTypeTraitExpr : ArrayTypeTraitExpr","COMPLETION: AS_none : [#clang::AccessSpecifier#]AS_none","COMPLETION: AS_private : [#clang::AccessSpecifier#]AS_private","COMPLETION: AS_protected : [#clang::AccessSpecifier#]AS_protected","COMPLETION: AS_public : [#clang::AccessSpecifier#]AS_public","COMPLETION: AsmLabelAttr : AsmLabelAttr","COMPLETION: AsmStmt : AsmStmt","COMPLETION: AssertCapabilityAttr : AssertCapabilityAttr","COMPLETION: AssertExclusiveLockAttr : AssertExclusiveLockAttr","COMPLETION: AssertSharedLockAttr : AssertSharedLockAttr","COMPLETION: AssertSuccess : [#Expr *#]AssertSuccess(\u003c#ExprResult R#\u003e)","COMPLETION: AssertSuccess : [#Stmt *#]AssertSuccess(\u003c#StmtResult R#\u003e)","COMPLETION: AssumeAlignedAttr : AssumeAlignedAttr","COMPLETION: ast_matchers : ast_matchers","COMPLETION: ast_type_traits : ast_type_traits","COMPLETION: ASTConsumer : ASTConsumer","COMPLETION: ASTContext : ASTContext","COMPLETION: ASTDeclListAction : ASTDeclListAction","COMPLETION: ASTDeserializationListener : ASTDeserializationListener","COMPLETION: ASTDumpAction : ASTDumpAction","COMPLETION: ASTFileSignature : ASTFileSignature","COMPLETION: ASTFrontendAction : ASTFrontendAction","COMPLETION: ASTImporter : ASTImporter","COMPLETION: ASTMergeAction : ASTMergeAction","COMPLETION: ASTMutationListener : ASTMutationListener","COMPLETION: ASTPrintAction : ASTPrintAction","COMPLETION: ASTReader : ASTReader","COMPLETION: ASTReaderListener : ASTReaderListener","COMPLETION: ASTRecordLayout : ASTRecordLayout","COMPLETION: ASTRecordReader : ASTRecordReader","COMPLETION: ASTRecordWriter : ASTRecordWriter","COMPLETION: ASTTemplateArgsPtr : ASTTemplateArgsPtr","COMPLETION: ASTTemplateArgumentListInfo : ASTTemplateArgumentListInfo","COMPLETION: ASTTemplateKWAndArgsInfo : ASTTemplateKWAndArgsInfo","COMPLETION: ASTUnit : ASTUnit","COMPLETION: ASTUnresolvedSet : ASTUnresolvedSet","COMPLETION: ASTVector : ASTVector\u003c\u003c#typename T#\u003e\u003e","COMPLETION: ASTViewAction : ASTViewAction","COMPLETION: ASTWriter : ASTWriter","COMPLETION: AsTypeExpr : AsTypeExpr","COMPLETION: AtomicExpr : AtomicExpr","COMPLETION: AtomicScopeModel : AtomicScopeModel","COMPLETION: AtomicScopeModelKind : AtomicScopeModelKind","COMPLETION: AtomicScopeOpenCLModel : AtomicScopeOpenCLModel","COMPLETION: AtomicType : AtomicType","COMPLETION: AtomicTypeLoc : AtomicTypeLoc","COMPLETION: AtomicTypeLocInfo : AtomicTypeLocInfo","COMPLETION: ATT_ArrayExtent : [#clang::ArrayTypeTrait#]ATT_ArrayExtent","COMPLETION: ATT_ArrayRank : [#clang::ArrayTypeTrait#]ATT_ArrayRank","COMPLETION: AttachDependencyGraphGen : [#void#]AttachDependencyGraphGen(\u003c#Preprocessor \u0026PP#\u003e, \u003c#StringRef OutputFile#\u003e, \u003c#StringRef SysRoot#\u003e)","COMPLETION: AttachHeaderIncludeGen : [#void#]AttachHeaderIncludeGen(\u003c#Preprocessor \u0026PP#\u003e, \u003c#const DependencyOutputOptions \u0026DepOpts#\u003e{#, \u003c#bool ShowAllHeaders = false#\u003e{#, \u003c#StringRef OutputPath = \"\"#\u003e{#, \u003c#bool ShowDepth = true#\u003e{#, \u003c#bool MSStyle = false#\u003e#}#}#}#})","COMPLETION: Attr : Attr","COMPLETION: attr : attr","COMPLETION: AttributeArgumentNType : AttributeArgumentNType","COMPLETION: AttributeDeclKind : AttributeDeclKind","COMPLETION: AttributedLocInfo : AttributedLocInfo","COMPLETION: AttributedStmt : AttributedStmt","COMPLETION: AttributedType : AttributedType","COMPLETION: AttributedTypeLoc : AttributedTypeLoc","COMPLETION: AttributeFactory : AttributeFactory","COMPLETION: AttributeList : AttributeList","COMPLETION: AttributePool : AttributePool","COMPLETION: AttrSyntax : AttrSyntax","COMPLETION: AttrVec : AttrVec","COMPLETION: AutoType : AutoType","COMPLETION: AutoTypeKeyword : AutoTypeKeyword","COMPLETION: AutoTypeLoc : AutoTypeLoc","COMPLETION: AvailabilityAttr : AvailabilityAttr","COMPLETION: AvailabilityChange : AvailabilityChange","COMPLETION: AvailabilityData : AvailabilityData","COMPLETION: AvailabilityResult : AvailabilityResult","COMPLETION: AvailabilitySlot : AvailabilitySlot","COMPLETION: AvailabilitySpec : AvailabilitySpec","COMPLETION: AVRInterruptAttr : AVRInterruptAttr","COMPLETION: AVRSignalAttr : AVRSignalAttr","COMPLETION: Backend_EmitAssembly : [#clang::BackendAction#]Backend_EmitAssembly","COMPLETION: Backend_EmitBC : [#clang::BackendAction#]Backend_EmitBC","COMPLETION: Backend_EmitLL : [#clang::BackendAction#]Backend_EmitLL","COMPLETION: Backend_EmitMCNull : [#clang::BackendAction#]Backend_EmitMCNull","COMPLETION: Backend_EmitNothing : [#clang::BackendAction#]Backend_EmitNothing","COMPLETION: Backend_EmitObj : [#clang::BackendAction#]Backend_EmitObj","COMPLETION: BackendAction : BackendAction","COMPLETION: BackendConsumer : BackendConsumer","COMPLETION: BadConversionSequence : BadConversionSequence","COMPLETION: BalancedDelimiterTracker : BalancedDelimiterTracker","COMPLETION: BaseResult : BaseResult","COMPLETION: BaseSubobject : BaseSubobject","COMPLETION: BeforeThanCompare : BeforeThanCompare\u003c\u003c#typename T#\u003e\u003e","COMPLETION: BinaryConditionalOperator : BinaryConditionalOperator","COMPLETION: BinaryOperator : BinaryOperator","COMPLETION: BinaryOperatorKind : BinaryOperatorKind","COMPLETION: BindingDecl : BindingDecl","COMPLETION: BlockDecl : BlockDecl","COMPLETION: BlockEdge : BlockEdge","COMPLETION: BlockEntrance : BlockEntrance","COMPLETION: BlockExit : BlockExit","COMPLETION: BlockExpr : BlockExpr","COMPLETION: BlockInvocationContext : BlockInvocationContext","COMPLETION: BlockPointerType : BlockPointerType","COMPLETION: BlockPointerTypeLoc : BlockPointerTypeLoc","COMPLETION: BlocksAttr : BlocksAttr","COMPLETION: BO_Add : [#clang::BinaryOperatorKind#]BO_Add","COMPLETION: BO_AddAssign : [#clang::BinaryOperatorKind#]BO_AddAssign","COMPLETION: BO_And : [#clang::BinaryOperatorKind#]BO_And","COMPLETION: BO_AndAssign : [#clang::BinaryOperatorKind#]BO_AndAssign","COMPLETION: BO_Assign : [#clang::BinaryOperatorKind#]BO_Assign","COMPLETION: BO_Cmp : [#clang::BinaryOperatorKind#]BO_Cmp","COMPLETION: BO_Comma : [#clang::BinaryOperatorKind#]BO_Comma","COMPLETION: BO_Div : [#clang::BinaryOperatorKind#]BO_Div","COMPLETION: BO_DivAssign : [#clang::BinaryOperatorKind#]BO_DivAssign","COMPLETION: BO_EQ : [#clang::BinaryOperatorKind#]BO_EQ","COMPLETION: BO_GE : [#clang::BinaryOperatorKind#]BO_GE","COMPLETION: BO_GT : [#clang::BinaryOperatorKind#]BO_GT","COMPLETION: BO_LAnd : [#clang::BinaryOperatorKind#]BO_LAnd","COMPLETION: BO_LE : [#clang::BinaryOperatorKind#]BO_LE","COMPLETION: BO_LOr : [#clang::BinaryOperatorKind#]BO_LOr","COMPLETION: BO_LT : [#clang::BinaryOperatorKind#]BO_LT","COMPLETION: BO_Mul : [#clang::BinaryOperatorKind#]BO_Mul","COMPLETION: BO_MulAssign : [#clang::BinaryOperatorKind#]BO_MulAssign","COMPLETION: BO_NE : [#clang::BinaryOperatorKind#]BO_NE","COMPLETION: BO_Or : [#clang::BinaryOperatorKind#]BO_Or","COMPLETION: BO_OrAssign : [#clang::BinaryOperatorKind#]BO_OrAssign","COMPLETION: BO_PtrMemD : [#clang::BinaryOperatorKind#]BO_PtrMemD","COMPLETION: BO_PtrMemI : [#clang::BinaryOperatorKind#]BO_PtrMemI","COMPLETION: BO_Rem : [#clang::BinaryOperatorKind#]BO_Rem","COMPLETION: BO_RemAssign : [#clang::BinaryOperatorKind#]BO_RemAssign","COMPLETION: BO_Shl : [#clang::BinaryOperatorKind#]BO_Shl","COMPLETION: BO_ShlAssign : [#clang::BinaryOperatorKind#]BO_ShlAssign","COMPLETION: BO_Shr : [#clang::BinaryOperatorKind#]BO_Shr","COMPLETION: BO_ShrAssign : [#clang::BinaryOperatorKind#]BO_ShrAssign","COMPLETION: BO_Sub : [#clang::BinaryOperatorKind#]BO_Sub","COMPLETION: BO_SubAssign : [#clang::BinaryOperatorKind#]BO_SubAssign","COMPLETION: BO_Xor : [#clang::BinaryOperatorKind#]BO_Xor","COMPLETION: BO_XorAssign : [#clang::BinaryOperatorKind#]BO_XorAssign","COMPLETION: BodyFarm : BodyFarm","COMPLETION: BreakStmt : BreakStmt","COMPLETION: BTK__make_integer_seq : [#clang::BuiltinTemplateKind#]BTK__make_integer_seq","COMPLETION: BTK__type_pack_element : [#clang::BuiltinTemplateKind#]BTK__type_pack_element","COMPLETION: BTT_IsAssignable : [#clang::TypeTrait#]BTT_IsAssignable","COMPLETION: BTT_IsBaseOf : [#clang::TypeTrait#]BTT_IsBaseOf","COMPLETION: BTT_IsConvertible : [#clang::TypeTrait#]BTT_IsConvertible","COMPLETION: BTT_IsConvertibleTo : [#clang::TypeTrait#]BTT_IsConvertibleTo","COMPLETION: BTT_IsNothrowAssignable : [#clang::TypeTrait#]BTT_IsNothrowAssignable","COMPLETION: BTT_IsSame : [#clang::TypeTrait#]BTT_IsSame","COMPLETION: BTT_IsTriviallyAssignable : [#clang::TypeTrait#]BTT_IsTriviallyAssignable","COMPLETION: BTT_Last : [#clang::TypeTrait#]BTT_Last","COMPLETION: BTT_TypeCompatible : [#clang::TypeTrait#]BTT_TypeCompatible","COMPLETION: BuildPreambleError : BuildPreambleError","COMPLETION: BuildPreambleErrorCategory : BuildPreambleErrorCategory","COMPLETION: Builtin : Builtin","COMPLETION: BuiltinLocInfo : BuiltinLocInfo","COMPLETION: BuiltinTemplateDecl : BuiltinTemplateDecl","COMPLETION: BuiltinTemplateKind : BuiltinTemplateKind","COMPLETION: BuiltinType : BuiltinType","COMPLETION: BuiltinTypeLoc : BuiltinTypeLoc","COMPLETION: BumpVector : BumpVector\u003c\u003c#typename T#\u003e\u003e","COMPLETION: BumpVectorContext : BumpVectorContext","COMPLETION: BuryPointer : [#void#]BuryPointer(\u003c#const void *Ptr#\u003e)","COMPLETION: BuryPointer : [#void#]BuryPointer(\u003c#std::unique_ptr\u003cT\u003e Ptr#\u003e)","COMPLETION: C11NoReturnAttr : C11NoReturnAttr","COMPLETION: C_LANG : [#clang::LanguageID#]C_LANG","COMPLETION: CachedTokens : CachedTokens","COMPLETION: CacheTokens : [#void#]CacheTokens(\u003c#Preprocessor \u0026PP#\u003e, \u003c#raw_pwrite_stream *OS#\u003e)","COMPLETION: CallableWhenAttr : CallableWhenAttr","COMPLETION: CallEnter : CallEnter","COMPLETION: CallExitBegin : CallExitBegin","COMPLETION: CallExitEnd : CallExitEnd","COMPLETION: CallExpr : CallExpr","COMPLETION: CallGraph : CallGraph","COMPLETION: CallGraphNode : CallGraphNode","COMPLETION: CallingConv : CallingConv","COMPLETION: CanonicalDeclPtr : CanonicalDeclPtr\u003c\u003c#typename decl_type#\u003e\u003e","COMPLETION: CanProxy : CanProxy\u003c\u003c#typename T#\u003e\u003e","COMPLETION: CanProxyAdaptor : CanProxyAdaptor\u003c\u003c#typename T#\u003e\u003e","COMPLETION: CanProxyBase : CanProxyBase\u003c\u003c#typename T#\u003e\u003e","COMPLETION: CanQual : CanQual\u003c\u003c#typename#\u003e\u003e","COMPLETION: CanQualType : CanQualType","COMPLETION: CanThrowResult : CanThrowResult","COMPLETION: CanTypeIterator : CanTypeIterator\u003c\u003c#typename InputIterator#\u003e\u003e","COMPLETION: CapabilityAttr : CapabilityAttr","COMPLETION: CapturedDecl : CapturedDecl","COMPLETION: CapturedRecordAttr : CapturedRecordAttr","COMPLETION: CapturedRegionKind : CapturedRegionKind","COMPLETION: CapturedStmt : CapturedStmt","COMPLETION: CarriesDependencyAttr : CarriesDependencyAttr","COMPLETION: CaseStmt : CaseStmt","COMPLETION: cast : [#typename std::enable_if\u003c!is_simple_type\u003cY\u003e::value, typename cast_retty\u003cX, const Y\u003e::ret_type\u003e::type#]cast\u003c\u003c#class X#\u003e\u003e(\u003c#const Y \u0026Val#\u003e)","COMPLETION: cast : [#typename cast_retty\u003cX, Y\u003e::ret_type#]cast\u003c\u003c#class X#\u003e\u003e(\u003c#Y \u0026Val#\u003e)","COMPLETION: cast : [#typename cast_retty\u003cX, Y *\u003e::ret_type#]cast\u003c\u003c#class X#\u003e\u003e(\u003c#Y *Val#\u003e)","COMPLETION: cast : [#typename cast_retty\u003cX, std::unique_ptr\u003cY\u003e \u003e::ret_type#]cast\u003c\u003c#class X#\u003e\u003e(\u003c#std::unique_ptr\u003cY\u003e \u0026\u0026Val#\u003e)","COMPLETION: cast_away_const : [#StmtIterator#]cast_away_const(\u003c#const ConstStmtIterator \u0026RHS#\u003e)","COMPLETION: cast_convert_decl_context : cast_convert_decl_context\u003c\u003c#class ToTy#\u003e{#, \u003c#bool IsKnownSubtype#\u003e#}\u003e","COMPLETION: cast_or_null : [#typename std::enable_if\u003c!is_simple_type\u003cY\u003e::value, typename cast_retty\u003cX, const Y\u003e::ret_type\u003e::type#]cast_or_null\u003c\u003c#class X#\u003e\u003e(\u003c#const Y \u0026Val#\u003e)","COMPLETION: cast_or_null : [#typename std::enable_if\u003c!is_simple_type\u003cY\u003e::value, typename cast_retty\u003cX, Y\u003e::ret_type\u003e::type#]cast_or_null\u003c\u003c#class X#\u003e\u003e(\u003c#Y \u0026Val#\u003e)","COMPLETION: cast_or_null : [#typename cast_retty\u003cX, Y *\u003e::ret_type#]cast_or_null\u003c\u003c#class X#\u003e\u003e(\u003c#Y *Val#\u003e)","COMPLETION: cast_or_null : [#typename cast_retty\u003cX, std::unique_ptr\u003cY\u003e \u003e::ret_type#]cast_or_null\u003c\u003c#class X#\u003e\u003e(\u003c#std::unique_ptr\u003cY\u003e \u0026\u0026Val#\u003e)","COMPLETION: CastExpr : CastExpr","COMPLETION: CastKind : CastKind","COMPLETION: CC_AAPCS : [#clang::CallingConv#]CC_AAPCS","COMPLETION: CC_AAPCS_VFP : [#clang::CallingConv#]CC_AAPCS_VFP","COMPLETION: CC_C : [#clang::CallingConv#]CC_C","COMPLETION: CC_IntelOclBicc : [#clang::CallingConv#]CC_IntelOclBicc","COMPLETION: CC_OpenCLKernel : [#clang::CallingConv#]CC_OpenCLKernel","COMPLETION: CC_PreserveAll : [#clang::CallingConv#]CC_PreserveAll","COMPLETION: CC_PreserveMost : [#clang::CallingConv#]CC_PreserveMost","COMPLETION: CC_SpirFunction : [#clang::CallingConv#]CC_SpirFunction","COMPLETION: CC_Swift : [#clang::CallingConv#]CC_Swift","COMPLETION: CC_Win64 : [#clang::CallingConv#]CC_Win64","COMPLETION: CC_X86_64SysV : [#clang::CallingConv#]CC_X86_64SysV","COMPLETION: CC_X86FastCall : [#clang::CallingConv#]CC_X86FastCall","COMPLETION: CC_X86Pascal : [#clang::CallingConv#]CC_X86Pascal","COMPLETION: CC_X86RegCall : [#clang::CallingConv#]CC_X86RegCall","COMPLETION: CC_X86StdCall : [#clang::CallingConv#]CC_X86StdCall","COMPLETION: CC_X86ThisCall : [#clang::CallingConv#]CC_X86ThisCall","COMPLETION: CC_X86VectorCall : [#clang::CallingConv#]CC_X86VectorCall","COMPLETION: CCD_BlockPropertySetter : [#clang::(anonymous)#]CCD_BlockPropertySetter","COMPLETION: CCD_bool_in_ObjC : [#clang::(anonymous)#]CCD_bool_in_ObjC","COMPLETION: CCD_InBaseClass : [#clang::(anonymous)#]CCD_InBaseClass","COMPLETION: CCD_MethodAsProperty : [#clang::(anonymous)#]CCD_MethodAsProperty","COMPLETION: CCD_ObjectQualifierMatch : [#clang::(anonymous)#]CCD_ObjectQualifierMatch","COMPLETION: CCD_ProbablyNotObjCCollection : [#clang::(anonymous)#]CCD_ProbablyNotObjCCollection","COMPLETION: CCD_SelectorMatch : [#clang::(anonymous)#]CCD_SelectorMatch","COMPLETION: CCF_ExactTypeMatch : [#clang::(anonymous)#]CCF_ExactTypeMatch","COMPLETION: CCF_SimilarTypeMatch : [#clang::(anonymous)#]CCF_SimilarTypeMatch","COMPLETION: CCP_CodePattern : [#clang::(anonymous)#]CCP_CodePattern","COMPLETION: CCP_Constant : [#clang::(anonymous)#]CCP_Constant","COMPLETION: CCP_Declaration : [#clang::(anonymous)#]CCP_Declaration","COMPLETION: CCP_EnumInCase : [#clang::(anonymous)#]CCP_EnumInCase","COMPLETION: CCP_Keyword : [#clang::(anonymous)#]CCP_Keyword","COMPLETION: CCP_LocalDeclaration : [#clang::(anonymous)#]CCP_LocalDeclaration","COMPLETION: CCP_Macro : [#clang::(anonymous)#]CCP_Macro","COMPLETION: CCP_MemberDeclaration : [#clang::(anonymous)#]CCP_MemberDeclaration","COMPLETION: CCP_NestedNameSpecifier : [#clang::(anonymous)#]CCP_NestedNameSpecifier","COMPLETION: CCP_NextInitializer : [#clang::(anonymous)#]CCP_NextInitializer","COMPLETION: CCP_ObjC_cmd : [#clang::(anonymous)#]CCP_ObjC_cmd","COMPLETION: CCP_SuperCompletion : [#clang::(anonymous)#]CCP_SuperCompletion","COMPLETION: CCP_Type : [#clang::(anonymous)#]CCP_Type","COMPLETION: CCP_Unlikely : [#clang::(anonymous)#]CCP_Unlikely","COMPLETION: CDeclAttr : CDeclAttr","COMPLETION: CFAuditedTransferAttr : CFAuditedTransferAttr","COMPLETION: CFConsumedAttr : CFConsumedAttr","COMPLETION: CFG : CFG","COMPLETION: CFGAutomaticObjDtor : CFGAutomaticObjDtor","COMPLETION: CFGBaseDtor : CFGBaseDtor","COMPLETION: CFGBlock : CFGBlock","COMPLETION: CFGCallback : CFGCallback","COMPLETION: CFGDeleteDtor : CFGDeleteDtor","COMPLETION: CFGElement : CFGElement","COMPLETION: CFGImplicitDtor : CFGImplicitDtor","COMPLETION: CFGInitializer : CFGInitializer","COMPLETION: CFGLifetimeEnds : CFGLifetimeEnds","COMPLETION: CFGLoopExit : CFGLoopExit","COMPLETION: CFGMemberDtor : CFGMemberDtor","COMPLETION: CFGNewAllocator : CFGNewAllocator","COMPLETION: CFGReverseBlockReachabilityAnalysis : CFGReverseBlockReachabilityAnalysis","COMPLETION: CFGStmt : CFGStmt","COMPLETION: CFGStmtMap : CFGStmtMap","COMPLETION: CFGTemporaryDtor : CFGTemporaryDtor","COMPLETION: CFGTerminator : CFGTerminator","COMPLETION: CFReturnsNotRetainedAttr : CFReturnsNotRetainedAttr","COMPLETION: CFReturnsRetainedAttr : CFReturnsRetainedAttr","COMPLETION: CFUnknownTransferAttr : CFUnknownTransferAttr","COMPLETION: ChainedASTReaderListener : ChainedASTReaderListener","COMPLETION: ChainedDiagnosticConsumer : ChainedDiagnosticConsumer","COMPLETION: CharacterLiteral : CharacterLiteral","COMPLETION: charinfo : charinfo","COMPLETION: CharLiteralParser : CharLiteralParser","COMPLETION: CharSourceRange : CharSourceRange","COMPLETION: CharUnits : CharUnits","COMPLETION: ChooseExpr : ChooseExpr","COMPLETION: CIMK_Constructors : [#clang::CXXInlineableMemberKind#]CIMK_Constructors","COMPLETION: CIMK_Destructors : [#clang::CXXInlineableMemberKind#]CIMK_Destructors","COMPLETION: CIMK_MemberFunctions : [#clang::CXXInlineableMemberKind#]CIMK_MemberFunctions","COMPLETION: CIMK_None : [#clang::CXXInlineableMemberKind#]CIMK_None","COMPLETION: CK_AddressSpaceConversion : [#clang::CastKind#]CK_AddressSpaceConversion","COMPLETION: CK_AnyPointerToBlockPointerCast : [#clang::CastKind#]CK_AnyPointerToBlockPointerCast","COMPLETION: CK_ARCConsumeObject : [#clang::CastKind#]CK_ARCConsumeObject","COMPLETION: CK_ARCExtendBlockObject : [#clang::CastKind#]CK_ARCExtendBlockObject","COMPLETION: CK_ARCProduceObject : [#clang::CastKind#]CK_ARCProduceObject","COMPLETION: CK_ARCReclaimReturnedObject : [#clang::CastKind#]CK_ARCReclaimReturnedObject","COMPLETION: CK_ArrayToPointerDecay : [#clang::CastKind#]CK_ArrayToPointerDecay","COMPLETION: CK_AtomicToNonAtomic : [#clang::CastKind#]CK_AtomicToNonAtomic","COMPLETION: CK_BaseToDerived : [#clang::CastKind#]CK_BaseToDerived","COMPLETION: CK_BaseToDerivedMemberPointer : [#clang::CastKind#]CK_BaseToDerivedMemberPointer","COMPLETION: CK_BitCast : [#clang::CastKind#]CK_BitCast","COMPLETION: CK_BlockPointerToObjCPointerCast : [#clang::CastKind#]CK_BlockPointerToObjCPointerCast","COMPLETION: CK_BooleanToSignedIntegral : [#clang::CastKind#]CK_BooleanToSignedIntegral","COMPLETION: CK_BuiltinFnToFnPtr : [#clang::CastKind#]CK_BuiltinFnToFnPtr","COMPLETION: CK_ConstructorConversion : [#clang::CastKind#]CK_ConstructorConversion","COMPLETION: CK_CopyAndAutoreleaseBlockObject : [#clang::CastKind#]CK_CopyAndAutoreleaseBlockObject","COMPLETION: CK_CPointerToObjCPointerCast : [#clang::CastKind#]CK_CPointerToObjCPointerCast","COMPLETION: CK_Dependent : [#clang::CastKind#]CK_Dependent","COMPLETION: CK_DerivedToBase : [#clang::CastKind#]CK_DerivedToBase","COMPLETION: CK_DerivedToBaseMemberPointer : [#clang::CastKind#]CK_DerivedToBaseMemberPointer","COMPLETION: CK_Dynamic : [#clang::CastKind#]CK_Dynamic","COMPLETION: CK_FloatingCast : [#clang::CastKind#]CK_FloatingCast","COMPLETION: CK_FloatingComplexCast : [#clang::CastKind#]CK_FloatingComplexCast","COMPLETION: CK_FloatingComplexToBoolean : [#clang::CastKind#]CK_FloatingComplexToBoolean","COMPLETION: CK_FloatingComplexToIntegralComplex : [#clang::CastKind#]CK_FloatingComplexToIntegralComplex","COMPLETION: CK_FloatingComplexToReal : [#clang::CastKind#]CK_FloatingComplexToReal","COMPLETION: CK_FloatingRealToComplex : [#clang::CastKind#]CK_FloatingRealToComplex","COMPLETION: CK_FloatingToBoolean : [#clang::CastKind#]CK_FloatingToBoolean","COMPLETION: CK_FloatingToIntegral : [#clang::CastKind#]CK_FloatingToIntegral","COMPLETION: CK_FunctionToPointerDecay : [#clang::CastKind#]CK_FunctionToPointerDecay","COMPLETION: CK_IntegralCast : [#clang::CastKind#]CK_IntegralCast","COMPLETION: CK_IntegralComplexCast : [#clang::CastKind#]CK_IntegralComplexCast","COMPLETION: CK_IntegralComplexToBoolean : [#clang::CastKind#]CK_IntegralComplexToBoolean","COMPLETION: CK_IntegralComplexToFloatingComplex : [#clang::CastKind#]CK_IntegralComplexToFloatingComplex","COMPLETION: CK_IntegralComplexToReal : [#clang::CastKind#]CK_IntegralComplexToReal","COMPLETION: CK_IntegralRealToComplex : [#clang::CastKind#]CK_IntegralRealToComplex","COMPLETION: CK_IntegralToBoolean : [#clang::CastKind#]CK_IntegralToBoolean","COMPLETION: CK_IntegralToFloating : [#clang::CastKind#]CK_IntegralToFloating","COMPLETION: CK_IntegralToPointer : [#clang::CastKind#]CK_IntegralToPointer","COMPLETION: CK_IntToOCLSampler : [#clang::CastKind#]CK_IntToOCLSampler","COMPLETION: CK_LValueBitCast : [#clang::CastKind#]CK_LValueBitCast","COMPLETION: CK_LValueToRValue : [#clang::CastKind#]CK_LValueToRValue","COMPLETION: CK_MemberPointerToBoolean : [#clang::CastKind#]CK_MemberPointerToBoolean","COMPLETION: CK_NonAtomicToAtomic : [#clang::CastKind#]CK_NonAtomicToAtomic","COMPLETION: CK_NoOp : [#clang::CastKind#]CK_NoOp","COMPLETION: CK_NullToMemberPointer : [#clang::CastKind#]CK_NullToMemberPointer","COMPLETION: CK_NullToPointer : [#clang::CastKind#]CK_NullToPointer","COMPLETION: CK_ObjCObjectLValueCast : [#clang::CastKind#]CK_ObjCObjectLValueCast","COMPLETION: CK_PointerToBoolean : [#clang::CastKind#]CK_PointerToBoolean","COMPLETION: CK_PointerToIntegral : [#clang::CastKind#]CK_PointerToIntegral","COMPLETION: CK_ReinterpretMemberPointer : [#clang::CastKind#]CK_ReinterpretMemberPointer","COMPLETION: CK_ToUnion : [#clang::CastKind#]CK_ToUnion","COMPLETION: CK_ToVoid : [#clang::CastKind#]CK_ToVoid","COMPLETION: CK_UncheckedDerivedToBase : [#clang::CastKind#]CK_UncheckedDerivedToBase","COMPLETION: CK_UserDefinedConversion : [#clang::CastKind#]CK_UserDefinedConversion","COMPLETION: CK_VectorSplat : [#clang::CastKind#]CK_VectorSplat","COMPLETION: CK_ZeroToOCLEvent : [#clang::CastKind#]CK_ZeroToOCLEvent","COMPLETION: CK_ZeroToOCLQueue : [#clang::CastKind#]CK_ZeroToOCLQueue","COMPLETION: CLanguageLinkage : [#clang::LanguageLinkage#]CLanguageLinkage","COMPLETION: ClassScopeFunctionSpecializationDecl : ClassScopeFunctionSpecializationDecl","COMPLETION: ClassTemplateDecl : ClassTemplateDecl","COMPLETION: ClassTemplatePartialSpecializationDecl : ClassTemplatePartialSpecializationDecl","COMPLETION: ClassTemplateSpecializationDecl : ClassTemplateSpecializationDecl","COMPLETION: CleanupAttr : CleanupAttr","COMPLETION: CleanupInfo : CleanupInfo","COMPLETION: CloneConstraint : CloneConstraint","COMPLETION: CloneDetector : CloneDetector","COMPLETION: CMK_None : [#clang::ConflictMarkerKind#]CMK_None","COMPLETION: CMK_Normal : [#clang::ConflictMarkerKind#]CMK_Normal","COMPLETION: CMK_Perforce : [#clang::ConflictMarkerKind#]CMK_Perforce","COMPLETION: CoawaitExpr : CoawaitExpr","COMPLETION: CodeCompleteConsumer : CodeCompleteConsumer","COMPLETION: CodeCompleteOptions : CodeCompleteOptions","COMPLETION: CodeCompletionAllocator : CodeCompletionAllocator","COMPLETION: CodeCompletionBuilder : CodeCompletionBuilder","COMPLETION: CodeCompletionContext : CodeCompletionContext","COMPLETION: CodeCompletionHandler : CodeCompletionHandler","COMPLETION: CodeCompletionResult : CodeCompletionResult","COMPLETION: CodeCompletionString : CodeCompletionString","COMPLETION: CodeCompletionTUInfo : CodeCompletionTUInfo","COMPLETION: CodeGen : CodeGen","COMPLETION: CodeGenAction : CodeGenAction","COMPLETION: CodeGenerator : CodeGenerator","COMPLETION: CodeGenOptions : CodeGenOptions","COMPLETION: codegenoptions : codegenoptions","COMPLETION: CodeGenOptionsBase : CodeGenOptionsBase","COMPLETION: CodeInjector : CodeInjector","COMPLETION: ColdAttr : ColdAttr","COMPLETION: ColonProtectionRAIIObject : ColonProtectionRAIIObject","COMPLETION: CommentHandler : CommentHandler","COMPLETION: CommentOptions : CommentOptions","COMPLETION: comments : comments","COMPLETION: CommonAttr : CommonAttr","COMPLETION: CompilerInstance : CompilerInstance","COMPLETION: CompilerInvocation : CompilerInvocation","COMPLETION: CompilerInvocationBase : CompilerInvocationBase","COMPLETION: ComplexType : ComplexType","COMPLETION: ComplexTypeLoc : ComplexTypeLoc","COMPLETION: CompoundAssignOperator : CompoundAssignOperator","COMPLETION: CompoundLiteralExpr : CompoundLiteralExpr","COMPLETION: CompoundStmt : CompoundStmt","COMPLETION: ComputePreambleBounds : [#PreambleBounds#]ComputePreambleBounds(\u003c#const LangOptions \u0026LangOpts#\u003e, \u003c#llvm::MemoryBuffer *Buffer#\u003e, \u003c#unsigned int MaxLines#\u003e)","COMPLETION: ConcreteTypeLoc : ConcreteTypeLoc\u003c\u003c#class Base#\u003e, \u003c#class Derived#\u003e, \u003c#class TypeClass#\u003e, \u003c#class LocalData#\u003e\u003e","COMPLETION: ConditionalOperator : ConditionalOperator","COMPLETION: ConflictMarkerKind : ConflictMarkerKind","COMPLETION: ConstantArrayType : ConstantArrayType","COMPLETION: ConstantArrayTypeLoc : ConstantArrayTypeLoc","COMPLETION: ConstAttr : ConstAttr","COMPLETION: ConstDeclVisitor : ConstDeclVisitor\u003c\u003c#typename ImplClass#\u003e{#, \u003c#typename RetTy#\u003e#}\u003e","COMPLETION: ConstEvaluatedExprVisitor : ConstEvaluatedExprVisitor\u003c\u003c#typename ImplClass#\u003e\u003e","COMPLETION: ConstOMPClauseVisitor : ConstOMPClauseVisitor\u003c\u003c#class ImplClass#\u003e{#, \u003c#typename RetTy#\u003e#}\u003e","COMPLETION: ConstrainedTemplateDeclInfo : ConstrainedTemplateDeclInfo","COMPLETION: ConstructorAttr : ConstructorAttr","COMPLETION: ConstructorInfo : ConstructorInfo","COMPLETION: ConstructorUsingShadowDecl : ConstructorUsingShadowDecl","COMPLETION: ConstStmtIterator : ConstStmtIterator","COMPLETION: ConstStmtVisitor : ConstStmtVisitor\u003c\u003c#typename ImplClass#\u003e{#, \u003c#typename RetTy#\u003e, \u003c#typename ParamTys#\u003e#}\u003e","COMPLETION: ConsumableAttr : ConsumableAttr","COMPLETION: ConsumableAutoCastAttr : ConsumableAutoCastAttr","COMPLETION: ConsumableSetOnReadAttr : ConsumableSetOnReadAttr","COMPLETION: consumed : consumed","COMPLETION: ContinueStmt : ContinueStmt","COMPLETION: ContinuousRangeMap : ContinuousRangeMap\u003c\u003c#typename Int#\u003e, \u003c#typename V#\u003e, \u003c#unsigned int InitialCapacity#\u003e\u003e","COMPLETION: ConvergentAttr : ConvergentAttr","COMPLETION: ConversionFixItGenerator : ConversionFixItGenerator","COMPLETION: ConversionSequenceList : ConversionSequenceList","COMPLETION: ConvertVectorExpr : ConvertVectorExpr","COMPLETION: CoreturnStmt : CoreturnStmt","COMPLETION: CoroutineBodyStmt : CoroutineBodyStmt","COMPLETION: CoroutineSuspendExpr : CoroutineSuspendExpr","COMPLETION: CorrectionCandidateCallback : CorrectionCandidateCallback","COMPLETION: CoverageSourceInfo : CoverageSourceInfo","COMPLETION: CoyieldExpr : CoyieldExpr","COMPLETION: CR_Default : [#clang::CapturedRegionKind#]CR_Default","COMPLETION: CR_OpenMP : [#clang::CapturedRegionKind#]CR_OpenMP","COMPLETION: CreateASTDeclNodeLister : [#std::unique_ptr\u003cASTConsumer\u003e#]CreateASTDeclNodeLister()","COMPLETION: CreateASTDumper : [#std::unique_ptr\u003cASTConsumer\u003e#]CreateASTDumper(\u003c#StringRef FilterString#\u003e, \u003c#bool DumpDecls#\u003e, \u003c#bool Deserialize#\u003e, \u003c#bool DumpLookups#\u003e)","COMPLETION: CreateASTPrinter : [#std::unique_ptr\u003cASTConsumer\u003e#]CreateASTPrinter(\u003c#std::unique_ptr\u003craw_ostream\u003e OS#\u003e, \u003c#StringRef FilterString#\u003e)","COMPLETION: CreateASTViewer : [#std::unique_ptr\u003cASTConsumer\u003e#]CreateASTViewer()","COMPLETION: createChainedIncludesSource : [#IntrusiveRefCntPtr\u003cExternalSemaSource\u003e#]createChainedIncludesSource(\u003c#CompilerInstance \u0026CI#\u003e, \u003c#IntrusiveRefCntPtr\u003cExternalSemaSource\u003e \u0026Reader#\u003e)","COMPLETION: CreateDeclContextPrinter : [#std::unique_ptr\u003cASTConsumer\u003e#]CreateDeclContextPrinter()","COMPLETION: CreateHTMLPrinter : [#std::unique_ptr\u003cASTConsumer\u003e#]CreateHTMLPrinter(\u003c#std::unique_ptr\u003craw_ostream\u003e OS#\u003e, \u003c#Preprocessor \u0026PP#\u003e{#, \u003c#bool SyntaxHighlight = true#\u003e{#, \u003c#bool HighlightMacros = true#\u003e#}#})","COMPLETION: createInvocationFromCommandLine : [#std::unique_ptr\u003cCompilerInvocation\u003e#]createInvocationFromCommandLine(\u003c#ArrayRef\u003cconst char *\u003e Args#\u003e{#, \u003c#IntrusiveRefCntPtr\u003cDiagnosticsEngine\u003e Diags =","        IntrusiveRefCntPtr\u003cDiagnosticsEngine\u003e()#\u003e{#, \u003c#IntrusiveRefCntPtr\u003cvfs::FileSystem\u003e VFS = nullptr#\u003e#}#})","COMPLETION: CreateLLVMCodeGen : [#CodeGenerator *#]CreateLLVMCodeGen(\u003c#DiagnosticsEngine \u0026Diags#\u003e, \u003c#llvm::StringRef ModuleName#\u003e, \u003c#const HeaderSearchOptions \u0026HeaderSearchOpts#\u003e, \u003c#const PreprocessorOptions \u0026PreprocessorOpts#\u003e, \u003c#const CodeGenOptions \u0026CGO#\u003e, \u003c#llvm::LLVMContext \u0026C#\u003e{#, \u003c#CoverageSourceInfo *CoverageInfo = nullptr#\u003e#})","COMPLETION: CreateModernObjCRewriter : [#std::unique_ptr\u003cASTConsumer\u003e#]CreateModernObjCRewriter(\u003c#const std::string \u0026InFile#\u003e, \u003c#std::unique_ptr\u003craw_ostream\u003e OS#\u003e, \u003c#DiagnosticsEngine \u0026Diags#\u003e, \u003c#const LangOptions \u0026LOpts#\u003e, \u003c#bool SilenceRewriteMacroWarning#\u003e, \u003c#bool LineInfo#\u003e)","COMPLETION: CreateObjCRewriter : [#std::unique_ptr\u003cASTConsumer\u003e#]CreateObjCRewriter(\u003c#const std::string \u0026InFile#\u003e, \u003c#std::unique_ptr\u003craw_ostream\u003e OS#\u003e, \u003c#DiagnosticsEngine \u0026Diags#\u003e, \u003c#const LangOptions \u0026LOpts#\u003e, \u003c#bool SilenceRewriteMacroWarning#\u003e)","COMPLETION: createVFSFromCompilerInvocation : [#IntrusiveRefCntPtr\u003cvfs::FileSystem\u003e#]createVFSFromCompilerInvocation(\u003c#const CompilerInvocation \u0026CI#\u003e, \u003c#DiagnosticsEngine \u0026Diags#\u003e)","COMPLETION: createVFSFromCompilerInvocation : [#IntrusiveRefCntPtr\u003cvfs::FileSystem\u003e#]createVFSFromCompilerInvocation(\u003c#const CompilerInvocation \u0026CI#\u003e, \u003c#DiagnosticsEngine \u0026Diags#\u003e, \u003c#IntrusiveRefCntPtr\u003cvfs::FileSystem\u003e BaseFS#\u003e)","COMPLETION: cross_tu : cross_tu","COMPLETION: CStyleCastExpr : CStyleCastExpr","COMPLETION: CT_Can : [#clang::CanThrowResult#]CT_Can","COMPLETION: CT_Cannot : [#clang::CanThrowResult#]CT_Cannot","COMPLETION: CT_Dependent : [#clang::CanThrowResult#]CT_Dependent","COMPLETION: Ctor_Base : [#clang::CXXCtorType#]Ctor_Base","COMPLETION: Ctor_Comdat : [#clang::CXXCtorType#]Ctor_Comdat","COMPLETION: Ctor_Complete : [#clang::CXXCtorType#]Ctor_Complete","COMPLETION: Ctor_CopyingClosure : [#clang::CXXCtorType#]Ctor_CopyingClosure","COMPLETION: Ctor_DefaultClosure : [#clang::CXXCtorType#]Ctor_DefaultClosure","COMPLETION: CudaArch : CudaArch","COMPLETION: CudaArchToString : [#const char *#]CudaArchToString(\u003c#CudaArch A#\u003e)","COMPLETION: CUDAConstantAttr : CUDAConstantAttr","COMPLETION: CUDADeviceAttr : CUDADeviceAttr","COMPLETION: CUDAGlobalAttr : CUDAGlobalAttr","COMPLETION: CUDAHostAttr : CUDAHostAttr","COMPLETION: CUDAInvalidTargetAttr : CUDAInvalidTargetAttr","COMPLETION: CUDAKernelCallExpr : CUDAKernelCallExpr","COMPLETION: CUDALaunchBoundsAttr : CUDALaunchBoundsAttr","COMPLETION: CUDASharedAttr : CUDASharedAttr","COMPLETION: CudaVersion : CudaVersion","COMPLETION: CudaVersionToString : [#const char *#]CudaVersionToString(\u003c#CudaVersion V#\u003e)","COMPLETION: CudaVirtualArch : CudaVirtualArch","COMPLETION: CudaVirtualArchToString : [#const char *#]CudaVirtualArchToString(\u003c#CudaVirtualArch A#\u003e)","COMPLETION: CXX11NoReturnAttr : CXX11NoReturnAttr","COMPLETION: CXX_LANG : [#clang::LanguageID#]CXX_LANG","COMPLETION: CXXABI : CXXABI","COMPLETION: CXXBasePath : CXXBasePath","COMPLETION: CXXBasePathElement : CXXBasePathElement","COMPLETION: CXXBasePaths : CXXBasePaths","COMPLETION: CXXBaseSpecifier : CXXBaseSpecifier","COMPLETION: CXXBindTemporaryExpr : CXXBindTemporaryExpr","COMPLETION: CXXBoolLiteralExpr : CXXBoolLiteralExpr","COMPLETION: CXXCastPath : CXXCastPath","COMPLETION: CXXCatchStmt : CXXCatchStmt","COMPLETION: CXXConstCastExpr : CXXConstCastExpr","COMPLETION: CXXConstructExpr : CXXConstructExpr","COMPLETION: CXXConstructorDecl : CXXConstructorDecl","COMPLETION: CXXConversionDecl : CXXConversionDecl","COMPLETION: CXXCtorInitializer : CXXCtorInitializer","COMPLETION: CXXCtorType : CXXCtorType","COMPLETION: CXXDeductionGuideDecl : CXXDeductionGuideDecl","COMPLETION: CXXDeductionGuideNameExtra : CXXDeductionGuideNameExtra","COMPLETION: CXXDefaultArgExpr : CXXDefaultArgExpr","COMPLETION: CXXDefaultInitExpr : CXXDefaultInitExpr","COMPLETION: CXXDeleteExpr : CXXDeleteExpr","COMPLETION: CXXDependentScopeMemberExpr : CXXDependentScopeMemberExpr","COMPLETION: CXXDestructorDecl : CXXDestructorDecl","COMPLETION: CXXDtorType : CXXDtorType","COMPLETION: CXXDynamicCastExpr : CXXDynamicCastExpr","COMPLETION: CXXFieldCollector : CXXFieldCollector","COMPLETION: CXXFinalOverriderMap : CXXFinalOverriderMap","COMPLETION: CXXFoldExpr : CXXFoldExpr","COMPLETION: CXXForRangeStmt : CXXForRangeStmt","COMPLETION: CXXFunctionalCastExpr : CXXFunctionalCastExpr","COMPLETION: CXXIndirectPrimaryBaseSet : CXXIndirectPrimaryBaseSet","COMPLETION: CXXInheritedCtorInitExpr : CXXInheritedCtorInitExpr","COMPLETION: CXXInlineableMemberKind : CXXInlineableMemberKind","COMPLETION: CXXLanguageLinkage : [#clang::LanguageLinkage#]CXXLanguageLinkage","COMPLETION: CXXLiteralOperatorIdName : CXXLiteralOperatorIdName","COMPLETION: CXXMemberCallExpr : CXXMemberCallExpr","COMPLETION: CXXMethodDecl : CXXMethodDecl","COMPLETION: CXXNamedCastExpr : CXXNamedCastExpr","COMPLETION: CXXNewExpr : CXXNewExpr","COMPLETION: CXXNoexceptExpr : CXXNoexceptExpr","COMPLETION: CXXNullPtrLiteralExpr : CXXNullPtrLiteralExpr","COMPLETION: CXXOperatorCallExpr : CXXOperatorCallExpr","COMPLETION: CXXOperatorIdName : CXXOperatorIdName","COMPLETION: CXXPseudoDestructorExpr : CXXPseudoDestructorExpr","COMPLETION: CXXRecordDecl : CXXRecordDecl","COMPLETION: CXXReinterpretCastExpr : CXXReinterpretCastExpr","COMPLETION: CXXScalarValueInitExpr : CXXScalarValueInitExpr","COMPLETION: CXXScopeSpec : CXXScopeSpec","COMPLETION: CXXSpecialName : CXXSpecialName","COMPLETION: CXXStaticCastExpr : CXXStaticCastExpr","COMPLETION: CXXStdInitializerListExpr : CXXStdInitializerListExpr","COMPLETION: CXXTemporary : CXXTemporary","COMPLETION: CXXTemporaryObjectExpr : CXXTemporaryObjectExpr","COMPLETION: CXXThisExpr : CXXThisExpr","COMPLETION: CXXThrowExpr : CXXThrowExpr","COMPLETION: CXXTryStmt : CXXTryStmt","COMPLETION: CXXTypeidExpr : CXXTypeidExpr","COMPLETION: CXXUnresolvedConstructExpr : CXXUnresolvedConstructExpr","COMPLETION: CXXUuidofExpr : CXXUuidofExpr","COMPLETION: data_collection : data_collection","COMPLETION: dataflow : dataflow","COMPLETION: DataflowValues : DataflowValues\u003c\u003c#typename ValueTypes#\u003e{#, \u003c#typename _AnalysisDirTag#\u003e#}\u003e","COMPLETION: DecayedType : DecayedType","COMPLETION: DecayedTypeLoc : DecayedTypeLoc","COMPLETION: Decl : Decl","COMPLETION: DeclAccessPair : DeclAccessPair","COMPLETION: DeclarationName : DeclarationName","COMPLETION: DeclarationNameExtra : DeclarationNameExtra","COMPLETION: DeclarationNameInfo : DeclarationNameInfo","COMPLETION: DeclarationNameLoc : DeclarationNameLoc","COMPLETION: DeclarationNameTable : DeclarationNameTable","COMPLETION: Declarator : Declarator","COMPLETION: DeclaratorChunk : DeclaratorChunk","COMPLETION: DeclaratorContext : DeclaratorContext","COMPLETION: DeclaratorDecl : DeclaratorDecl","COMPLETION: DeclaratorInfo : DeclaratorInfo","COMPLETION: declaresSameEntity : [#bool#]declaresSameEntity(\u003c#const Decl *D1#\u003e, \u003c#const Decl *D2#\u003e)","COMPLETION: DeclAttrsMatchCUDAMode : [#bool#]DeclAttrsMatchCUDAMode(\u003c#const LangOptions \u0026LangOpts#\u003e, \u003c#Decl *D#\u003e)","COMPLETION: DeclContext : DeclContext","COMPLETION: DeclContextLookupResult : DeclContextLookupResult","COMPLETION: DeclContextPrintAction : DeclContextPrintAction","COMPLETION: DeclFilterCCC : DeclFilterCCC\u003c\u003c#class C#\u003e\u003e","COMPLETION: DeclGroup : DeclGroup","COMPLETION: DeclGroupRef : DeclGroupRef","COMPLETION: DeclRefExpr : DeclRefExpr","COMPLETION: DeclResult : DeclResult","COMPLETION: DeclSpec : DeclSpec","COMPLETION: DeclStmt : DeclStmt","COMPLETION: DecltypeType : DecltypeType","COMPLETION: DecltypeTypeLoc : DecltypeTypeLoc","COMPLETION: DeclVisitor : DeclVisitor\u003c\u003c#typename ImplClass#\u003e{#, \u003c#typename RetTy#\u003e#}\u003e","COMPLETION: declvisitor : declvisitor","COMPLETION: DecompositionDecl : DecompositionDecl","COMPLETION: DecompositionDeclarator : DecompositionDeclarator","COMPLETION: DeducedPack : DeducedPack","COMPLETION: DeducedTemplateArgument : DeducedTemplateArgument","COMPLETION: DeducedTemplateSpecializationType : DeducedTemplateSpecializationType","COMPLETION: DeducedTemplateSpecializationTypeLoc : DeducedTemplateSpecializationTypeLoc","COMPLETION: DeducedType : DeducedType","COMPLETION: DeducedTypeLoc : DeducedTypeLoc","COMPLETION: DeductionFailureInfo : DeductionFailureInfo","COMPLETION: DefaultArgStorage : DefaultArgStorage\u003c\u003c#typename ParmDecl#\u003e, \u003c#typename ArgType#\u003e\u003e","COMPLETION: DefaultStmt : DefaultStmt","COMPLETION: DefaultVisibility : [#clang::Visibility#]DefaultVisibility","COMPLETION: DefMacroDirective : DefMacroDirective","COMPLETION: DeltaTree : DeltaTree","COMPLETION: DependencyCollector : DependencyCollector","COMPLETION: DependencyFileGenerator : DependencyFileGenerator","COMPLETION: DependencyOutputFormat : DependencyOutputFormat","COMPLETION: DependencyOutputOptions : DependencyOutputOptions","COMPLETION: DependentAddressSpaceLocInfo : DependentAddressSpaceLocInfo","COMPLETION: DependentAddressSpaceType : DependentAddressSpaceType","COMPLETION: DependentAddressSpaceTypeLoc : DependentAddressSpaceTypeLoc","COMPLETION: DependentCoawaitExpr : DependentCoawaitExpr","COMPLETION: DependentDecltypeType : DependentDecltypeType","COMPLETION: DependentDiagnostic : DependentDiagnostic","COMPLETION: DependentFunctionTemplateSpecializationInfo : DependentFunctionTemplateSpecializationInfo","COMPLETION: DependentNameLocInfo : DependentNameLocInfo","COMPLETION: DependentNameType : DependentNameType","COMPLETION: DependentNameTypeLoc : DependentNameTypeLoc","COMPLETION: DependentScopeDeclRefExpr : DependentScopeDeclRefExpr","COMPLETION: DependentSizedArrayType : DependentSizedArrayType","COMPLETION: DependentSizedArrayTypeLoc : DependentSizedArrayTypeLoc","COMPLETION: DependentSizedExtVectorType : DependentSizedExtVectorType","COMPLETION: DependentSizedExtVectorTypeLoc : DependentSizedExtVectorTypeLoc","COMPLETION: DependentStoredDeclsMap : DependentStoredDeclsMap","COMPLETION: DependentTemplateName : DependentTemplateName","COMPLETION: DependentTemplateSpecializationLocInfo : DependentTemplateSpecializationLocInfo","COMPLETION: DependentTemplateSpecializationType : DependentTemplateSpecializationType","COMPLETION: DependentTemplateSpecializationTypeLoc : DependentTemplateSpecializationTypeLoc","COMPLETION: DependentTypeOfExprType : DependentTypeOfExprType","COMPLETION: DependentUnaryTransformType : DependentUnaryTransformType","COMPLETION: DeprecatedAttr : DeprecatedAttr","COMPLETION: DeprecatedSlot : [#AvailabilitySlot#]DeprecatedSlot","COMPLETION: DesignatedInitExpr : DesignatedInitExpr","COMPLETION: DesignatedInitUpdateExpr : DesignatedInitUpdateExpr","COMPLETION: Designation : Designation","COMPLETION: Designator : Designator","COMPLETION: DestroyTemplateIdAnnotationsRAIIObj : DestroyTemplateIdAnnotationsRAIIObj","COMPLETION: DestructorAttr : DestructorAttr","COMPLETION: diag : diag","COMPLETION: DiagnoseIfAttr : DiagnoseIfAttr","COMPLETION: Diagnostic : Diagnostic","COMPLETION: DiagnosticBuilder : DiagnosticBuilder","COMPLETION: DiagnosticConsumer : DiagnosticConsumer","COMPLETION: DiagnosticError : DiagnosticError","COMPLETION: DiagnosticErrorTrap : DiagnosticErrorTrap","COMPLETION: DiagnosticIDs : DiagnosticIDs","COMPLETION: DiagnosticLevelMask : DiagnosticLevelMask","COMPLETION: DiagnosticMapping : DiagnosticMapping","COMPLETION: DiagnosticNoteRenderer : DiagnosticNoteRenderer","COMPLETION: DiagnosticOptions : DiagnosticOptions","COMPLETION: DiagnosticRenderer : DiagnosticRenderer","COMPLETION: DiagnosticsEngine : DiagnosticsEngine","COMPLETION: DiagNullabilityKind : DiagNullabilityKind","COMPLETION: DiagOrStoredDiag : DiagOrStoredDiag","COMPLETION: diff : diff","COMPLETION: DirectoryEntry : DirectoryEntry","COMPLETION: DirectoryLookup : DirectoryLookup","COMPLETION: DisableTailCallsAttr : DisableTailCallsAttr","COMPLETION: DLLExportAttr : DLLExportAttr","COMPLETION: DLLImportAttr : DLLImportAttr","COMPLETION: DominatorTree : DominatorTree","COMPLETION: DomTreeNode : DomTreeNode","COMPLETION: DoPrintPreprocessedInput : [#void#]DoPrintPreprocessedInput(\u003c#Preprocessor \u0026PP#\u003e, \u003c#raw_ostream *OS#\u003e, \u003c#const PreprocessorOutputOptions \u0026Opts#\u003e)","COMPLETION: DoRewriteTest : [#void#]DoRewriteTest(\u003c#Preprocessor \u0026PP#\u003e, \u003c#raw_ostream *OS#\u003e)","COMPLETION: DoStmt : DoStmt","COMPLETION: driver : driver","COMPLETION: Dtor_Base : [#clang::CXXDtorType#]Dtor_Base","COMPLETION: Dtor_Comdat : [#clang::CXXDtorType#]Dtor_Comdat","COMPLETION: Dtor_Complete : [#clang::CXXDtorType#]Dtor_Complete","COMPLETION: Dtor_Deleting : [#clang::CXXDtorType#]Dtor_Deleting","COMPLETION: DumpModuleInfoAction : DumpModuleInfoAction","COMPLETION: DumpRawTokensAction : DumpRawTokensAction","COMPLETION: DumpTokensAction : DumpTokensAction","COMPLETION: dyn_cast : [#typename std::enable_if\u003c!is_simple_type\u003cY\u003e::value, typename cast_retty\u003cX, const Y\u003e::ret_type\u003e::type#]dyn_cast\u003c\u003c#class X#\u003e\u003e(\u003c#const Y \u0026Val#\u003e)","COMPLETION: dyn_cast : [#typename cast_retty\u003cX, Y\u003e::ret_type#]dyn_cast\u003c\u003c#class X#\u003e\u003e(\u003c#Y \u0026Val#\u003e)","COMPLETION: dyn_cast : [#typename cast_retty\u003cX, Y *\u003e::ret_type#]dyn_cast\u003c\u003c#class X#\u003e\u003e(\u003c#Y *Val#\u003e)","COMPLETION: dyn_cast_or_null : [#typename std::enable_if\u003c!is_simple_type\u003cY\u003e::value, typename cast_retty\u003cX, const Y\u003e::ret_type\u003e::type#]dyn_cast_or_null\u003c\u003c#class X#\u003e\u003e(\u003c#const Y \u0026Val#\u003e)","COMPLETION: dyn_cast_or_null : [#typename std::enable_if\u003c!is_simple_type\u003cY\u003e::value, typename cast_retty\u003cX, Y\u003e::ret_type\u003e::type#]dyn_cast_or_null\u003c\u003c#class X#\u003e\u003e(\u003c#Y \u0026Val#\u003e)","COMPLETION: dyn_cast_or_null : [#typename cast_retty\u003cX, Y *\u003e::ret_type#]dyn_cast_or_null\u003c\u003c#class X#\u003e\u003e(\u003c#Y *Val#\u003e)","COMPLETION: edit : edit","COMPLETION: ElaboratedLocInfo : ElaboratedLocInfo","COMPLETION: ElaboratedType : ElaboratedType","COMPLETION: ElaboratedTypeKeyword : ElaboratedTypeKeyword","COMPLETION: ElaboratedTypeLoc : ElaboratedTypeLoc","COMPLETION: EmbedBitcode : [#void#]EmbedBitcode(\u003c#llvm::Module *M#\u003e, \u003c#const CodeGenOptions \u0026CGOpts#\u003e, \u003c#llvm::MemoryBufferRef Buf#\u003e)","COMPLETION: EmitAssemblyAction : EmitAssemblyAction","COMPLETION: EmitBackendOutput : [#void#]EmitBackendOutput(\u003c#DiagnosticsEngine \u0026Diags#\u003e, \u003c#const HeaderSearchOptions \u0026#\u003e, \u003c#const CodeGenOptions \u0026CGOpts#\u003e, \u003c#const TargetOptions \u0026TOpts#\u003e, \u003c#const LangOptions \u0026LOpts#\u003e, \u003c#const llvm::DataLayout \u0026TDesc#\u003e, \u003c#llvm::Module *M#\u003e, \u003c#BackendAction Action#\u003e, \u003c#std::unique_ptr\u003craw_pwrite_stream\u003e OS#\u003e)","COMPLETION: EmitBCAction : EmitBCAction","COMPLETION: EmitCodeGenOnlyAction : EmitCodeGenOnlyAction","COMPLETION: EmitLLVMAction : EmitLLVMAction","COMPLETION: EmitLLVMOnlyAction : EmitLLVMOnlyAction","COMPLETION: EmitObjAction : EmitObjAction","COMPLETION: EmptyBasesAttr : EmptyBasesAttr","COMPLETION: EmptyDecl : EmptyDecl","COMPLETION: EmptyPragmaHandler : EmptyPragmaHandler","COMPLETION: EnableIfAttr : EnableIfAttr","COMPLETION: EnterExpressionEvaluationContext : EnterExpressionEvaluationContext","COMPLETION: ento : ento","COMPLETION: EnumConstantDecl : EnumConstantDecl","COMPLETION: EnumDecl : EnumDecl","COMPLETION: EnumExtensibilityAttr : EnumExtensibilityAttr","COMPLETION: EnumType : EnumType","COMPLETION: EnumTypeLoc : EnumTypeLoc","COMPLETION: EpsilonPoint : EpsilonPoint","COMPLETION: EST_BasicNoexcept : [#clang::ExceptionSpecificationType#]EST_BasicNoexcept","COMPLETION: EST_ComputedNoexcept : [#clang::ExceptionSpecificationType#]EST_ComputedNoexcept","COMPLETION: EST_Dynamic : [#clang::ExceptionSpecificationType#]EST_Dynamic","COMPLETION: EST_DynamicNone : [#clang::ExceptionSpecificationType#]EST_DynamicNone","COMPLETION: EST_MSAny : [#clang::ExceptionSpecificationType#]EST_MSAny","COMPLETION: EST_None : [#clang::ExceptionSpecificationType#]EST_None","COMPLETION: EST_Unevaluated : [#clang::ExceptionSpecificationType#]EST_Unevaluated","COMPLETION: EST_Uninstantiated : [#clang::ExceptionSpecificationType#]EST_Uninstantiated","COMPLETION: EST_Unparsed : [#clang::ExceptionSpecificationType#]EST_Unparsed","COMPLETION: ET_IsLValueExpr : [#clang::ExpressionTrait#]ET_IsLValueExpr","COMPLETION: ET_IsRValueExpr : [#clang::ExpressionTrait#]ET_IsRValueExpr","COMPLETION: ETK_Class : [#clang::ElaboratedTypeKeyword#]ETK_Class","COMPLETION: ETK_Enum : [#clang::ElaboratedTypeKeyword#]ETK_Enum","COMPLETION: ETK_Interface : [#clang::ElaboratedTypeKeyword#]ETK_Interface","COMPLETION: ETK_None : [#clang::ElaboratedTypeKeyword#]ETK_None","COMPLETION: ETK_Struct : [#clang::ElaboratedTypeKeyword#]ETK_Struct","COMPLETION: ETK_Typename : [#clang::ElaboratedTypeKeyword#]ETK_Typename","COMPLETION: ETK_Union : [#clang::ElaboratedTypeKeyword#]ETK_Union","COMPLETION: EvaluatedExprVisitor : EvaluatedExprVisitor\u003c\u003c#typename ImplClass#\u003e\u003e","COMPLETION: EvaluatedExprVisitorBase : EvaluatedExprVisitorBase\u003c\u003c#template\u003c...\u003e class Ptr#\u003e, \u003c#typename ImplClass#\u003e\u003e","COMPLETION: EvaluatedStmt : EvaluatedStmt","COMPLETION: ExceptionSpecificationType : ExceptionSpecificationType","COMPLETION: ExclusiveTrylockFunctionAttr : ExclusiveTrylockFunctionAttr","COMPLETION: ExecuteCompilerInvocation : [#bool#]ExecuteCompilerInvocation(\u003c#CompilerInstance *Clang#\u003e)","COMPLETION: expandSanitizerGroups : [#SanitizerMask#]expandSanitizerGroups(\u003c#SanitizerMask Kinds#\u003e)","COMPLETION: expandUCNs : [#void#]expandUCNs(\u003c#SmallVectorImpl\u003cchar\u003e \u0026Buf#\u003e, \u003c#StringRef Input#\u003e)","COMPLETION: Expected : Expected\u003c\u003c#class T#\u003e\u003e","COMPLETION: ExpectedForMaybeUnused : [#clang::AttributeDeclKind#]ExpectedForMaybeUnused","COMPLETION: ExpectedFunction : [#clang::AttributeDeclKind#]ExpectedFunction","COMPLETION: ExpectedFunctionMethodOrBlock : [#clang::AttributeDeclKind#]ExpectedFunctionMethodOrBlock","COMPLETION: ExpectedFunctionMethodOrParameter : [#clang::AttributeDeclKind#]ExpectedFunctionMethodOrParameter","COMPLETION: ExpectedFunctionOrMethod : [#clang::AttributeDeclKind#]ExpectedFunctionOrMethod","COMPLETION: ExpectedFunctionVariableOrClass : [#clang::AttributeDeclKind#]ExpectedFunctionVariableOrClass","COMPLETION: ExpectedFunctionWithProtoType : [#clang::AttributeDeclKind#]ExpectedFunctionWithProtoType","COMPLETION: ExpectedKernelFunction : [#clang::AttributeDeclKind#]ExpectedKernelFunction","COMPLETION: ExpectedTypeOrNamespace : [#clang::AttributeDeclKind#]ExpectedTypeOrNamespace","COMPLETION: ExpectedUnion : [#clang::AttributeDeclKind#]ExpectedUnion","COMPLETION: ExpectedVariable : [#clang::AttributeDeclKind#]ExpectedVariable","COMPLETION: ExpectedVariableFieldOrTag : [#clang::AttributeDeclKind#]ExpectedVariableFieldOrTag","COMPLETION: ExpectedVariableOrField : [#clang::AttributeDeclKind#]ExpectedVariableOrField","COMPLETION: ExpectedVariableOrFunction : [#clang::AttributeDeclKind#]ExpectedVariableOrFunction","COMPLETION: ExplicitCastExpr : ExplicitCastExpr","COMPLETION: ExportDecl : ExportDecl","COMPLETION: Expr : Expr","COMPLETION: ExprEmpty : [#ExprResult#]ExprEmpty()","COMPLETION: ExprError : [#ExprResult#]ExprError()","COMPLETION: ExprError : [#ExprResult#]ExprError(\u003c#const DiagnosticBuilder \u0026#\u003e)","COMPLETION: ExpressionTrait : ExpressionTrait","COMPLETION: ExpressionTraitExpr : ExpressionTraitExpr","COMPLETION: ExprObjectKind : ExprObjectKind","COMPLETION: ExprResult : ExprResult","COMPLETION: ExprValueKind : ExprValueKind","COMPLETION: ExprWithCleanups : ExprWithCleanups","COMPLETION: ExtensionRAIIObject : ExtensionRAIIObject","COMPLETION: ExternalASTMerger : ExternalASTMerger","COMPLETION: ExternalASTSource : ExternalASTSource","COMPLETION: ExternalHeaderFileInfoSource : ExternalHeaderFileInfoSource","COMPLETION: ExternalLinkage : [#clang::Linkage#]ExternalLinkage","COMPLETION: ExternalPreprocessingRecordSource : ExternalPreprocessingRecordSource","COMPLETION: ExternalPreprocessorSource : ExternalPreprocessorSource","COMPLETION: ExternalSemaSource : ExternalSemaSource","COMPLETION: ExternalSLocEntrySource : ExternalSLocEntrySource","COMPLETION: ExternalSourceSymbolAttr : ExternalSourceSymbolAttr","COMPLETION: ExternalVTableUse : ExternalVTableUse","COMPLETION: ExternCContextDecl : ExternCContextDecl","COMPLETION: ExtQuals : ExtQuals","COMPLETION: ExtQualsTypeCommonBase : ExtQualsTypeCommonBase","COMPLETION: ExtVectorElementExpr : ExtVectorElementExpr","COMPLETION: ExtVectorType : ExtVectorType","COMPLETION: ExtVectorTypeLoc : ExtVectorTypeLoc","COMPLETION: FallThroughAttr : FallThroughAttr","COMPLETION: FastCallAttr : FastCallAttr","COMPLETION: FDK_Declaration : [#clang::FunctionDefinitionKind#]FDK_Declaration","COMPLETION: FDK_Defaulted : [#clang::FunctionDefinitionKind#]FDK_Defaulted","COMPLETION: FDK_Definition : [#clang::FunctionDefinitionKind#]FDK_Definition","COMPLETION: FDK_Deleted : [#clang::FunctionDefinitionKind#]FDK_Deleted","COMPLETION: FieldDecl : FieldDecl","COMPLETION: FieldDeclarator : FieldDeclarator","COMPLETION: FileData : FileData","COMPLETION: FileEntry : FileEntry","COMPLETION: FileID : FileID","COMPLETION: FileManager : FileManager","COMPLETION: FilenamePatternConstraint : FilenamePatternConstraint","COMPLETION: FileNullability : FileNullability","COMPLETION: FileNullabilityMap : FileNullabilityMap","COMPLETION: FileScopeAsmDecl : FileScopeAsmDecl","COMPLETION: FileSystemOptions : FileSystemOptions","COMPLETION: FileSystemStatCache : FileSystemStatCache","COMPLETION: FinalAttr : FinalAttr","COMPLETION: FindThinLTOModule : [#llvm::Expected\u003cllvm::BitcodeModule\u003e#]FindThinLTOModule(\u003c#llvm::MemoryBufferRef MBRef#\u003e)","COMPLETION: FixedSizeTemplateParameterListStorage : FixedSizeTemplateParameterListStorage\u003c\u003c#size_t N#\u003e, \u003c#bool HasRequiresClause#\u003e\u003e","COMPLETION: FixItAction : FixItAction","COMPLETION: FixItHint : FixItHint","COMPLETION: FixItOptions : FixItOptions","COMPLETION: FixItRecompile : FixItRecompile","COMPLETION: FixItRewriter : FixItRewriter","COMPLETION: FlagEnumAttr : FlagEnumAttr","COMPLETION: FlattenAttr : FlattenAttr","COMPLETION: FloatingLiteral : FloatingLiteral","COMPLETION: format : format","COMPLETION: FormatArgAttr : FormatArgAttr","COMPLETION: FormatASTNodeDiagnosticArgument : [#void#]FormatASTNodeDiagnosticArgument(\u003c#DiagnosticsEngine::ArgumentKind Kind#\u003e, \u003c#intptr_t Val#\u003e, \u003c#StringRef Modifier#\u003e, \u003c#StringRef Argument#\u003e, \u003c#ArrayRef\u003cDiagnosticsEngine::ArgumentValue\u003e PrevArgs#\u003e, \u003c#SmallVectorImpl\u003cchar\u003e \u0026Output#\u003e, \u003c#void *Cookie#\u003e, \u003c#ArrayRef\u003cintptr_t\u003e QualTypeVals#\u003e)","COMPLETION: FormatAttr : FormatAttr","COMPLETION: ForStmt : ForStmt","COMPLETION: ForwardingDiagnosticConsumer : ForwardingDiagnosticConsumer","COMPLETION: FPOptions : FPOptions","COMPLETION: FriendDecl : FriendDecl","COMPLETION: FriendTemplateDecl : FriendTemplateDecl","COMPLETION: frontend : frontend","COMPLETION: FrontendAction : FrontendAction","COMPLETION: FrontendInputFile : FrontendInputFile","COMPLETION: FrontendOptions : FrontendOptions","COMPLETION: FrontendPluginRegistry : FrontendPluginRegistry","COMPLETION: FTIHasNonVoidParameters : [#bool#]FTIHasNonVoidParameters(\u003c#const DeclaratorChunk::FunctionTypeInfo \u0026FTI#\u003e)","COMPLETION: FTIHasSingleVoidParameter : [#bool#]FTIHasSingleVoidParameter(\u003c#const DeclaratorChunk::FunctionTypeInfo \u0026FTI#\u003e)","COMPLETION: FullSourceLoc : FullSourceLoc","COMPLETION: FunctionCallFilterCCC : FunctionCallFilterCCC","COMPLETION: FunctionDecl : FunctionDecl","COMPLETION: FunctionDefinitionKind : FunctionDefinitionKind","COMPLETION: FunctionLocInfo : FunctionLocInfo","COMPLETION: FunctionNoProtoType : FunctionNoProtoType","COMPLETION: FunctionNoProtoTypeLoc : FunctionNoProtoTypeLoc","COMPLETION: FunctionParmPackExpr : FunctionParmPackExpr","COMPLETION: FunctionProtoType : FunctionProtoType","COMPLETION: FunctionProtoTypeLoc : FunctionProtoTypeLoc","COMPLETION: FunctionTemplateDecl : FunctionTemplateDecl","COMPLETION: FunctionTemplateSpecializationInfo : FunctionTemplateSpecializationInfo","COMPLETION: FunctionType : FunctionType","COMPLETION: FunctionTypeLoc : FunctionTypeLoc","COMPLETION: GCCAsmStmt : GCCAsmStmt","COMPLETION: GenerateModuleAction : GenerateModuleAction","COMPLETION: GenerateModuleFromModuleMapAction : GenerateModuleFromModuleMapAction","COMPLETION: GenerateModuleInterfaceAction : GenerateModuleInterfaceAction","COMPLETION: GeneratePCHAction : GeneratePCHAction","COMPLETION: GeneratePTHAction : GeneratePTHAction","COMPLETION: GenericSelectionExpr : GenericSelectionExpr","COMPLETION: getAsNamedDecl : [#NamedDecl *#]getAsNamedDecl(\u003c#TemplateParameter P#\u003e)","COMPLETION: getAsString : [#llvm::StringRef#]getAsString(\u003c#SyncScope S#\u003e)","COMPLETION: getAsTypeTemplateDecl : [#TemplateDecl *#]getAsTypeTemplateDecl(\u003c#Decl *D#\u003e)","COMPLETION: getBinOpPrecedence : [#prec::Level#]getBinOpPrecedence(\u003c#tok::TokenKind Kind#\u003e, \u003c#bool GreaterThanIsOperator#\u003e, \u003c#bool CPlusPlus11#\u003e)","COMPLETION: getClangFullCPPVersion : [#std::string#]getClangFullCPPVersion()","COMPLETION: getClangFullRepositoryVersion : [#std::string#]getClangFullRepositoryVersion()","COMPLETION: getClangFullVersion : [#std::string#]getClangFullVersion()","COMPLETION: getClangRepositoryPath : [#std::string#]getClangRepositoryPath()","COMPLETION: getClangRevision : [#std::string#]getClangRevision()","COMPLETION: getClangToolFullVersion : [#std::string#]getClangToolFullVersion(\u003c#llvm::StringRef ToolName#\u003e)","COMPLETION: getConstructorInfo : [#ConstructorInfo#]getConstructorInfo(\u003c#NamedDecl *ND#\u003e)","COMPLETION: GetConversionRank : [#ImplicitConversionRank#]GetConversionRank(\u003c#ImplicitConversionKind Kind#\u003e)","COMPLETION: getCursorKindForDecl : [#CXCursorKind#]getCursorKindForDecl(\u003c#const Decl *D#\u003e)","COMPLETION: getDeclUsageType : [#QualType#]getDeclUsageType(\u003c#ASTContext \u0026C#\u003e, \u003c#const NamedDecl *ND#\u003e)","COMPLETION: getDLLAttr : [#InheritableAttr *#]getDLLAttr(\u003c#Decl *D#\u003e)","COMPLETION: getFormalLinkage : [#Linkage#]getFormalLinkage(\u003c#Linkage L#\u003e)","COMPLETION: getFunctionExtInfo : [#FunctionType::ExtInfo#]getFunctionExtInfo(\u003c#const Type \u0026t#\u003e)","COMPLETION: getFunctionExtInfo : [#FunctionType::ExtInfo#]getFunctionExtInfo(\u003c#QualType t#\u003e)","COMPLETION: GetIssueHash : [#llvm::SmallString\u003c32\u003e#]GetIssueHash(\u003c#const SourceManager \u0026SM#\u003e, \u003c#FullSourceLoc \u0026IssueLoc#\u003e, \u003c#llvm::StringRef CheckerName#\u003e, \u003c#llvm::StringRef BugType#\u003e, \u003c#const Decl *D#\u003e, \u003c#const LangOptions \u0026LangOpts#\u003e)","COMPLETION: GetIssueString : [#std::string#]GetIssueString(\u003c#const SourceManager \u0026SM#\u003e, \u003c#FullSourceLoc \u0026IssueLoc#\u003e, \u003c#llvm::StringRef CheckerName#\u003e, \u003c#llvm::StringRef BugType#\u003e, \u003c#const Decl *D#\u003e, \u003c#const LangOptions \u0026LangOpts#\u003e)","COMPLETION: getLambdaAwareParentOfDeclContext : [#DeclContext *#]getLambdaAwareParentOfDeclContext(\u003c#DeclContext *DC#\u003e)","COMPLETION: getLambdaStaticInvokerName : [#StringRef#]getLambdaStaticInvokerName()","COMPLETION: getLangASFromTargetAS : [#LangAS#]getLangASFromTargetAS(\u003c#unsigned int TargetAS#\u003e)","COMPLETION: getLastArgIntValue : [#int#]getLastArgIntValue(\u003c#const llvm::opt::ArgList \u0026Args#\u003e, \u003c#llvm::opt::OptSpecifier Id#\u003e, \u003c#int Default#\u003e{#, \u003c#DiagnosticsEngine *Diags = nullptr#\u003e#})","COMPLETION: getLastArgIntValue : [#int#]getLastArgIntValue(\u003c#const llvm::opt::ArgList \u0026Args#\u003e, \u003c#llvm::opt::OptSpecifier Id#\u003e, \u003c#int Default#\u003e, \u003c#DiagnosticsEngine \u0026Diags#\u003e)","COMPLETION: getLastArgUInt64Value : [#uint64_t#]getLastArgUInt64Value(\u003c#const llvm::opt::ArgList \u0026Args#\u003e, \u003c#llvm::opt::OptSpecifier Id#\u003e, \u003c#uint64_t Default#\u003e{#, \u003c#DiagnosticsEngine *Diags = nullptr#\u003e#})","COMPLETION: getLastArgUInt64Value : [#uint64_t#]getLastArgUInt64Value(\u003c#const llvm::opt::ArgList \u0026Args#\u003e, \u003c#llvm::opt::OptSpecifier Id#\u003e, \u003c#uint64_t Default#\u003e, \u003c#DiagnosticsEngine \u0026Diags#\u003e)","COMPLETION: getLLVMRepositoryPath : [#std::string#]getLLVMRepositoryPath()","COMPLETION: getLLVMRevision : [#std::string#]getLLVMRevision()","COMPLETION: getMacroUsagePriority : [#unsigned int#]getMacroUsagePriority(\u003c#StringRef MacroName#\u003e, \u003c#const LangOptions \u0026LangOpts#\u003e{#, \u003c#bool PreferredTypeIsPointer = false#\u003e#})","COMPLETION: getNullabilitySpelling : [#llvm::StringRef#]getNullabilitySpelling(\u003c#NullabilityKind kind#\u003e{#, \u003c#bool isContextSensitive = false#\u003e#})","COMPLETION: GetNullarySelector : [#Selector#]GetNullarySelector(\u003c#StringRef name#\u003e, \u003c#ASTContext \u0026Ctx#\u003e)","COMPLETION: getOpenMPCaptureRegions : [#void#]getOpenMPCaptureRegions(\u003c#llvm::SmallVectorImpl\u003cOpenMPDirectiveKind\u003e \u0026CaptureRegions#\u003e, \u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: getOpenMPClauseKind : [#OpenMPClauseKind#]getOpenMPClauseKind(\u003c#llvm::StringRef Str#\u003e)","COMPLETION: getOpenMPClauseName : [#const char *#]getOpenMPClauseName(\u003c#OpenMPClauseKind Kind#\u003e)","COMPLETION: getOpenMPDirectiveKind : [#OpenMPDirectiveKind#]getOpenMPDirectiveKind(\u003c#llvm::StringRef Str#\u003e)","COMPLETION: getOpenMPDirectiveName : [#const char *#]getOpenMPDirectiveName(\u003c#OpenMPDirectiveKind Kind#\u003e)","COMPLETION: getOpenMPSimpleClauseType : [#unsigned int#]getOpenMPSimpleClauseType(\u003c#OpenMPClauseKind Kind#\u003e, \u003c#llvm::StringRef Str#\u003e)","COMPLETION: getOpenMPSimpleClauseTypeName : [#const char *#]getOpenMPSimpleClauseTypeName(\u003c#OpenMPClauseKind Kind#\u003e, \u003c#unsigned int Type#\u003e)","COMPLETION: getOperatorSpelling : [#const char *#]getOperatorSpelling(\u003c#OverloadedOperatorKind Operator#\u003e)","COMPLETION: getParameterABISpelling : [#llvm::StringRef#]getParameterABISpelling(\u003c#ParameterABI kind#\u003e)","COMPLETION: getPPTransparentSanitizers : [#SanitizerMask#]getPPTransparentSanitizers()","COMPLETION: getPrimaryMergedDecl : [#Decl *#]getPrimaryMergedDecl(\u003c#Decl *D#\u003e)","COMPLETION: getSimplifiedTypeClass : [#SimplifiedTypeClass#]getSimplifiedTypeClass(\u003c#CanQualType T#\u003e)","COMPLETION: getSpecificAttr : [#SpecificAttr *#]getSpecificAttr\u003c\u003c#typename SpecificAttr#\u003e\u003e(\u003c#const Container \u0026container#\u003e)","COMPLETION: getStackIndexOfNearestEnclosingCaptureCapableLambda : [#Optional\u003cunsigned int\u003e#]getStackIndexOfNearestEnclosingCaptureCapableLambda(\u003c#ArrayRef\u003cconst sema::FunctionScopeInfo *\u003e FunctionScopes#\u003e, \u003c#VarDecl *VarToCapture#\u003e, \u003c#Sema \u0026S#\u003e)","COMPLETION: getStandardSelectorLoc : [#SourceLocation#]getStandardSelectorLoc(\u003c#unsigned int Index#\u003e, \u003c#Selector Sel#\u003e, \u003c#bool WithArgSpace#\u003e, \u003c#ArrayRef\u003cExpr *\u003e Args#\u003e, \u003c#SourceLocation EndLoc#\u003e)","COMPLETION: getStandardSelectorLoc : [#SourceLocation#]getStandardSelectorLoc(\u003c#unsigned int Index#\u003e, \u003c#Selector Sel#\u003e, \u003c#bool WithArgSpace#\u003e, \u003c#ArrayRef\u003cParmVarDecl *\u003e Args#\u003e, \u003c#SourceLocation EndLoc#\u003e)","COMPLETION: getTemplateParamsRange : [#SourceRange#]getTemplateParamsRange(\u003c#const TemplateParameterList *const *Params#\u003e, \u003c#unsigned int NumParams#\u003e)","COMPLETION: GetUnarySelector : [#Selector#]GetUnarySelector(\u003c#StringRef name#\u003e, \u003c#ASTContext \u0026Ctx#\u003e)","COMPLETION: GlobalCodeCompletionAllocator : GlobalCodeCompletionAllocator","COMPLETION: GlobalDecl : GlobalDecl","COMPLETION: GlobalModuleIndex : GlobalModuleIndex","COMPLETION: GNU_LANG : [#clang::LanguageID#]GNU_LANG","COMPLETION: GNUInlineAttr : GNUInlineAttr","COMPLETION: GNUNullExpr : GNUNullExpr","COMPLETION: GotoStmt : GotoStmt","COMPLETION: GreaterThanIsOperatorScope : GreaterThanIsOperatorScope","COMPLETION: GuardedByAttr : GuardedByAttr","COMPLETION: GuardedVarAttr : GuardedVarAttr","COMPLETION: GVA_AvailableExternally : [#clang::GVALinkage#]GVA_AvailableExternally","COMPLETION: GVA_DiscardableODR : [#clang::GVALinkage#]GVA_DiscardableODR","COMPLETION: GVA_Internal : [#clang::GVALinkage#]GVA_Internal","COMPLETION: GVA_StrongExternal : [#clang::GVALinkage#]GVA_StrongExternal","COMPLETION: GVA_StrongODR : [#clang::GVALinkage#]GVA_StrongODR","COMPLETION: GVALinkage : GVALinkage","COMPLETION: hasAttribute : [#int#]hasAttribute(\u003c#AttrSyntax Syntax#\u003e, \u003c#const IdentifierInfo *Scope#\u003e, \u003c#const IdentifierInfo *Attr#\u003e, \u003c#const TargetInfo \u0026Target#\u003e, \u003c#const LangOptions \u0026LangOpts#\u003e)","COMPLETION: hasSpecificAttr : [#bool#]hasSpecificAttr\u003c\u003c#typename SpecificAttr#\u003e\u003e(\u003c#const Container \u0026container#\u003e)","COMPLETION: hasStandardSelectorLocs : [#SelectorLocationsKind#]hasStandardSelectorLocs(\u003c#Selector Sel#\u003e, \u003c#ArrayRef\u003cSourceLocation\u003e SelLocs#\u003e, \u003c#ArrayRef\u003cExpr *\u003e Args#\u003e, \u003c#SourceLocation EndLoc#\u003e)","COMPLETION: hasStandardSelectorLocs : [#SelectorLocationsKind#]hasStandardSelectorLocs(\u003c#Selector Sel#\u003e, \u003c#ArrayRef\u003cSourceLocation\u003e SelLocs#\u003e, \u003c#ArrayRef\u003cParmVarDecl *\u003e Args#\u003e, \u003c#SourceLocation EndLoc#\u003e)","COMPLETION: HeaderFileInfo : HeaderFileInfo","COMPLETION: HeaderMap : HeaderMap","COMPLETION: HeaderMapImpl : HeaderMapImpl","COMPLETION: HeaderSearch : HeaderSearch","COMPLETION: HeaderSearchOptions : HeaderSearchOptions","COMPLETION: Hexagon : Hexagon","COMPLETION: HiddenVisibility : [#clang::Visibility#]HiddenVisibility","COMPLETION: HMAP_EmptyBucketKey : [#clang::(anonymous)#]HMAP_EmptyBucketKey","COMPLETION: HMAP_HeaderMagicNumber : [#clang::(anonymous)#]HMAP_HeaderMagicNumber","COMPLETION: HMAP_HeaderVersion : [#clang::(anonymous)#]HMAP_HeaderVersion","COMPLETION: HMapBucket : HMapBucket","COMPLETION: HMapHeader : HMapHeader","COMPLETION: HotAttr : HotAttr","COMPLETION: html : html","COMPLETION: HTMLPrintAction : HTMLPrintAction","COMPLETION: IBActionAttr : IBActionAttr","COMPLETION: IBOutletAttr : IBOutletAttr","COMPLETION: IBOutletCollectionAttr : IBOutletCollectionAttr","COMPLETION: ICIS_CopyInit : [#clang::InClassInitStyle#]ICIS_CopyInit","COMPLETION: ICIS_ListInit : [#clang::InClassInitStyle#]ICIS_ListInit","COMPLETION: ICIS_NoInit : [#clang::InClassInitStyle#]ICIS_NoInit","COMPLETION: ICK_Array_To_Pointer : [#clang::ImplicitConversionKind#]ICK_Array_To_Pointer","COMPLETION: ICK_Block_Pointer_Conversion : [#clang::ImplicitConversionKind#]ICK_Block_Pointer_Conversion","COMPLETION: ICK_Boolean_Conversion : [#clang::ImplicitConversionKind#]ICK_Boolean_Conversion","COMPLETION: ICK_C_Only_Conversion : [#clang::ImplicitConversionKind#]ICK_C_Only_Conversion","COMPLETION: ICK_Compatible_Conversion : [#clang::ImplicitConversionKind#]ICK_Compatible_Conversion","COMPLETION: ICK_Complex_Conversion : [#clang::ImplicitConversionKind#]ICK_Complex_Conversion","COMPLETION: ICK_Complex_Promotion : [#clang::ImplicitConversionKind#]ICK_Complex_Promotion","COMPLETION: ICK_Complex_Real : [#clang::ImplicitConversionKind#]ICK_Complex_Real","COMPLETION: ICK_Derived_To_Base : [#clang::ImplicitConversionKind#]ICK_Derived_To_Base","COMPLETION: ICK_Floating_Conversion : [#clang::ImplicitConversionKind#]ICK_Floating_Conversion","COMPLETION: ICK_Floating_Integral : [#clang::ImplicitConversionKind#]ICK_Floating_Integral","COMPLETION: ICK_Floating_Promotion : [#clang::ImplicitConversionKind#]ICK_Floating_Promotion","COMPLETION: ICK_Function_Conversion : [#clang::ImplicitConversionKind#]ICK_Function_Conversion","COMPLETION: ICK_Function_To_Pointer : [#clang::ImplicitConversionKind#]ICK_Function_To_Pointer","COMPLETION: ICK_Identity : [#clang::ImplicitConversionKind#]ICK_Identity","COMPLETION: ICK_Incompatible_Pointer_Conversion : [#clang::ImplicitConversionKind#]ICK_Incompatible_Pointer_Conversion","COMPLETION: ICK_Integral_Conversion : [#clang::ImplicitConversionKind#]ICK_Integral_Conversion","COMPLETION: ICK_Integral_Promotion : [#clang::ImplicitConversionKind#]ICK_Integral_Promotion","COMPLETION: ICK_Lvalue_To_Rvalue : [#clang::ImplicitConversionKind#]ICK_Lvalue_To_Rvalue","COMPLETION: ICK_Num_Conversion_Kinds : [#clang::ImplicitConversionKind#]ICK_Num_Conversion_Kinds","COMPLETION: ICK_Pointer_Conversion : [#clang::ImplicitConversionKind#]ICK_Pointer_Conversion","COMPLETION: ICK_Pointer_Member : [#clang::ImplicitConversionKind#]ICK_Pointer_Member","COMPLETION: ICK_Qualification : [#clang::ImplicitConversionKind#]ICK_Qualification","COMPLETION: ICK_TransparentUnionConversion : [#clang::ImplicitConversionKind#]ICK_TransparentUnionConversion","COMPLETION: ICK_Vector_Conversion : [#clang::ImplicitConversionKind#]ICK_Vector_Conversion","COMPLETION: ICK_Vector_Splat : [#clang::ImplicitConversionKind#]ICK_Vector_Splat","COMPLETION: ICK_Writeback_Conversion : [#clang::ImplicitConversionKind#]ICK_Writeback_Conversion","COMPLETION: ICK_Zero_Event_Conversion : [#clang::ImplicitConversionKind#]ICK_Zero_Event_Conversion","COMPLETION: ICK_Zero_Queue_Conversion : [#clang::ImplicitConversionKind#]ICK_Zero_Queue_Conversion","COMPLETION: ICR_C_Conversion : [#clang::ImplicitConversionRank#]ICR_C_Conversion","COMPLETION: ICR_C_Conversion_Extension : [#clang::ImplicitConversionRank#]ICR_C_Conversion_Extension","COMPLETION: ICR_Complex_Real_Conversion : [#clang::ImplicitConversionRank#]ICR_Complex_Real_Conversion","COMPLETION: ICR_Conversion : [#clang::ImplicitConversionRank#]ICR_Conversion","COMPLETION: ICR_Exact_Match : [#clang::ImplicitConversionRank#]ICR_Exact_Match","COMPLETION: ICR_OCL_Scalar_Widening : [#clang::ImplicitConversionRank#]ICR_OCL_Scalar_Widening","COMPLETION: ICR_Promotion : [#clang::ImplicitConversionRank#]ICR_Promotion","COMPLETION: ICR_Writeback_Conversion : [#clang::ImplicitConversionRank#]ICR_Writeback_Conversion","COMPLETION: IdentifierInfo : IdentifierInfo","COMPLETION: IdentifierInfoLookup : IdentifierInfoLookup","COMPLETION: IdentifierIterator : IdentifierIterator","COMPLETION: IdentifierLoc : IdentifierLoc","COMPLETION: IdentifierLocPair : IdentifierLocPair","COMPLETION: IdentifierResolver : IdentifierResolver","COMPLETION: IdentifierTable : IdentifierTable","COMPLETION: idx : idx","COMPLETION: IfStmt : IfStmt","COMPLETION: IFuncAttr : IFuncAttr","COMPLETION: IgnoringDiagConsumer : IgnoringDiagConsumer","COMPLETION: ImaginaryLiteral : ImaginaryLiteral","COMPLETION: ImplicitCallPoint : ImplicitCallPoint","COMPLETION: ImplicitCastExpr : ImplicitCastExpr","COMPLETION: ImplicitConversionKind : ImplicitConversionKind","COMPLETION: ImplicitConversionRank : ImplicitConversionRank","COMPLETION: ImplicitConversionSequence : ImplicitConversionSequence","COMPLETION: ImplicitParamDecl : ImplicitParamDecl","COMPLETION: ImplicitValueInitExpr : ImplicitValueInitExpr","COMPLETION: ImportDecl : ImportDecl","COMPLETION: InBeforeInTUCacheEntry : InBeforeInTUCacheEntry","COMPLETION: InClassInitStyle : InClassInitStyle","COMPLETION: InclusionDirective : InclusionDirective","COMPLETION: IncompleteArrayType : IncompleteArrayType","COMPLETION: IncompleteArrayTypeLoc : IncompleteArrayTypeLoc","COMPLETION: index : index","COMPLETION: IndirectFieldDecl : IndirectFieldDecl","COMPLETION: IndirectGotoStmt : IndirectGotoStmt","COMPLETION: InheritableAttr : InheritableAttr","COMPLETION: InheritableParamAttr : InheritableParamAttr","COMPLETION: InheritedConstructor : InheritedConstructor","COMPLETION: InheritingConcreteTypeLoc : InheritingConcreteTypeLoc\u003c\u003c#class Base#\u003e, \u003c#class Derived#\u003e, \u003c#class TypeClass#\u003e\u003e","COMPLETION: InitializationKind : InitializationKind","COMPLETION: InitializationSequence : InitializationSequence","COMPLETION: InitializedEntity : InitializedEntity","COMPLETION: InitializePreprocessor : [#void#]InitializePreprocessor(\u003c#Preprocessor \u0026PP#\u003e, \u003c#const PreprocessorOptions \u0026PPOpts#\u003e, \u003c#const PCHContainerReader \u0026PCHContainerRdr#\u003e, \u003c#const FrontendOptions \u0026FEOpts#\u003e)","COMPLETION: InitListExpr : InitListExpr","COMPLETION: InitOnlyAction : InitOnlyAction","COMPLETION: InitPriorityAttr : InitPriorityAttr","COMPLETION: InitSegAttr : InitSegAttr","COMPLETION: InjectedClassNameType : InjectedClassNameType","COMPLETION: InjectedClassNameTypeLoc : InjectedClassNameTypeLoc","COMPLETION: InMessageExpressionRAIIObject : InMessageExpressionRAIIObject","COMPLETION: InputKind : InputKind","COMPLETION: IntegerLiteral : IntegerLiteral","COMPLETION: IntelOclBiccAttr : IntelOclBiccAttr","COMPLETION: InternalLinkage : [#clang::Linkage#]InternalLinkage","COMPLETION: InternalLinkageAttr : InternalLinkageAttr","COMPLETION: IntroducedSlot : [#AvailabilitySlot#]IntroducedSlot","COMPLETION: IntrusiveRefCntPtr : IntrusiveRefCntPtr\u003c\u003c#typename T#\u003e\u003e","COMPLETION: IntrusiveRefCntPtrInfo : IntrusiveRefCntPtrInfo\u003c\u003c#typename T#\u003e\u003e","COMPLETION: InvalidObjCMethodFamily : [#clang::(anonymous)#]InvalidObjCMethodFamily","COMPLETION: IPAK_BasicInlining : [#clang::IPAKind#]IPAK_BasicInlining","COMPLETION: IPAK_DynamicDispatch : [#clang::IPAKind#]IPAK_DynamicDispatch","COMPLETION: IPAK_DynamicDispatchBifurcate : [#clang::IPAKind#]IPAK_DynamicDispatchBifurcate","COMPLETION: IPAK_Inlining : [#clang::IPAKind#]IPAK_Inlining","COMPLETION: IPAK_None : [#clang::IPAKind#]IPAK_None","COMPLETION: IPAK_NotSet : [#clang::IPAKind#]IPAK_NotSet","COMPLETION: IPAKind : IPAKind","COMPLETION: isa : [#bool#]isa\u003c\u003c#class X#\u003e\u003e(\u003c#const Y \u0026Val#\u003e)","COMPLETION: isAllowedClauseForDirective : [#bool#]isAllowedClauseForDirective(\u003c#OpenMPDirectiveKind DKind#\u003e, \u003c#OpenMPClauseKind CKind#\u003e)","COMPLETION: isAlphanumeric : [#bool#]isAlphanumeric(\u003c#unsigned char c#\u003e)","COMPLETION: isASCII : [#bool#]isASCII(\u003c#char c#\u003e)","COMPLETION: isBetterOverloadCandidate : [#bool#]isBetterOverloadCandidate(\u003c#Sema \u0026S#\u003e, \u003c#const OverloadCandidate \u0026Cand1#\u003e, \u003c#const OverloadCandidate \u0026Cand2#\u003e, \u003c#SourceLocation Loc#\u003e, \u003c#OverloadCandidateSet::CandidateSetKind Kind#\u003e)","COMPLETION: isDigit : [#bool#]isDigit(\u003c#unsigned char c#\u003e)","COMPLETION: isDiscardableGVALinkage : [#bool#]isDiscardableGVALinkage(\u003c#GVALinkage L#\u003e)","COMPLETION: isDynamicExceptionSpec : [#bool#]isDynamicExceptionSpec(\u003c#ExceptionSpecificationType ESpecType#\u003e)","COMPLETION: IsEnumDeclComplete : [#bool#]IsEnumDeclComplete(\u003c#EnumDecl *ED#\u003e)","COMPLETION: IsEnumDeclScoped : [#bool#]IsEnumDeclScoped(\u003c#EnumDecl *ED#\u003e)","COMPLETION: isExternalFormalLinkage : [#bool#]isExternalFormalLinkage(\u003c#Linkage L#\u003e)","COMPLETION: isExternallyVisible : [#bool#]isExternallyVisible(\u003c#Linkage L#\u003e)","COMPLETION: isGenericLambdaCallOperatorSpecialization : [#bool#]isGenericLambdaCallOperatorSpecialization(\u003c#const CXXMethodDecl *MD#\u003e)","COMPLETION: isGenericLambdaCallOperatorSpecialization : [#bool#]isGenericLambdaCallOperatorSpecialization(\u003c#DeclContext *DC#\u003e)","COMPLETION: isHexDigit : [#bool#]isHexDigit(\u003c#unsigned char c#\u003e)","COMPLETION: isHorizontalWhitespace : [#bool#]isHorizontalWhitespace(\u003c#unsigned char c#\u003e)","COMPLETION: isIdentifierBody : [#bool#]isIdentifierBody(\u003c#unsigned char c#\u003e{#, \u003c#bool AllowDollar = false#\u003e#})","COMPLETION: isIdentifierHead : [#bool#]isIdentifierHead(\u003c#unsigned char c#\u003e{#, \u003c#bool AllowDollar = false#\u003e#})","COMPLETION: isLambdaCallOperator : [#bool#]isLambdaCallOperator(\u003c#const CXXMethodDecl *MD#\u003e)","COMPLETION: isLambdaCallOperator : [#bool#]isLambdaCallOperator(\u003c#const DeclContext *DC#\u003e)","COMPLETION: isLambdaConversionOperator : [#bool#]isLambdaConversionOperator(\u003c#CXXConversionDecl *C#\u003e)","COMPLETION: isLambdaConversionOperator : [#bool#]isLambdaConversionOperator(\u003c#Decl *D#\u003e)","COMPLETION: isLegalForFunction : [#bool#]isLegalForFunction(\u003c#StorageClass SC#\u003e)","COMPLETION: isLegalForVariable : [#bool#]isLegalForVariable(\u003c#StorageClass SC#\u003e)","COMPLETION: isLetter : [#bool#]isLetter(\u003c#unsigned char c#\u003e)","COMPLETION: isLowercase : [#bool#]isLowercase(\u003c#unsigned char c#\u003e)","COMPLETION: isNoexceptExceptionSpec : [#bool#]isNoexceptExceptionSpec(\u003c#ExceptionSpecificationType ESpecType#\u003e)","COMPLETION: isOpenMPDistributeDirective : [#bool#]isOpenMPDistributeDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPLoopBoundSharingDirective : [#bool#]isOpenMPLoopBoundSharingDirective(\u003c#OpenMPDirectiveKind Kind#\u003e)","COMPLETION: isOpenMPLoopDirective : [#bool#]isOpenMPLoopDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPNestingDistributeDirective : [#bool#]isOpenMPNestingDistributeDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPNestingTeamsDirective : [#bool#]isOpenMPNestingTeamsDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPParallelDirective : [#bool#]isOpenMPParallelDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPPrivate : [#bool#]isOpenMPPrivate(\u003c#OpenMPClauseKind Kind#\u003e)","COMPLETION: isOpenMPSimdDirective : [#bool#]isOpenMPSimdDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPTargetDataManagementDirective : [#bool#]isOpenMPTargetDataManagementDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPTargetExecutionDirective : [#bool#]isOpenMPTargetExecutionDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPTaskingDirective : [#bool#]isOpenMPTaskingDirective(\u003c#OpenMPDirectiveKind Kind#\u003e)","COMPLETION: isOpenMPTaskLoopDirective : [#bool#]isOpenMPTaskLoopDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPTeamsDirective : [#bool#]isOpenMPTeamsDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isOpenMPThreadPrivate : [#bool#]isOpenMPThreadPrivate(\u003c#OpenMPClauseKind Kind#\u003e)","COMPLETION: isOpenMPWorksharingDirective : [#bool#]isOpenMPWorksharingDirective(\u003c#OpenMPDirectiveKind DKind#\u003e)","COMPLETION: isPreprocessingNumberBody : [#bool#]isPreprocessingNumberBody(\u003c#unsigned char c#\u003e)","COMPLETION: isPrintable : [#bool#]isPrintable(\u003c#unsigned char c#\u003e)","COMPLETION: isPunctuation : [#bool#]isPunctuation(\u003c#unsigned char c#\u003e)","COMPLETION: isRawStringDelimBody : [#bool#]isRawStringDelimBody(\u003c#unsigned char c#\u003e)","COMPLETION: IsResultPtrLowBitFree : IsResultPtrLowBitFree\u003c\u003c#class Ptr#\u003e\u003e","COMPLETION: isTargetAddressSpace : [#bool#]isTargetAddressSpace(\u003c#LangAS AS#\u003e)","COMPLETION: isTemplateExplicitInstantiationOrSpecialization : [#bool#]isTemplateExplicitInstantiationOrSpecialization(\u003c#TemplateSpecializationKind Kind#\u003e)","COMPLETION: isTemplateInstantiation : [#bool#]isTemplateInstantiation(\u003c#TemplateSpecializationKind Kind#\u003e)","COMPLETION: isUnresolvedExceptionSpec : [#bool#]isUnresolvedExceptionSpec(\u003c#ExceptionSpecificationType ESpecType#\u003e)","COMPLETION: isUppercase : [#bool#]isUppercase(\u003c#unsigned char c#\u003e)","COMPLETION: isValidIdentifier : [#bool#]isValidIdentifier(\u003c#StringRef S#\u003e)","COMPLETION: IsVariableAConstantExpression : [#bool#]IsVariableAConstantExpression(\u003c#VarDecl *Var#\u003e, \u003c#ASTContext \u0026Context#\u003e)","COMPLETION: isVerticalWhitespace : [#bool#]isVerticalWhitespace(\u003c#unsigned char c#\u003e)","COMPLETION: isWhitespace : [#bool#]isWhitespace(\u003c#unsigned char c#\u003e)","COMPLETION: ItaniumMangleContext : ItaniumMangleContext","COMPLETION: ItaniumVTableContext : ItaniumVTableContext","COMPLETION: LabelDecl : LabelDecl","COMPLETION: LabelStmt : LabelStmt","COMPLETION: LambdaCapture : LambdaCapture","COMPLETION: LambdaCaptureDefault : LambdaCaptureDefault","COMPLETION: LambdaCaptureInitKind : LambdaCaptureInitKind","COMPLETION: LambdaCaptureKind : LambdaCaptureKind","COMPLETION: LambdaExpr : LambdaExpr","COMPLETION: LambdaIntroducer : LambdaIntroducer","COMPLETION: LangAS : LangAS","COMPLETION: LangASMap : LangASMap","COMPLETION: LangOptions : LangOptions","COMPLETION: LangOptionsBase : LangOptionsBase","COMPLETION: LangStandard : LangStandard","COMPLETION: LanguageID : LanguageID","COMPLETION: LanguageLinkage : LanguageLinkage","COMPLETION: LateParsedTemplate : LateParsedTemplate","COMPLETION: LayoutOverrideSource : LayoutOverrideSource","COMPLETION: LayoutVersionAttr : LayoutVersionAttr","COMPLETION: LazyASTUnresolvedSet : LazyASTUnresolvedSet","COMPLETION: LazyCXXBaseSpecifiersPtr : LazyCXXBaseSpecifiersPtr","COMPLETION: LazyCXXCtorInitializersPtr : LazyCXXCtorInitializersPtr","COMPLETION: LazyDeclPtr : LazyDeclPtr","COMPLETION: LazyDeclStmtPtr : LazyDeclStmtPtr","COMPLETION: LazyGenerationalUpdatePtr : LazyGenerationalUpdatePtr\u003c\u003c#typename Owner#\u003e, \u003c#typename T#\u003e, \u003c#void (ExternalASTSource::*Update)(Owner)#\u003e\u003e","COMPLETION: LazyOffsetPtr : LazyOffsetPtr\u003c\u003c#typename T#\u003e, \u003c#typename OffsT#\u003e, \u003c#T *(ExternalASTSource::*Get)(OffsT)#\u003e\u003e","COMPLETION: LazyVector : LazyVector\u003c\u003c#typename T#\u003e, \u003c#typename Source#\u003e, \u003c#void (Source::*Loader)(SmallVectorImpl\u003cT\u003e \u0026)#\u003e{#, \u003c#unsigned int LoadedStorage#\u003e{#, \u003c#unsigned int LocalStorage#\u003e#}#}\u003e","COMPLETION: LCD_ByCopy : [#clang::LambdaCaptureDefault#]LCD_ByCopy","COMPLETION: LCD_ByRef : [#clang::LambdaCaptureDefault#]LCD_ByRef","COMPLETION: LCD_None : [#clang::LambdaCaptureDefault#]LCD_None","COMPLETION: LCK_ByCopy : [#clang::LambdaCaptureKind#]LCK_ByCopy","COMPLETION: LCK_ByRef : [#clang::LambdaCaptureKind#]LCK_ByRef","COMPLETION: LCK_StarThis : [#clang::LambdaCaptureKind#]LCK_StarThis","COMPLETION: LCK_This : [#clang::LambdaCaptureKind#]LCK_This","COMPLETION: LCK_VLAType : [#clang::LambdaCaptureKind#]LCK_VLAType","COMPLETION: Le64 : Le64","COMPLETION: Lexer : Lexer","COMPLETION: LexicallyOrderedRecursiveASTVisitor : LexicallyOrderedRecursiveASTVisitor\u003c\u003c#typename Derived#\u003e\u003e","COMPLETION: LineEntry : LineEntry","COMPLETION: LineTableInfo : LineTableInfo","COMPLETION: Linkage : Linkage","COMPLETION: LinkageInfo : LinkageInfo","COMPLETION: LinkageSpecDecl : LinkageSpecDecl","COMPLETION: LiveVariables : LiveVariables","COMPLETION: LocalInstantiationScope : LocalInstantiationScope","COMPLETION: LocationCheck : LocationCheck","COMPLETION: LocationContext : LocationContext","COMPLETION: LocationContextManager : LocationContextManager","COMPLETION: LocInfoType : LocInfoType","COMPLETION: LockReturnedAttr : LockReturnedAttr","COMPLETION: LocksExcludedAttr : LocksExcludedAttr","COMPLETION: LogDiagnosticPrinter : LogDiagnosticPrinter","COMPLETION: LookupResult : LookupResult","COMPLETION: LoopExit : LoopExit","COMPLETION: LoopHint : LoopHint","COMPLETION: LoopHintAttr : LoopHintAttr","COMPLETION: LTOVisibilityPublicAttr : LTOVisibilityPublicAttr","COMPLETION: LValueReferenceType : LValueReferenceType","COMPLETION: LValueReferenceTypeLoc : LValueReferenceTypeLoc","COMPLETION: MacroArgs : MacroArgs","COMPLETION: MacroBuilder : MacroBuilder","COMPLETION: MacroDefinition : MacroDefinition","COMPLETION: MacroDefinitionRecord : MacroDefinitionRecord","COMPLETION: MacroDirective : MacroDirective","COMPLETION: MacroExpansion : MacroExpansion","COMPLETION: MacroInfo : MacroInfo","COMPLETION: MacroUse : MacroUse","COMPLETION: make_const_ptr : make_const_ptr\u003c\u003c#typename T#\u003e\u003e","COMPLETION: make_error_code : [#std::error_code#]make_error_code(\u003c#BuildPreambleError Error#\u003e)","COMPLETION: make_ptr : make_ptr\u003c\u003c#typename T#\u003e\u003e","COMPLETION: MakeDeductionFailureInfo : [#DeductionFailureInfo#]MakeDeductionFailureInfo(\u003c#ASTContext \u0026Context#\u003e, \u003c#Sema::TemplateDeductionResult TDK#\u003e, \u003c#sema::TemplateDeductionInfo \u0026Info#\u003e)","COMPLETION: ManagedAnalysis : ManagedAnalysis","COMPLETION: MangleContext : MangleContext","COMPLETION: MangleNumberingContext : MangleNumberingContext","COMPLETION: markup : markup","COMPLETION: MarkVarDeclODRUsed : [#void#]MarkVarDeclODRUsed(\u003c#VarDecl *Var#\u003e, \u003c#SourceLocation Loc#\u003e, \u003c#Sema \u0026SemaRef#\u003e, \u003c#const unsigned int *const FunctionScopeIndexToStopAt#\u003e)","COMPLETION: MatchingVariablePatternConstraint : MatchingVariablePatternConstraint","COMPLETION: MaterializeTemporaryExpr : MaterializeTemporaryExpr","COMPLETION: MaxFieldAlignmentAttr : MaxFieldAlignmentAttr","COMPLETION: MaxVersionForCudaArch : [#CudaVersion#]MaxVersionForCudaArch(\u003c#CudaArch A#\u003e)","COMPLETION: MayAliasAttr : MayAliasAttr","COMPLETION: MemberExpr : MemberExpr","COMPLETION: MemberExprNameQualifier : MemberExprNameQualifier","COMPLETION: MemberPointerLocInfo : MemberPointerLocInfo","COMPLETION: MemberPointerType : MemberPointerType","COMPLETION: MemberPointerTypeLoc : MemberPointerTypeLoc","COMPLETION: MemberSpecializationInfo : MemberSpecializationInfo","COMPLETION: MemInitResult : MemInitResult","COMPLETION: MemorizeStatCalls : MemorizeStatCalls","COMPLETION: MemoryBufferCache : MemoryBufferCache","COMPLETION: Mergeable : Mergeable\u003c\u003c#typename decl_type#\u003e\u003e","COMPLETION: mergeCanThrow : [#CanThrowResult#]mergeCanThrow(\u003c#CanThrowResult CT1#\u003e, \u003c#CanThrowResult CT2#\u003e)","COMPLETION: MicroMipsAttr : MicroMipsAttr","COMPLETION: MicrosoftMangleContext : MicrosoftMangleContext","COMPLETION: MicrosoftVTableContext : MicrosoftVTableContext","COMPLETION: MigratorOptions : MigratorOptions","COMPLETION: MinComplexityConstraint : MinComplexityConstraint","COMPLETION: MinGroupSizeConstraint : MinGroupSizeConstraint","COMPLETION: minLinkage : [#Linkage#]minLinkage(\u003c#Linkage L1#\u003e, \u003c#Linkage L2#\u003e)","COMPLETION: MinSizeAttr : MinSizeAttr","COMPLETION: MinVersionForCudaArch : [#CudaVersion#]MinVersionForCudaArch(\u003c#CudaArch A#\u003e)","COMPLETION: minVisibility : [#Visibility#]minVisibility(\u003c#Visibility L#\u003e, \u003c#Visibility R#\u003e)","COMPLETION: Mips : Mips","COMPLETION: Mips16Attr : Mips16Attr","COMPLETION: MipsInterruptAttr : MipsInterruptAttr","COMPLETION: MipsLongCallAttr : MipsLongCallAttr","COMPLETION: MipsShortCallAttr : MipsShortCallAttr","COMPLETION: ModeAttr : ModeAttr","COMPLETION: Module : Module","COMPLETION: ModuleBuildStack : ModuleBuildStack","COMPLETION: ModuleDependencyCollector : ModuleDependencyCollector","COMPLETION: ModuleFile : ModuleFile","COMPLETION: ModuleFileExtension : ModuleFileExtension","COMPLETION: ModuleFileExtensionMetadata : ModuleFileExtensionMetadata","COMPLETION: ModuleFileExtensionReader : ModuleFileExtensionReader","COMPLETION: ModuleFileExtensionWriter : ModuleFileExtensionWriter","COMPLETION: ModuleId : ModuleId","COMPLETION: ModuleIdPath : ModuleIdPath","COMPLETION: ModuleInternalLinkage : [#clang::Linkage#]ModuleInternalLinkage","COMPLETION: ModuleLinkage : [#clang::Linkage#]ModuleLinkage","COMPLETION: ModuleLoader : ModuleLoader","COMPLETION: ModuleLoadResult : ModuleLoadResult","COMPLETION: ModuleMacro : ModuleMacro","COMPLETION: ModuleMap : ModuleMap","COMPLETION: ModuleMapCallbacks : ModuleMapCallbacks","COMPLETION: MS_LANG : [#clang::LanguageID#]MS_LANG","COMPLETION: MSABIAttr : MSABIAttr","COMPLETION: MSAsmStmt : MSAsmStmt","COMPLETION: MSDependentExistsStmt : MSDependentExistsStmt","COMPLETION: MSInheritanceAttr : MSInheritanceAttr","COMPLETION: MSNoVTableAttr : MSNoVTableAttr","COMPLETION: MSP430InterruptAttr : MSP430InterruptAttr","COMPLETION: MSPropertyDecl : MSPropertyDecl","COMPLETION: MSPropertyRefExpr : MSPropertyRefExpr","COMPLETION: MSPropertySubscriptExpr : MSPropertySubscriptExpr","COMPLETION: MSStructAttr : MSStructAttr","COMPLETION: MSVtorDispAttr : MSVtorDispAttr","COMPLETION: MU_Define : [#clang::MacroUse#]MU_Define","COMPLETION: MU_Other : [#clang::MacroUse#]MU_Other","COMPLETION: MU_Undef : [#clang::MacroUse#]MU_Undef","COMPLETION: MultiExprArg : MultiExprArg","COMPLETION: MultiKeywordSelector : MultiKeywordSelector","COMPLETION: MultiLevelTemplateArgumentList : MultiLevelTemplateArgumentList","COMPLETION: MultipleIncludeOpt : MultipleIncludeOpt","COMPLETION: MultiplexASTDeserializationListener : MultiplexASTDeserializationListener","COMPLETION: MultiplexASTMutationListener : MultiplexASTMutationListener","COMPLETION: MultiplexConsumer : MultiplexConsumer","COMPLETION: MultiplexExternalSemaSource : MultiplexExternalSemaSource","COMPLETION: MultiStmtArg : MultiStmtArg","COMPLETION: MultiTemplateParamsArg : MultiTemplateParamsArg","COMPLETION: MultiTypeArg : MultiTypeArg","COMPLETION: MutableArrayRef : MutableArrayRef\u003c\u003c#typename T#\u003e\u003e","COMPLETION: NakedAttr : NakedAttr","COMPLETION: NamedDecl : NamedDecl","COMPLETION: NamespaceAliasDecl : NamespaceAliasDecl","COMPLETION: NamespaceDecl : NamespaceDecl","COMPLETION: NarrowingKind : NarrowingKind","COMPLETION: NEON : NEON","COMPLETION: NeonTypeFlags : NeonTypeFlags","COMPLETION: NestedNameSpecifier : NestedNameSpecifier","COMPLETION: NestedNameSpecifierLoc : NestedNameSpecifierLoc","COMPLETION: NestedNameSpecifierLocBuilder : NestedNameSpecifierLocBuilder","COMPLETION: Nios2 : Nios2","COMPLETION: NK_Constant_Narrowing : [#clang::NarrowingKind#]NK_Constant_Narrowing","COMPLETION: NK_Dependent_Narrowing : [#clang::NarrowingKind#]NK_Dependent_Narrowing","COMPLETION: NK_Not_Narrowing : [#clang::NarrowingKind#]NK_Not_Narrowing","COMPLETION: NK_Type_Narrowing : [#clang::NarrowingKind#]NK_Type_Narrowing","COMPLETION: NK_Variable_Narrowing : [#clang::NarrowingKind#]NK_Variable_Narrowing","COMPLETION: NoAliasAttr : NoAliasAttr","COMPLETION: NoCommonAttr : NoCommonAttr","COMPLETION: NoDebugAttr : NoDebugAttr","COMPLETION: NoDuplicateAttr : NoDuplicateAttr","COMPLETION: NoEscapeAttr : NoEscapeAttr","COMPLETION: NoInitExpr : NoInitExpr","COMPLETION: NoInlineAttr : NoInlineAttr","COMPLETION: NoInstrumentFunctionAttr : NoInstrumentFunctionAttr","COMPLETION: NoLanguageLinkage : [#clang::LanguageLinkage#]NoLanguageLinkage","COMPLETION: NoLinkage : [#clang::Linkage#]NoLinkage","COMPLETION: NoMicroMipsAttr : NoMicroMipsAttr","COMPLETION: NoMips16Attr : NoMips16Attr","COMPLETION: None : [#const NoneType#]None","COMPLETION: NonNullAttr : NonNullAttr","COMPLETION: NonTypeTemplateParmDecl : NonTypeTemplateParmDecl","COMPLETION: NoRedundancy : [#clang::AnalysisInliningMode#]NoRedundancy","COMPLETION: NoReturnAttr : NoReturnAttr","COMPLETION: NoSanitizeAttr : NoSanitizeAttr","COMPLETION: NoSplitStackAttr : NoSplitStackAttr","COMPLETION: NoThreadSafetyAnalysisAttr : NoThreadSafetyAnalysisAttr","COMPLETION: NoThrowAttr : NoThrowAttr","COMPLETION: NotTailCalledAttr : NotTailCalledAttr","COMPLETION: NoTypoCorrectionCCC : NoTypoCorrectionCCC","COMPLETION: NSAPI : NSAPI","COMPLETION: NSConsumedAttr : NSConsumedAttr","COMPLETION: NSConsumesSelfAttr : NSConsumesSelfAttr","COMPLETION: NSReturnsAutoreleasedAttr : NSReturnsAutoreleasedAttr","COMPLETION: NSReturnsNotRetainedAttr : NSReturnsNotRetainedAttr","COMPLETION: NSReturnsRetainedAttr : NSReturnsRetainedAttr","COMPLETION: NullabilityKind : NullabilityKind","COMPLETION: NullStmt : NullStmt","COMPLETION: NUM_ANALYSIS_DIAG_CLIENTS : [#clang::AnalysisDiagClients#]NUM_ANALYSIS_DIAG_CLIENTS","COMPLETION: NUM_OVERLOADED_OPERATORS : [#clang::OverloadedOperatorKind#]NUM_OVERLOADED_OPERATORS","COMPLETION: NumAnalyses : [#clang::Analyses#]NumAnalyses","COMPLETION: NumAvailabilitySlots : [#AvailabilitySlot#]NumAvailabilitySlots","COMPLETION: NumConstraints : [#clang::AnalysisConstraints#]NumConstraints","COMPLETION: NumericLiteralParser : NumericLiteralParser","COMPLETION: NumInliningModes : [#clang::AnalysisInliningMode#]NumInliningModes","COMPLETION: NumPurgeModes : [#clang::AnalysisPurgeMode#]NumPurgeModes","COMPLETION: NumStores : [#clang::AnalysisStores#]NumStores","COMPLETION: NVPTX : NVPTX","COMPLETION: OBC_Bridge : [#clang::ObjCBridgeCastKind#]OBC_Bridge","COMPLETION: OBC_BridgeRetained : [#clang::ObjCBridgeCastKind#]OBC_BridgeRetained","COMPLETION: OBC_BridgeTransfer : [#clang::ObjCBridgeCastKind#]OBC_BridgeTransfer","COMPLETION: OBJC_LANG : [#clang::LanguageID#]OBJC_LANG","COMPLETION: ObjCArrayLiteral : ObjCArrayLiteral","COMPLETION: ObjCAtCatchStmt : ObjCAtCatchStmt","COMPLETION: ObjCAtDefsFieldDecl : ObjCAtDefsFieldDecl","COMPLETION: ObjCAtFinallyStmt : ObjCAtFinallyStmt","COMPLETION: ObjCAtSynchronizedStmt : ObjCAtSynchronizedStmt","COMPLETION: ObjCAtThrowStmt : ObjCAtThrowStmt","COMPLETION: ObjCAtTryStmt : ObjCAtTryStmt","COMPLETION: ObjCAutoreleasePoolStmt : ObjCAutoreleasePoolStmt","COMPLETION: ObjCAvailabilityCheckExpr : ObjCAvailabilityCheckExpr","COMPLETION: ObjCBoolLiteralExpr : ObjCBoolLiteralExpr","COMPLETION: ObjCBoxableAttr : ObjCBoxableAttr","COMPLETION: ObjCBoxedExpr : ObjCBoxedExpr","COMPLETION: ObjCBridgeAttr : ObjCBridgeAttr","COMPLETION: ObjCBridgeCastKind : ObjCBridgeCastKind","COMPLETION: ObjCBridgedCastExpr : ObjCBridgedCastExpr","COMPLETION: ObjCBridgeMutableAttr : ObjCBridgeMutableAttr","COMPLETION: ObjCBridgeRelatedAttr : ObjCBridgeRelatedAttr","COMPLETION: ObjCCategoryDecl : ObjCCategoryDecl","COMPLETION: ObjCCategoryImplDecl : ObjCCategoryImplDecl","COMPLETION: ObjCCompatibleAliasDecl : ObjCCompatibleAliasDecl","COMPLETION: ObjCContainerDecl : ObjCContainerDecl","COMPLETION: ObjCDeclSpec : ObjCDeclSpec","COMPLETION: ObjCDesignatedInitializerAttr : ObjCDesignatedInitializerAttr","COMPLETION: ObjCDictionaryElement : ObjCDictionaryElement","COMPLETION: ObjCDictionaryLiteral : ObjCDictionaryLiteral","COMPLETION: ObjCDictionaryLiteral_ExpansionData : ObjCDictionaryLiteral_ExpansionData","COMPLETION: ObjCDictionaryLiteral_KeyValuePair : ObjCDictionaryLiteral_KeyValuePair","COMPLETION: ObjCEncodeExpr : ObjCEncodeExpr","COMPLETION: ObjCExceptionAttr : ObjCExceptionAttr","COMPLETION: ObjCExplicitProtocolImplAttr : ObjCExplicitProtocolImplAttr","COMPLETION: ObjCForCollectionStmt : ObjCForCollectionStmt","COMPLETION: ObjCImplDecl : ObjCImplDecl","COMPLETION: ObjCImplementationDecl : ObjCImplementationDecl","COMPLETION: ObjCIndependentClassAttr : ObjCIndependentClassAttr","COMPLETION: ObjCIndirectCopyRestoreExpr : ObjCIndirectCopyRestoreExpr","COMPLETION: ObjCInstanceTypeFamily : ObjCInstanceTypeFamily","COMPLETION: ObjCInterfaceDecl : ObjCInterfaceDecl","COMPLETION: ObjCInterfaceLocInfo : ObjCInterfaceLocInfo","COMPLETION: ObjCInterfaceType : ObjCInterfaceType","COMPLETION: ObjCInterfaceTypeLoc : ObjCInterfaceTypeLoc","COMPLETION: ObjCIsaExpr : ObjCIsaExpr","COMPLETION: ObjCIvarDecl : ObjCIvarDecl","COMPLETION: ObjCIvarRefExpr : ObjCIvarRefExpr","COMPLETION: ObjCList : ObjCList\u003c\u003c#typename T#\u003e\u003e","COMPLETION: ObjCListBase : ObjCListBase","COMPLETION: ObjCMessageExpr : ObjCMessageExpr","COMPLETION: ObjCMethodDecl : ObjCMethodDecl","COMPLETION: ObjCMethodFamily : ObjCMethodFamily","COMPLETION: ObjCMethodFamilyAttr : ObjCMethodFamilyAttr","COMPLETION: ObjCMethodFamilyBitWidth : [#clang::(anonymous)#]ObjCMethodFamilyBitWidth","COMPLETION: ObjCMethodList : ObjCMethodList","COMPLETION: ObjCNoReturn : ObjCNoReturn","COMPLETION: ObjCNSObjectAttr : ObjCNSObjectAttr","COMPLETION: ObjCObjectPointerType : ObjCObjectPointerType","COMPLETION: ObjCObjectPointerTypeLoc : ObjCObjectPointerTypeLoc","COMPLETION: ObjCObjectType : ObjCObjectType","COMPLETION: ObjCObjectTypeImpl : ObjCObjectTypeImpl","COMPLETION: ObjCObjectTypeLoc : ObjCObjectTypeLoc","COMPLETION: ObjCObjectTypeLocInfo : ObjCObjectTypeLocInfo","COMPLETION: ObjCPreciseLifetimeAttr : ObjCPreciseLifetimeAttr","COMPLETION: ObjCPropertyDecl : ObjCPropertyDecl","COMPLETION: ObjCPropertyImplDecl : ObjCPropertyImplDecl","COMPLETION: ObjCPropertyQueryKind : ObjCPropertyQueryKind","COMPLETION: ObjCPropertyRefExpr : ObjCPropertyRefExpr","COMPLETION: ObjCProtocolDecl : ObjCProtocolDecl","COMPLETION: ObjCProtocolExpr : ObjCProtocolExpr","COMPLETION: ObjCProtocolList : ObjCProtocolList","COMPLETION: ObjCProtocolQualifiers : ObjCProtocolQualifiers\u003c\u003c#class T#\u003e\u003e","COMPLETION: ObjCRequiresPropertyDefsAttr : ObjCRequiresPropertyDefsAttr","COMPLETION: ObjCRequiresSuperAttr : ObjCRequiresSuperAttr","COMPLETION: ObjCReturnsInnerPointerAttr : ObjCReturnsInnerPointerAttr","COMPLETION: ObjCRootClassAttr : ObjCRootClassAttr","COMPLETION: ObjCRuntime : ObjCRuntime","COMPLETION: ObjCRuntimeNameAttr : ObjCRuntimeNameAttr","COMPLETION: ObjCRuntimeVisibleAttr : ObjCRuntimeVisibleAttr","COMPLETION: ObjCSelectorExpr : ObjCSelectorExpr","COMPLETION: ObjCStringFormatFamily : ObjCStringFormatFamily","COMPLETION: ObjCStringLiteral : ObjCStringLiteral","COMPLETION: ObjCSubclassingRestrictedAttr : ObjCSubclassingRestrictedAttr","COMPLETION: ObjCSubscriptRefExpr : ObjCSubscriptRefExpr","COMPLETION: ObjCSubstitutionContext : ObjCSubstitutionContext","COMPLETION: ObjCTypeParamDecl : ObjCTypeParamDecl","COMPLETION: ObjCTypeParameter : ObjCTypeParameter","COMPLETION: ObjCTypeParamList : ObjCTypeParamList","COMPLETION: ObjCTypeParamType : ObjCTypeParamType","COMPLETION: ObjCTypeParamTypeLoc : ObjCTypeParamTypeLoc","COMPLETION: ObjCTypeParamTypeLocInfo : ObjCTypeParamTypeLocInfo","COMPLETION: ObjCTypeParamVariance : ObjCTypeParamVariance","COMPLETION: ObjCXXARCStandardLibraryKind : ObjCXXARCStandardLibraryKind","COMPLETION: ObjectFilePCHContainerReader : ObjectFilePCHContainerReader","COMPLETION: ObjectFilePCHContainerWriter : ObjectFilePCHContainerWriter","COMPLETION: ObsoletedSlot : [#AvailabilitySlot#]ObsoletedSlot","COMPLETION: OCD_AllCandidates : [#clang::OverloadCandidateDisplayKind#]OCD_AllCandidates","COMPLETION: OCD_ViableCandidates : [#clang::OverloadCandidateDisplayKind#]OCD_ViableCandidates","COMPLETION: OCLC1X_LANG : [#clang::LanguageID#]OCLC1X_LANG","COMPLETION: OCLC20_LANG : [#clang::LanguageID#]OCLC20_LANG","COMPLETION: ODRHash : ODRHash","COMPLETION: OffsetOfExpr : OffsetOfExpr","COMPLETION: OffsetOfNode : OffsetOfNode","COMPLETION: OFIK_Dereference : [#clang::OverloadFixItKind#]OFIK_Dereference","COMPLETION: OFIK_RemoveDereference : [#clang::OverloadFixItKind#]OFIK_RemoveDereference","COMPLETION: OFIK_RemoveTakeAddress : [#clang::OverloadFixItKind#]OFIK_RemoveTakeAddress","COMPLETION: OFIK_TakeAddress : [#clang::OverloadFixItKind#]OFIK_TakeAddress","COMPLETION: OFIK_Undefined : [#clang::OverloadFixItKind#]OFIK_Undefined","COMPLETION: OIT_Array : [#clang::ObjCInstanceTypeFamily#]OIT_Array","COMPLETION: OIT_Dictionary : [#clang::ObjCInstanceTypeFamily#]OIT_Dictionary","COMPLETION: OIT_Init : [#clang::ObjCInstanceTypeFamily#]OIT_Init","COMPLETION: OIT_None : [#clang::ObjCInstanceTypeFamily#]OIT_None","COMPLETION: OIT_ReturnsSelf : [#clang::ObjCInstanceTypeFamily#]OIT_ReturnsSelf","COMPLETION: OIT_Singleton : [#clang::ObjCInstanceTypeFamily#]OIT_Singleton","COMPLETION: OK_BitField : [#clang::ExprObjectKind#]OK_BitField","COMPLETION: OK_ObjCProperty : [#clang::ExprObjectKind#]OK_ObjCProperty","COMPLETION: OK_ObjCSubscript : [#clang::ExprObjectKind#]OK_ObjCSubscript","COMPLETION: OK_Ordinary : [#clang::ExprObjectKind#]OK_Ordinary","COMPLETION: OK_VectorComponent : [#clang::ExprObjectKind#]OK_VectorComponent","COMPLETION: OMF_alloc : [#clang::ObjCMethodFamily#]OMF_alloc","COMPLETION: OMF_autorelease : [#clang::ObjCMethodFamily#]OMF_autorelease","COMPLETION: OMF_copy : [#clang::ObjCMethodFamily#]OMF_copy","COMPLETION: OMF_dealloc : [#clang::ObjCMethodFamily#]OMF_dealloc","COMPLETION: OMF_finalize : [#clang::ObjCMethodFamily#]OMF_finalize","COMPLETION: OMF_init : [#clang::ObjCMethodFamily#]OMF_init","COMPLETION: OMF_initialize : [#clang::ObjCMethodFamily#]OMF_initialize","COMPLETION: OMF_mutableCopy : [#clang::ObjCMethodFamily#]OMF_mutableCopy","COMPLETION: OMF_new : [#clang::ObjCMethodFamily#]OMF_new","COMPLETION: OMF_None : [#clang::ObjCMethodFamily#]OMF_None","COMPLETION: OMF_performSelector : [#clang::ObjCMethodFamily#]OMF_performSelector","COMPLETION: OMF_release : [#clang::ObjCMethodFamily#]OMF_release","COMPLETION: OMF_retain : [#clang::ObjCMethodFamily#]OMF_retain","COMPLETION: OMF_retainCount : [#clang::ObjCMethodFamily#]OMF_retainCount","COMPLETION: OMF_self : [#clang::ObjCMethodFamily#]OMF_self","COMPLETION: OMP_LANG : [#clang::LanguageID#]OMP_LANG","COMPLETION: OMPAlignedClause : OMPAlignedClause","COMPLETION: OMPArraySectionExpr : OMPArraySectionExpr","COMPLETION: OMPAtomicDirective : OMPAtomicDirective","COMPLETION: OMPBarrierDirective : OMPBarrierDirective","COMPLETION: OMPC_aligned : [#clang::OpenMPClauseKind#]OMPC_aligned","COMPLETION: OMPC_capture : [#clang::OpenMPClauseKind#]OMPC_capture","COMPLETION: OMPC_collapse : [#clang::OpenMPClauseKind#]OMPC_collapse","COMPLETION: OMPC_copyin : [#clang::OpenMPClauseKind#]OMPC_copyin","COMPLETION: OMPC_copyprivate : [#clang::OpenMPClauseKind#]OMPC_copyprivate","COMPLETION: OMPC_default : [#clang::OpenMPClauseKind#]OMPC_default","COMPLETION: OMPC_DEFAULT_none : [#clang::OpenMPDefaultClauseKind#]OMPC_DEFAULT_none","COMPLETION: OMPC_DEFAULT_shared : [#clang::OpenMPDefaultClauseKind#]OMPC_DEFAULT_shared","COMPLETION: OMPC_DEFAULT_unknown : [#clang::OpenMPDefaultClauseKind#]OMPC_DEFAULT_unknown","COMPLETION: OMPC_defaultmap : [#clang::OpenMPClauseKind#]OMPC_defaultmap","COMPLETION: OMPC_DEFAULTMAP_MODIFIER_last : [#clang::OpenMPDefaultmapClauseModifier#]OMPC_DEFAULTMAP_MODIFIER_last","COMPLETION: OMPC_DEFAULTMAP_MODIFIER_tofrom : [#clang::OpenMPDefaultmapClauseModifier#]OMPC_DEFAULTMAP_MODIFIER_tofrom","COMPLETION: OMPC_DEFAULTMAP_MODIFIER_unknown : [#clang::OpenMPDefaultmapClauseModifier#]OMPC_DEFAULTMAP_MODIFIER_unknown","COMPLETION: OMPC_DEFAULTMAP_scalar : [#clang::OpenMPDefaultmapClauseKind#]OMPC_DEFAULTMAP_scalar","COMPLETION: OMPC_DEFAULTMAP_unknown : [#clang::OpenMPDefaultmapClauseKind#]OMPC_DEFAULTMAP_unknown","COMPLETION: OMPC_depend : [#clang::OpenMPClauseKind#]OMPC_depend","COMPLETION: OMPC_DEPEND_in : [#clang::OpenMPDependClauseKind#]OMPC_DEPEND_in","COMPLETION: OMPC_DEPEND_inout : [#clang::OpenMPDependClauseKind#]OMPC_DEPEND_inout","COMPLETION: OMPC_DEPEND_out : [#clang::OpenMPDependClauseKind#]OMPC_DEPEND_out","COMPLETION: OMPC_DEPEND_sink : [#clang::OpenMPDependClauseKind#]OMPC_DEPEND_sink","COMPLETION: OMPC_DEPEND_source : [#clang::OpenMPDependClauseKind#]OMPC_DEPEND_source","COMPLETION: OMPC_DEPEND_unknown : [#clang::OpenMPDependClauseKind#]OMPC_DEPEND_unknown","COMPLETION: OMPC_device : [#clang::OpenMPClauseKind#]OMPC_device","COMPLETION: OMPC_dist_schedule : [#clang::OpenMPClauseKind#]OMPC_dist_schedule","COMPLETION: OMPC_DIST_SCHEDULE_static : [#clang::OpenMPDistScheduleClauseKind#]OMPC_DIST_SCHEDULE_static","COMPLETION: OMPC_DIST_SCHEDULE_unknown : [#clang::OpenMPDistScheduleClauseKind#]OMPC_DIST_SCHEDULE_unknown","COMPLETION: OMPC_final : [#clang::OpenMPClauseKind#]OMPC_final","COMPLETION: OMPC_firstprivate : [#clang::OpenMPClauseKind#]OMPC_firstprivate","COMPLETION: OMPC_flush : [#clang::OpenMPClauseKind#]OMPC_flush","COMPLETION: OMPC_from : [#clang::OpenMPClauseKind#]OMPC_from","COMPLETION: OMPC_grainsize : [#clang::OpenMPClauseKind#]OMPC_grainsize","COMPLETION: OMPC_hint : [#clang::OpenMPClauseKind#]OMPC_hint","COMPLETION: OMPC_if : [#clang::OpenMPClauseKind#]OMPC_if","COMPLETION: OMPC_in_reduction : [#clang::OpenMPClauseKind#]OMPC_in_reduction","COMPLETION: OMPC_is_device_ptr : [#clang::OpenMPClauseKind#]OMPC_is_device_ptr","COMPLETION: OMPC_lastprivate : [#clang::OpenMPClauseKind#]OMPC_lastprivate","COMPLETION: OMPC_linear : [#clang::OpenMPClauseKind#]OMPC_linear","COMPLETION: OMPC_LINEAR_ref : [#clang::OpenMPLinearClauseKind#]OMPC_LINEAR_ref","COMPLETION: OMPC_LINEAR_unknown : [#clang::OpenMPLinearClauseKind#]OMPC_LINEAR_unknown","COMPLETION: OMPC_LINEAR_uval : [#clang::OpenMPLinearClauseKind#]OMPC_LINEAR_uval","COMPLETION: OMPC_LINEAR_val : [#clang::OpenMPLinearClauseKind#]OMPC_LINEAR_val","COMPLETION: OMPC_map : [#clang::OpenMPClauseKind#]OMPC_map","COMPLETION: OMPC_MAP_alloc : [#clang::OpenMPMapClauseKind#]OMPC_MAP_alloc","COMPLETION: OMPC_MAP_always : [#clang::OpenMPMapClauseKind#]OMPC_MAP_always","COMPLETION: OMPC_MAP_delete : [#clang::OpenMPMapClauseKind#]OMPC_MAP_delete","COMPLETION: OMPC_MAP_from : [#clang::OpenMPMapClauseKind#]OMPC_MAP_from","COMPLETION: OMPC_MAP_release : [#clang::OpenMPMapClauseKind#]OMPC_MAP_release","COMPLETION: OMPC_MAP_to : [#clang::OpenMPMapClauseKind#]OMPC_MAP_to","COMPLETION: OMPC_MAP_tofrom : [#clang::OpenMPMapClauseKind#]OMPC_MAP_tofrom","COMPLETION: OMPC_MAP_unknown : [#clang::OpenMPMapClauseKind#]OMPC_MAP_unknown","COMPLETION: OMPC_mergeable : [#clang::OpenMPClauseKind#]OMPC_mergeable","COMPLETION: OMPC_nogroup : [#clang::OpenMPClauseKind#]OMPC_nogroup","COMPLETION: OMPC_nowait : [#clang::OpenMPClauseKind#]OMPC_nowait","COMPLETION: OMPC_num_tasks : [#clang::OpenMPClauseKind#]OMPC_num_tasks","COMPLETION: OMPC_num_teams : [#clang::OpenMPClauseKind#]OMPC_num_teams","COMPLETION: OMPC_num_threads : [#clang::OpenMPClauseKind#]OMPC_num_threads","COMPLETION: OMPC_ordered : [#clang::OpenMPClauseKind#]OMPC_ordered","COMPLETION: OMPC_priority : [#clang::OpenMPClauseKind#]OMPC_priority","COMPLETION: OMPC_private : [#clang::OpenMPClauseKind#]OMPC_private","COMPLETION: OMPC_proc_bind : [#clang::OpenMPClauseKind#]OMPC_proc_bind","COMPLETION: OMPC_PROC_BIND_close : [#clang::OpenMPProcBindClauseKind#]OMPC_PROC_BIND_close","COMPLETION: OMPC_PROC_BIND_master : [#clang::OpenMPProcBindClauseKind#]OMPC_PROC_BIND_master","COMPLETION: OMPC_PROC_BIND_spread : [#clang::OpenMPProcBindClauseKind#]OMPC_PROC_BIND_spread","COMPLETION: OMPC_PROC_BIND_unknown : [#clang::OpenMPProcBindClauseKind#]OMPC_PROC_BIND_unknown","COMPLETION: OMPC_read : [#clang::OpenMPClauseKind#]OMPC_read","COMPLETION: OMPC_reduction : [#clang::OpenMPClauseKind#]OMPC_reduction","COMPLETION: OMPC_safelen : [#clang::OpenMPClauseKind#]OMPC_safelen","COMPLETION: OMPC_schedule : [#clang::OpenMPClauseKind#]OMPC_schedule","COMPLETION: OMPC_SCHEDULE_auto : [#clang::OpenMPScheduleClauseKind#]OMPC_SCHEDULE_auto","COMPLETION: OMPC_SCHEDULE_dynamic : [#clang::OpenMPScheduleClauseKind#]OMPC_SCHEDULE_dynamic","COMPLETION: OMPC_SCHEDULE_guided : [#clang::OpenMPScheduleClauseKind#]OMPC_SCHEDULE_guided","COMPLETION: OMPC_SCHEDULE_MODIFIER_last : [#clang::OpenMPScheduleClauseModifier#]OMPC_SCHEDULE_MODIFIER_last","COMPLETION: OMPC_SCHEDULE_MODIFIER_monotonic : [#clang::OpenMPScheduleClauseModifier#]OMPC_SCHEDULE_MODIFIER_monotonic","COMPLETION: OMPC_SCHEDULE_MODIFIER_nonmonotonic : [#clang::OpenMPScheduleClauseModifier#]OMPC_SCHEDULE_MODIFIER_nonmonotonic","COMPLETION: OMPC_SCHEDULE_MODIFIER_simd : [#clang::OpenMPScheduleClauseModifier#]OMPC_SCHEDULE_MODIFIER_simd","COMPLETION: OMPC_SCHEDULE_MODIFIER_unknown : [#clang::OpenMPScheduleClauseModifier#]OMPC_SCHEDULE_MODIFIER_unknown","COMPLETION: OMPC_SCHEDULE_runtime : [#clang::OpenMPScheduleClauseKind#]OMPC_SCHEDULE_runtime","COMPLETION: OMPC_SCHEDULE_static : [#clang::OpenMPScheduleClauseKind#]OMPC_SCHEDULE_static","COMPLETION: OMPC_SCHEDULE_unknown : [#clang::OpenMPScheduleClauseKind#]OMPC_SCHEDULE_unknown","COMPLETION: OMPC_seq_cst : [#clang::OpenMPClauseKind#]OMPC_seq_cst","COMPLETION: OMPC_shared : [#clang::OpenMPClauseKind#]OMPC_shared","COMPLETION: OMPC_simd : [#clang::OpenMPClauseKind#]OMPC_simd","COMPLETION: OMPC_simdlen : [#clang::OpenMPClauseKind#]OMPC_simdlen","COMPLETION: OMPC_task_reduction : [#clang::OpenMPClauseKind#]OMPC_task_reduction","COMPLETION: OMPC_thread_limit : [#clang::OpenMPClauseKind#]OMPC_thread_limit","COMPLETION: OMPC_threadprivate : [#clang::OpenMPClauseKind#]OMPC_threadprivate","COMPLETION: OMPC_threads : [#clang::OpenMPClauseKind#]OMPC_threads","COMPLETION: OMPC_to : [#clang::OpenMPClauseKind#]OMPC_to","COMPLETION: OMPC_uniform : [#clang::OpenMPClauseKind#]OMPC_uniform","COMPLETION: OMPC_unknown : [#clang::OpenMPClauseKind#]OMPC_unknown","COMPLETION: OMPC_untied : [#clang::OpenMPClauseKind#]OMPC_untied","COMPLETION: OMPC_update : [#clang::OpenMPClauseKind#]OMPC_update","COMPLETION: OMPC_use_device_ptr : [#clang::OpenMPClauseKind#]OMPC_use_device_ptr","COMPLETION: OMPC_write : [#clang::OpenMPClauseKind#]OMPC_write","COMPLETION: OMPCancelDirective : OMPCancelDirective","COMPLETION: OMPCancellationPointDirective : OMPCancellationPointDirective","COMPLETION: OMPCaptureClause : OMPCaptureClause","COMPLETION: OMPCapturedExprDecl : OMPCapturedExprDecl","COMPLETION: OMPCaptureKindAttr : OMPCaptureKindAttr","COMPLETION: OMPCaptureNoInitAttr : OMPCaptureNoInitAttr","COMPLETION: OMPClause : OMPClause","COMPLETION: OMPClauseMappableExprCommon : OMPClauseMappableExprCommon","COMPLETION: OMPClauseVisitor : OMPClauseVisitor\u003c\u003c#class ImplClass#\u003e{#, \u003c#typename RetTy#\u003e#}\u003e","COMPLETION: OMPClauseVisitorBase : OMPClauseVisitorBase\u003c\u003c#class ImplClass#\u003e, \u003c#template\u003c...\u003e class Ptr#\u003e, \u003c#typename RetTy#\u003e\u003e","COMPLETION: OMPClauseWithPostUpdate : OMPClauseWithPostUpdate","COMPLETION: OMPClauseWithPreInit : OMPClauseWithPreInit","COMPLETION: OMPCollapseClause : OMPCollapseClause","COMPLETION: OMPCopyinClause : OMPCopyinClause","COMPLETION: OMPCopyprivateClause : OMPCopyprivateClause","COMPLETION: OMPCriticalDirective : OMPCriticalDirective","COMPLETION: OMPD_atomic : [#clang::OpenMPDirectiveKind#]OMPD_atomic","COMPLETION: OMPD_barrier : [#clang::OpenMPDirectiveKind#]OMPD_barrier","COMPLETION: OMPD_cancel : [#clang::OpenMPDirectiveKind#]OMPD_cancel","COMPLETION: OMPD_cancellation_point : [#clang::OpenMPDirectiveKind#]OMPD_cancellation_point","COMPLETION: OMPD_critical : [#clang::OpenMPDirectiveKind#]OMPD_critical","COMPLETION: OMPD_declare_reduction : [#clang::OpenMPDirectiveKind#]OMPD_declare_reduction","COMPLETION: OMPD_declare_simd : [#clang::OpenMPDirectiveKind#]OMPD_declare_simd","COMPLETION: OMPD_declare_target : [#clang::OpenMPDirectiveKind#]OMPD_declare_target","COMPLETION: OMPD_distribute : [#clang::OpenMPDirectiveKind#]OMPD_distribute","COMPLETION: OMPD_distribute_parallel_for : [#clang::OpenMPDirectiveKind#]OMPD_distribute_parallel_for","COMPLETION: OMPD_distribute_parallel_for_simd : [#clang::OpenMPDirectiveKind#]OMPD_distribute_parallel_for_simd","COMPLETION: OMPD_distribute_simd : [#clang::OpenMPDirectiveKind#]OMPD_distribute_simd","COMPLETION: OMPD_end_declare_target : [#clang::OpenMPDirectiveKind#]OMPD_end_declare_target","COMPLETION: OMPD_flush : [#clang::OpenMPDirectiveKind#]OMPD_flush","COMPLETION: OMPD_for : [#clang::OpenMPDirectiveKind#]OMPD_for","COMPLETION: OMPD_for_simd : [#clang::OpenMPDirectiveKind#]OMPD_for_simd","COMPLETION: OMPD_master : [#clang::OpenMPDirectiveKind#]OMPD_master","COMPLETION: OMPD_ordered : [#clang::OpenMPDirectiveKind#]OMPD_ordered","COMPLETION: OMPD_parallel : [#clang::OpenMPDirectiveKind#]OMPD_parallel","COMPLETION: OMPD_parallel_for : [#clang::OpenMPDirectiveKind#]OMPD_parallel_for","COMPLETION: OMPD_parallel_for_simd : [#clang::OpenMPDirectiveKind#]OMPD_parallel_for_simd","COMPLETION: OMPD_parallel_sections : [#clang::OpenMPDirectiveKind#]OMPD_parallel_sections","COMPLETION: OMPD_section : [#clang::OpenMPDirectiveKind#]OMPD_section","COMPLETION: OMPD_sections : [#clang::OpenMPDirectiveKind#]OMPD_sections","COMPLETION: OMPD_simd : [#clang::OpenMPDirectiveKind#]OMPD_simd","COMPLETION: OMPD_single : [#clang::OpenMPDirectiveKind#]OMPD_single","COMPLETION: OMPD_target : [#clang::OpenMPDirectiveKind#]OMPD_target","COMPLETION: OMPD_target_data : [#clang::OpenMPDirectiveKind#]OMPD_target_data","COMPLETION: OMPD_target_enter_data : [#clang::OpenMPDirectiveKind#]OMPD_target_enter_data","COMPLETION: OMPD_target_exit_data : [#clang::OpenMPDirectiveKind#]OMPD_target_exit_data","COMPLETION: OMPD_target_parallel : [#clang::OpenMPDirectiveKind#]OMPD_target_parallel","COMPLETION: OMPD_target_parallel_for : [#clang::OpenMPDirectiveKind#]OMPD_target_parallel_for","COMPLETION: OMPD_target_parallel_for_simd : [#clang::OpenMPDirectiveKind#]OMPD_target_parallel_for_simd","COMPLETION: OMPD_target_simd : [#clang::OpenMPDirectiveKind#]OMPD_target_simd","COMPLETION: OMPD_target_teams : [#clang::OpenMPDirectiveKind#]OMPD_target_teams","COMPLETION: OMPD_target_teams_distribute : [#clang::OpenMPDirectiveKind#]OMPD_target_teams_distribute","COMPLETION: OMPD_target_teams_distribute_parallel_for : [#clang::OpenMPDirectiveKind#]OMPD_target_teams_distribute_parallel_for","COMPLETION: OMPD_target_teams_distribute_parallel_for_simd : [#clang::OpenMPDirectiveKind#]OMPD_target_teams_distribute_parallel_for_simd","COMPLETION: OMPD_target_teams_distribute_simd : [#clang::OpenMPDirectiveKind#]OMPD_target_teams_distribute_simd","COMPLETION: OMPD_target_update : [#clang::OpenMPDirectiveKind#]OMPD_target_update","COMPLETION: OMPD_task : [#clang::OpenMPDirectiveKind#]OMPD_task","COMPLETION: OMPD_taskgroup : [#clang::OpenMPDirectiveKind#]OMPD_taskgroup","COMPLETION: OMPD_taskloop : [#clang::OpenMPDirectiveKind#]OMPD_taskloop","COMPLETION: OMPD_taskloop_simd : [#clang::OpenMPDirectiveKind#]OMPD_taskloop_simd","COMPLETION: OMPD_taskwait : [#clang::OpenMPDirectiveKind#]OMPD_taskwait","COMPLETION: OMPD_taskyield : [#clang::OpenMPDirectiveKind#]OMPD_taskyield","COMPLETION: OMPD_teams : [#clang::OpenMPDirectiveKind#]OMPD_teams","COMPLETION: OMPD_teams_distribute : [#clang::OpenMPDirectiveKind#]OMPD_teams_distribute","COMPLETION: OMPD_teams_distribute_parallel_for : [#clang::OpenMPDirectiveKind#]OMPD_teams_distribute_parallel_for","COMPLETION: OMPD_teams_distribute_parallel_for_simd : [#clang::OpenMPDirectiveKind#]OMPD_teams_distribute_parallel_for_simd","COMPLETION: OMPD_teams_distribute_simd : [#clang::OpenMPDirectiveKind#]OMPD_teams_distribute_simd","COMPLETION: OMPD_threadprivate : [#clang::OpenMPDirectiveKind#]OMPD_threadprivate","COMPLETION: OMPD_unknown : [#clang::OpenMPDirectiveKind#]OMPD_unknown","COMPLETION: OMPDeclareReductionDecl : OMPDeclareReductionDecl","COMPLETION: OMPDeclareSimdDecl : OMPDeclareSimdDecl","COMPLETION: OMPDeclareSimdDeclAttr : OMPDeclareSimdDeclAttr","COMPLETION: OMPDeclareTargetDeclAttr : OMPDeclareTargetDeclAttr","COMPLETION: OMPDefaultClause : OMPDefaultClause","COMPLETION: OMPDefaultmapClause : OMPDefaultmapClause","COMPLETION: OMPDependClause : OMPDependClause","COMPLETION: OMPDeviceClause : OMPDeviceClause","COMPLETION: OMPDistributeDirective : OMPDistributeDirective","COMPLETION: OMPDistributeParallelForDirective : OMPDistributeParallelForDirective","COMPLETION: OMPDistributeParallelForSimdDirective : OMPDistributeParallelForSimdDirective","COMPLETION: OMPDistributeSimdDirective : OMPDistributeSimdDirective","COMPLETION: OMPDistScheduleClause : OMPDistScheduleClause","COMPLETION: OMPExecutableDirective : OMPExecutableDirective","COMPLETION: OMPFinalClause : OMPFinalClause","COMPLETION: OMPFirstprivateClause : OMPFirstprivateClause","COMPLETION: OMPFlushClause : OMPFlushClause","COMPLETION: OMPFlushDirective : OMPFlushDirective","COMPLETION: OMPForDirective : OMPForDirective","COMPLETION: OMPForSimdDirective : OMPForSimdDirective","COMPLETION: OMPFromClause : OMPFromClause","COMPLETION: OMPGrainsizeClause : OMPGrainsizeClause","COMPLETION: OMPHintClause : OMPHintClause","COMPLETION: OMPIfClause : OMPIfClause","COMPLETION: OMPInReductionClause : OMPInReductionClause","COMPLETION: OMPIsDevicePtrClause : OMPIsDevicePtrClause","COMPLETION: OMPLastprivateClause : OMPLastprivateClause","COMPLETION: OMPLinearClause : OMPLinearClause","COMPLETION: OMPLoopDirective : OMPLoopDirective","COMPLETION: OMPMapClause : OMPMapClause","COMPLETION: OMPMappableExprListClause : OMPMappableExprListClause\u003c\u003c#class T#\u003e\u003e","COMPLETION: OMPMasterDirective : OMPMasterDirective","COMPLETION: OMPMergeableClause : OMPMergeableClause","COMPLETION: OMPNogroupClause : OMPNogroupClause","COMPLETION: OMPNowaitClause : OMPNowaitClause","COMPLETION: OMPNumTasksClause : OMPNumTasksClause","COMPLETION: OMPNumTeamsClause : OMPNumTeamsClause","COMPLETION: OMPNumThreadsClause : OMPNumThreadsClause","COMPLETION: OMPOrderedClause : OMPOrderedClause","COMPLETION: OMPOrderedDirective : OMPOrderedDirective","COMPLETION: OMPParallelDirective : OMPParallelDirective","COMPLETION: OMPParallelForDirective : OMPParallelForDirective","COMPLETION: OMPParallelForSimdDirective : OMPParallelForSimdDirective","COMPLETION: OMPParallelSectionsDirective : OMPParallelSectionsDirective","COMPLETION: OMPPriorityClause : OMPPriorityClause","COMPLETION: OMPPrivateClause : OMPPrivateClause","COMPLETION: OMPProcBindClause : OMPProcBindClause","COMPLETION: OMPReadClause : OMPReadClause","COMPLETION: OMPReductionClause : OMPReductionClause","COMPLETION: OMPSafelenClause : OMPSafelenClause","COMPLETION: OMPScheduleClause : OMPScheduleClause","COMPLETION: OMPSectionDirective : OMPSectionDirective","COMPLETION: OMPSectionsDirective : OMPSectionsDirective","COMPLETION: OMPSeqCstClause : OMPSeqCstClause","COMPLETION: OMPSharedClause : OMPSharedClause","COMPLETION: OMPSIMDClause : OMPSIMDClause","COMPLETION: OMPSimdDirective : OMPSimdDirective","COMPLETION: OMPSimdlenClause : OMPSimdlenClause","COMPLETION: OMPSingleDirective : OMPSingleDirective","COMPLETION: OMPTargetDataDirective : OMPTargetDataDirective","COMPLETION: OMPTargetDirective : OMPTargetDirective","COMPLETION: OMPTargetEnterDataDirective : OMPTargetEnterDataDirective","COMPLETION: OMPTargetExitDataDirective : OMPTargetExitDataDirective","COMPLETION: OMPTargetParallelDirective : OMPTargetParallelDirective","COMPLETION: OMPTargetParallelForDirective : OMPTargetParallelForDirective","COMPLETION: OMPTargetParallelForSimdDirective : OMPTargetParallelForSimdDirective","COMPLETION: OMPTargetSimdDirective : OMPTargetSimdDirective","COMPLETION: OMPTargetTeamsDirective : OMPTargetTeamsDirective","COMPLETION: OMPTargetTeamsDistributeDirective : OMPTargetTeamsDistributeDirective","COMPLETION: OMPTargetTeamsDistributeParallelForDirective : OMPTargetTeamsDistributeParallelForDirective","COMPLETION: OMPTargetTeamsDistributeParallelForSimdDirective : OMPTargetTeamsDistributeParallelForSimdDirective","COMPLETION: OMPTargetTeamsDistributeSimdDirective : OMPTargetTeamsDistributeSimdDirective","COMPLETION: OMPTargetUpdateDirective : OMPTargetUpdateDirective","COMPLETION: OMPTaskDirective : OMPTaskDirective","COMPLETION: OMPTaskgroupDirective : OMPTaskgroupDirective","COMPLETION: OMPTaskLoopDirective : OMPTaskLoopDirective","COMPLETION: OMPTaskLoopSimdDirective : OMPTaskLoopSimdDirective","COMPLETION: OMPTaskReductionClause : OMPTaskReductionClause","COMPLETION: OMPTaskwaitDirective : OMPTaskwaitDirective","COMPLETION: OMPTaskyieldDirective : OMPTaskyieldDirective","COMPLETION: OMPTeamsDirective : OMPTeamsDirective","COMPLETION: OMPTeamsDistributeDirective : OMPTeamsDistributeDirective","COMPLETION: OMPTeamsDistributeParallelForDirective : OMPTeamsDistributeParallelForDirective","COMPLETION: OMPTeamsDistributeParallelForSimdDirective : OMPTeamsDistributeParallelForSimdDirective","COMPLETION: OMPTeamsDistributeSimdDirective : OMPTeamsDistributeSimdDirective","COMPLETION: OMPThreadLimitClause : OMPThreadLimitClause","COMPLETION: OMPThreadPrivateDecl : OMPThreadPrivateDecl","COMPLETION: OMPThreadPrivateDeclAttr : OMPThreadPrivateDeclAttr","COMPLETION: OMPThreadsClause : OMPThreadsClause","COMPLETION: OMPToClause : OMPToClause","COMPLETION: OMPUntiedClause : OMPUntiedClause","COMPLETION: OMPUpdateClause : OMPUpdateClause","COMPLETION: OMPUseDevicePtrClause : OMPUseDevicePtrClause","COMPLETION: OMPVarListClause : OMPVarListClause\u003c\u003c#class T#\u003e\u003e","COMPLETION: OMPWriteClause : OMPWriteClause","COMPLETION: OnlyLargestCloneConstraint : OnlyLargestCloneConstraint","COMPLETION: OO_Amp : [#clang::OverloadedOperatorKind#]OO_Amp","COMPLETION: OO_AmpAmp : [#clang::OverloadedOperatorKind#]OO_AmpAmp","COMPLETION: OO_AmpEqual : [#clang::OverloadedOperatorKind#]OO_AmpEqual","COMPLETION: OO_Array_Delete : [#clang::OverloadedOperatorKind#]OO_Array_Delete","COMPLETION: OO_Array_New : [#clang::OverloadedOperatorKind#]OO_Array_New","COMPLETION: OO_Arrow : [#clang::OverloadedOperatorKind#]OO_Arrow","COMPLETION: OO_ArrowStar : [#clang::OverloadedOperatorKind#]OO_ArrowStar","COMPLETION: OO_Call : [#clang::OverloadedOperatorKind#]OO_Call","COMPLETION: OO_Caret : [#clang::OverloadedOperatorKind#]OO_Caret","COMPLETION: OO_CaretEqual : [#clang::OverloadedOperatorKind#]OO_CaretEqual","COMPLETION: OO_Coawait : [#clang::OverloadedOperatorKind#]OO_Coawait","COMPLETION: OO_Comma : [#clang::OverloadedOperatorKind#]OO_Comma","COMPLETION: OO_Conditional : [#clang::OverloadedOperatorKind#]OO_Conditional","COMPLETION: OO_Delete : [#clang::OverloadedOperatorKind#]OO_Delete","COMPLETION: OO_Equal : [#clang::OverloadedOperatorKind#]OO_Equal","COMPLETION: OO_EqualEqual : [#clang::OverloadedOperatorKind#]OO_EqualEqual","COMPLETION: OO_Exclaim : [#clang::OverloadedOperatorKind#]OO_Exclaim","COMPLETION: OO_ExclaimEqual : [#clang::OverloadedOperatorKind#]OO_ExclaimEqual","COMPLETION: OO_Greater : [#clang::OverloadedOperatorKind#]OO_Greater","COMPLETION: OO_GreaterEqual : [#clang::OverloadedOperatorKind#]OO_GreaterEqual","COMPLETION: OO_GreaterGreater : [#clang::OverloadedOperatorKind#]OO_GreaterGreater","COMPLETION: OO_GreaterGreaterEqual : [#clang::OverloadedOperatorKind#]OO_GreaterGreaterEqual","COMPLETION: OO_Less : [#clang::OverloadedOperatorKind#]OO_Less","COMPLETION: OO_LessEqual : [#clang::OverloadedOperatorKind#]OO_LessEqual","COMPLETION: OO_LessLess : [#clang::OverloadedOperatorKind#]OO_LessLess","COMPLETION: OO_LessLessEqual : [#clang::OverloadedOperatorKind#]OO_LessLessEqual","COMPLETION: OO_Minus : [#clang::OverloadedOperatorKind#]OO_Minus","COMPLETION: OO_MinusEqual : [#clang::OverloadedOperatorKind#]OO_MinusEqual","COMPLETION: OO_MinusMinus : [#clang::OverloadedOperatorKind#]OO_MinusMinus","COMPLETION: OO_New : [#clang::OverloadedOperatorKind#]OO_New","COMPLETION: OO_None : [#clang::OverloadedOperatorKind#]OO_None","COMPLETION: OO_Percent : [#clang::OverloadedOperatorKind#]OO_Percent","COMPLETION: OO_PercentEqual : [#clang::OverloadedOperatorKind#]OO_PercentEqual","COMPLETION: OO_Pipe : [#clang::OverloadedOperatorKind#]OO_Pipe","COMPLETION: OO_PipeEqual : [#clang::OverloadedOperatorKind#]OO_PipeEqual","COMPLETION: OO_PipePipe : [#clang::OverloadedOperatorKind#]OO_PipePipe","COMPLETION: OO_Plus : [#clang::OverloadedOperatorKind#]OO_Plus","COMPLETION: OO_PlusEqual : [#clang::OverloadedOperatorKind#]OO_PlusEqual","COMPLETION: OO_PlusPlus : [#clang::OverloadedOperatorKind#]OO_PlusPlus","COMPLETION: OO_Slash : [#clang::OverloadedOperatorKind#]OO_Slash","COMPLETION: OO_SlashEqual : [#clang::OverloadedOperatorKind#]OO_SlashEqual","COMPLETION: OO_Spaceship : [#clang::OverloadedOperatorKind#]OO_Spaceship","COMPLETION: OO_Star : [#clang::OverloadedOperatorKind#]OO_Star","COMPLETION: OO_StarEqual : [#clang::OverloadedOperatorKind#]OO_StarEqual","COMPLETION: OO_Subscript : [#clang::OverloadedOperatorKind#]OO_Subscript","COMPLETION: OO_Tilde : [#clang::OverloadedOperatorKind#]OO_Tilde","COMPLETION: OpaquePtr : OpaquePtr\u003c\u003c#class PtrTy#\u003e\u003e","COMPLETION: OpaqueValueExpr : OpaqueValueExpr","COMPLETION: OpenCLAccessAttr : OpenCLAccessAttr","COMPLETION: OpenCLIntelReqdSubGroupSizeAttr : OpenCLIntelReqdSubGroupSizeAttr","COMPLETION: OpenCLKernelAttr : OpenCLKernelAttr","COMPLETION: OpenCLOptions : OpenCLOptions","COMPLETION: OpenCLUnrollHintAttr : OpenCLUnrollHintAttr","COMPLETION: OpenMPClauseKind : OpenMPClauseKind","COMPLETION: OpenMPDefaultClauseKind : OpenMPDefaultClauseKind","COMPLETION: OpenMPDefaultmapClauseKind : OpenMPDefaultmapClauseKind","COMPLETION: OpenMPDefaultmapClauseModifier : OpenMPDefaultmapClauseModifier","COMPLETION: OpenMPDependClauseKind : OpenMPDependClauseKind","COMPLETION: OpenMPDirectiveKind : OpenMPDirectiveKind","COMPLETION: OpenMPDistScheduleClauseKind : OpenMPDistScheduleClauseKind","COMPLETION: OpenMPLinearClauseKind : OpenMPLinearClauseKind","COMPLETION: OpenMPMapClauseKind : OpenMPMapClauseKind","COMPLETION: OpenMPProcBindClauseKind : OpenMPProcBindClauseKind","COMPLETION: OpenMPScheduleClauseKind : OpenMPScheduleClauseKind","COMPLETION: OpenMPScheduleClauseModifier : OpenMPScheduleClauseModifier","COMPLETION: OpenMPScheduleTy : OpenMPScheduleTy","COMPLETION: operator!= : [#bool#]operator!=(\u003c#const SourceLocation \u0026LHS#\u003e, \u003c#const SourceLocation \u0026RHS#\u003e)","COMPLETION: operator!= : [#bool#]operator!=(\u003c#CanQual\u003cT\u003e x#\u003e, \u003c#CanQual\u003cU\u003e y#\u003e)","COMPLETION: operator\u0026 : [#DiagnosticLevelMask#]operator\u0026(\u003c#DiagnosticLevelMask LHS#\u003e, \u003c#DiagnosticLevelMask RHS#\u003e)","COMPLETION: operator\u003c : [#bool#]operator\u003c(\u003c#const SourceLocation \u0026LHS#\u003e, \u003c#const SourceLocation \u0026RHS#\u003e)","COMPLETION: operator\u003c : [#bool#]operator\u003c(\u003c#DeclarationName LHS#\u003e, \u003c#DeclarationName RHS#\u003e)","COMPLETION: operator\u003c : [#bool#]operator\u003c(\u003c#const CodeCompletionResult \u0026X#\u003e, \u003c#const CodeCompletionResult \u0026Y#\u003e)","COMPLETION: operator\u003c : [#bool#]operator\u003c(\u003c#const LineEntry \u0026lhs#\u003e, \u003c#const LineEntry \u0026rhs#\u003e)","COMPLETION: operator\u003c : [#bool#]operator\u003c(\u003c#const LineEntry \u0026E#\u003e, \u003c#unsigned int Offset#\u003e)","COMPLETION: operator\u003c : [#bool#]operator\u003c(\u003c#unsigned int Offset#\u003e, \u003c#const LineEntry \u0026E#\u003e)","COMPLETION: operator\u003c\u003c : [#raw_ostream \u0026#]operator\u003c\u003c(\u003c#raw_ostream \u0026Out#\u003e, \u003c#DiagnosticLevelMask M#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#const AddFlagValue V#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#StringRef S#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#const char *Str#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#int I#\u003e)","COMPLETION: operator\u003c\u003c : [#typename std::enable_if\u003cstd::is_same\u003cT, bool\u003e::value, const DiagnosticBuilder \u0026\u003e::type#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#T I#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#unsigned int I#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#tok::TokenKind I#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#const IdentifierInfo *II#\u003e)","COMPLETION: operator\u003c\u003c : [#typename std::enable_if\u003cstd::is_same\u003ctypename std::remove_const\u003cT\u003e::type, DeclContext\u003e::value, const DiagnosticBuilder \u0026\u003e::type#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#T *DC#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#SourceRange R#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#ArrayRef\u003cSourceRange\u003e Ranges#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#const CharSourceRange \u0026R#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#const FixItHint \u0026Hint#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#ArrayRef\u003cFixItHint\u003e Hints#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#DiagNullabilityKind nullability#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#const PartialDiagnostic \u0026PD#\u003e)","COMPLETION: operator\u003c\u003c : [#raw_ostream \u0026#]operator\u003c\u003c(\u003c#raw_ostream \u0026OS#\u003e, \u003c#DeclarationName N#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#DeclarationName N#\u003e)","COMPLETION: operator\u003c\u003c : [#const PartialDiagnostic \u0026#]operator\u003c\u003c(\u003c#const PartialDiagnostic \u0026PD#\u003e, \u003c#DeclarationName N#\u003e)","COMPLETION: operator\u003c\u003c : [#raw_ostream \u0026#]operator\u003c\u003c(\u003c#raw_ostream \u0026OS#\u003e, \u003c#DeclarationNameInfo DNInfo#\u003e)","COMPLETION: operator\u003c\u003c : [#raw_ostream \u0026#]operator\u003c\u003c(\u003c#raw_ostream \u0026Out#\u003e, \u003c#const VersionTuple \u0026V#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#NestedNameSpecifier *NNS#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#TemplateName N#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#QualType T#\u003e)","COMPLETION: operator\u003c\u003c : [#const PartialDiagnostic \u0026#]operator\u003c\u003c(\u003c#const PartialDiagnostic \u0026PD#\u003e, \u003c#QualType T#\u003e)","COMPLETION: operator\u003c\u003c : [#raw_ostream \u0026#]operator\u003c\u003c(\u003c#raw_ostream \u0026OS#\u003e, \u003c#const NamedDecl \u0026ND#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#const NamedDecl *ND#\u003e)","COMPLETION: operator\u003c\u003c : [#const PartialDiagnostic \u0026#]operator\u003c\u003c(\u003c#const PartialDiagnostic \u0026PD#\u003e, \u003c#const NamedDecl *ND#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#const TemplateArgument \u0026Arg#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#CanQualType T#\u003e)","COMPLETION: operator\u003c\u003c : [#raw_ostream \u0026#]operator\u003c\u003c(\u003c#raw_ostream \u0026out#\u003e, \u003c#const ObjCRuntime \u0026value#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#const Attr *At#\u003e)","COMPLETION: operator\u003c\u003c : [#const PartialDiagnostic \u0026#]operator\u003c\u003c(\u003c#const PartialDiagnostic \u0026PD#\u003e, \u003c#const Attr *At#\u003e)","COMPLETION: operator\u003c\u003c : [#const DiagnosticBuilder \u0026#]operator\u003c\u003c(\u003c#const DiagnosticBuilder \u0026DB#\u003e, \u003c#AccessSpecifier AS#\u003e)","COMPLETION: operator\u003c\u003c : [#const PartialDiagnostic \u0026#]operator\u003c\u003c(\u003c#const PartialDiagnostic \u0026DB#\u003e, \u003c#AccessSpecifier AS#\u003e)","COMPLETION: operator\u003c\u003c : [#raw_ostream \u0026#]operator\u003c\u003c(\u003c#raw_ostream \u0026OS#\u003e, \u003c#const ObjCCategoryImplDecl \u0026CID#\u003e)","COMPLETION: operator\u003c\u003c : [#raw_ostream \u0026#]operator\u003c\u003c(\u003c#raw_ostream \u0026OS#\u003e, \u003c#const ObjCImplementationDecl \u0026ID#\u003e)","COMPLETION: operator\u003c\u003c : [#raw_ostream \u0026#]operator\u003c\u003c(\u003c#raw_ostream \u0026OS#\u003e, \u003c#const CodeCompletionString \u0026CCS#\u003e)","COMPLETION: operator\u003c= : [#bool#]operator\u003c=(\u003c#DeclarationName LHS#\u003e, \u003c#DeclarationName RHS#\u003e)","COMPLETION: operator\u003c= : [#bool#]operator\u003c=(\u003c#const CodeCompletionResult \u0026X#\u003e, \u003c#const CodeCompletionResult \u0026Y#\u003e)","COMPLETION: operator== : [#bool#]operator==(\u003c#const SourceLocation \u0026LHS#\u003e, \u003c#const SourceLocation \u0026RHS#\u003e)","COMPLETION: operator== : [#bool#]operator==(\u003c#CanQual\u003cT\u003e x#\u003e, \u003c#CanQual\u003cU\u003e y#\u003e)","COMPLETION: operator\u003e : [#bool#]operator\u003e(\u003c#DeclarationName LHS#\u003e, \u003c#DeclarationName RHS#\u003e)","COMPLETION: operator\u003e : [#bool#]operator\u003e(\u003c#const CodeCompletionResult \u0026X#\u003e, \u003c#const CodeCompletionResult \u0026Y#\u003e)","COMPLETION: operator\u003e= : [#bool#]operator\u003e=(\u003c#DeclarationName LHS#\u003e, \u003c#DeclarationName RHS#\u003e)","COMPLETION: operator\u003e= : [#bool#]operator\u003e=(\u003c#const CodeCompletionResult \u0026X#\u003e, \u003c#const CodeCompletionResult \u0026Y#\u003e)","COMPLETION: operator| : [#DiagnosticLevelMask#]operator|(\u003c#DiagnosticLevelMask LHS#\u003e, \u003c#DiagnosticLevelMask RHS#\u003e)","COMPLETION: operator~ : [#DiagnosticLevelMask#]operator~(\u003c#DiagnosticLevelMask M#\u003e)","COMPLETION: OptimizeNoneAttr : OptimizeNoneAttr","COMPLETION: Optional : Optional\u003c\u003c#typename T#\u003e\u003e","COMPLETION: OR_Ambiguous : [#clang::OverloadingResult#]OR_Ambiguous","COMPLETION: OR_Deleted : [#clang::OverloadingResult#]OR_Deleted","COMPLETION: OR_No_Viable_Function : [#clang::OverloadingResult#]OR_No_Viable_Function","COMPLETION: OR_Success : [#clang::OverloadingResult#]OR_Success","COMPLETION: OverloadableAttr : OverloadableAttr","COMPLETION: OverloadCandidate : OverloadCandidate","COMPLETION: OverloadCandidateDisplayKind : OverloadCandidateDisplayKind","COMPLETION: OverloadCandidateSet : OverloadCandidateSet","COMPLETION: OverloadedOperatorKind : OverloadedOperatorKind","COMPLETION: OverloadedTemplateStorage : OverloadedTemplateStorage","COMPLETION: OverloadExpr : OverloadExpr","COMPLETION: OverloadFailureKind : OverloadFailureKind","COMPLETION: OverloadFixItKind : OverloadFixItKind","COMPLETION: OverloadingResult : OverloadingResult","COMPLETION: OverloadsShown : OverloadsShown","COMPLETION: OverrideAttr : OverrideAttr","COMPLETION: OverridingMethods : OverridingMethods","COMPLETION: Ovl_All : [#clang::OverloadsShown#]Ovl_All","COMPLETION: Ovl_Best : [#clang::OverloadsShown#]Ovl_Best","COMPLETION: ovl_fail_addr_not_available : [#clang::OverloadFailureKind#]ovl_fail_addr_not_available","COMPLETION: ovl_fail_bad_conversion : [#clang::OverloadFailureKind#]ovl_fail_bad_conversion","COMPLETION: ovl_fail_bad_deduction : [#clang::OverloadFailureKind#]ovl_fail_bad_deduction","COMPLETION: ovl_fail_bad_final_conversion : [#clang::OverloadFailureKind#]ovl_fail_bad_final_conversion","COMPLETION: ovl_fail_bad_target : [#clang::OverloadFailureKind#]ovl_fail_bad_target","COMPLETION: ovl_fail_enable_if : [#clang::OverloadFailureKind#]ovl_fail_enable_if","COMPLETION: ovl_fail_ext_disabled : [#clang::OverloadFailureKind#]ovl_fail_ext_disabled","COMPLETION: ovl_fail_final_conversion_not_exact : [#clang::OverloadFailureKind#]ovl_fail_final_conversion_not_exact","COMPLETION: ovl_fail_illegal_constructor : [#clang::OverloadFailureKind#]ovl_fail_illegal_constructor","COMPLETION: ovl_fail_inhctor_slice : [#clang::OverloadFailureKind#]ovl_fail_inhctor_slice","COMPLETION: ovl_fail_too_few_arguments : [#clang::OverloadFailureKind#]ovl_fail_too_few_arguments","COMPLETION: ovl_fail_too_many_arguments : [#clang::OverloadFailureKind#]ovl_fail_too_many_arguments","COMPLETION: ovl_fail_trivial_conversion : [#clang::OverloadFailureKind#]ovl_fail_trivial_conversion","COMPLETION: OwnershipAttr : OwnershipAttr","COMPLETION: OwningArrayRef : OwningArrayRef\u003c\u003c#typename T#\u003e\u003e","COMPLETION: PackedAttr : PackedAttr","COMPLETION: PackExpansionExpr : PackExpansionExpr","COMPLETION: PackExpansionType : PackExpansionType","COMPLETION: PackExpansionTypeLoc : PackExpansionTypeLoc","COMPLETION: PackExpansionTypeLocInfo : PackExpansionTypeLocInfo","COMPLETION: ParameterABI : ParameterABI","COMPLETION: ParameterABIAttr : ParameterABIAttr","COMPLETION: ParamTypestateAttr : ParamTypestateAttr","COMPLETION: ParenBraceBracketBalancer : ParenBraceBracketBalancer","COMPLETION: ParenExpr : ParenExpr","COMPLETION: ParenListExpr : ParenListExpr","COMPLETION: ParenLocInfo : ParenLocInfo","COMPLETION: ParentMap : ParentMap","COMPLETION: ParenType : ParenType","COMPLETION: ParenTypeLoc : ParenTypeLoc","COMPLETION: ParmVarDecl : ParmVarDecl","COMPLETION: ParseAST : [#void#]ParseAST(\u003c#Preprocessor \u0026pp#\u003e, \u003c#ASTConsumer *C#\u003e, \u003c#ASTContext \u0026Ctx#\u003e{#, \u003c#bool PrintStats = false#\u003e{#, \u003c#TranslationUnitKind TUKind = TU_Complete#\u003e{#, \u003c#CodeCompleteConsumer *CompletionConsumer = nullptr#\u003e{#, \u003c#bool SkipFunctionBodies = false#\u003e#}#}#}#})","COMPLETION: ParseAST : [#void#]ParseAST(\u003c#Sema \u0026S#\u003e{#, \u003c#bool PrintStats = false#\u003e{#, \u003c#bool SkipFunctionBodies = false#\u003e#}#})","COMPLETION: ParsedAttributes : ParsedAttributes","COMPLETION: ParseDiagnosticArgs : [#bool#]ParseDiagnosticArgs(\u003c#DiagnosticOptions \u0026Opts#\u003e, \u003c#llvm::opt::ArgList \u0026Args#\u003e{#, \u003c#DiagnosticsEngine *Diags = nullptr#\u003e{#, \u003c#bool DefaultDiagColor = true#\u003e{#, \u003c#bool DefaultShowOpt = true#\u003e#}#}#})","COMPLETION: ParsedSourceLocation : ParsedSourceLocation","COMPLETION: ParsedSourceRange : ParsedSourceRange","COMPLETION: ParsedTemplateArgument : ParsedTemplateArgument","COMPLETION: ParsedTemplateTy : ParsedTemplateTy","COMPLETION: ParsedType : ParsedType","COMPLETION: Parser : Parser","COMPLETION: parseSanitizerValue : [#SanitizerMask#]parseSanitizerValue(\u003c#StringRef Value#\u003e, \u003c#bool AllowGroups#\u003e)","COMPLETION: ParsingDeclarator : ParsingDeclarator","COMPLETION: ParsingDeclRAIIObject : ParsingDeclRAIIObject","COMPLETION: ParsingDeclSpec : ParsingDeclSpec","COMPLETION: ParsingFieldDeclarator : ParsingFieldDeclarator","COMPLETION: PartialDiagnostic : PartialDiagnostic","COMPLETION: PartialDiagnosticAt : PartialDiagnosticAt","COMPLETION: PascalAttr : PascalAttr","COMPLETION: PassObjectSizeAttr : PassObjectSizeAttr","COMPLETION: PCHBuffer : PCHBuffer","COMPLETION: PCHContainerOperations : PCHContainerOperations","COMPLETION: PCHContainerReader : PCHContainerReader","COMPLETION: PCHContainerWriter : PCHContainerWriter","COMPLETION: PCHGenerator : PCHGenerator","COMPLETION: PCHValidator : PCHValidator","COMPLETION: PCK_Compiler : [#clang::PragmaMSCommentKind#]PCK_Compiler","COMPLETION: PCK_ExeStr : [#clang::PragmaMSCommentKind#]PCK_ExeStr","COMPLETION: PCK_Lib : [#clang::PragmaMSCommentKind#]PCK_Lib","COMPLETION: PCK_Linker : [#clang::PragmaMSCommentKind#]PCK_Linker","COMPLETION: PCK_Unknown : [#clang::PragmaMSCommentKind#]PCK_Unknown","COMPLETION: PCK_User : [#clang::PragmaMSCommentKind#]PCK_User","COMPLETION: PcsAttr : PcsAttr","COMPLETION: PD_HTML : [#clang::AnalysisDiagClients#]PD_HTML","COMPLETION: PD_HTML_SINGLE_FILE : [#clang::AnalysisDiagClients#]PD_HTML_SINGLE_FILE","COMPLETION: PD_NONE : [#clang::AnalysisDiagClients#]PD_NONE","COMPLETION: PD_PLIST : [#clang::AnalysisDiagClients#]PD_PLIST","COMPLETION: PD_PLIST_HTML : [#clang::AnalysisDiagClients#]PD_PLIST_HTML","COMPLETION: PD_PLIST_MULTI_FILE : [#clang::AnalysisDiagClients#]PD_PLIST_MULTI_FILE","COMPLETION: PD_TEXT : [#clang::AnalysisDiagClients#]PD_TEXT","COMPLETION: PIK___pragma : [#clang::PragmaIntroducerKind#]PIK___pragma","COMPLETION: PIK__Pragma : [#clang::PragmaIntroducerKind#]PIK__Pragma","COMPLETION: PIK_HashPragma : [#clang::PragmaIntroducerKind#]PIK_HashPragma","COMPLETION: PipeType : PipeType","COMPLETION: PipeTypeLoc : PipeTypeLoc","COMPLETION: PipeTypeLocInfo : PipeTypeLocInfo","COMPLETION: PluginASTAction : PluginASTAction","COMPLETION: PMSST_OFF : [#clang::PragmaMSStructKind#]PMSST_OFF","COMPLETION: PMSST_ON : [#clang::PragmaMSStructKind#]PMSST_ON","COMPLETION: PointerLikeLocInfo : PointerLikeLocInfo","COMPLETION: PointerLikeTypeLoc : PointerLikeTypeLoc\u003c\u003c#class Derived#\u003e, \u003c#class TypeClass#\u003e{#, \u003c#class LocalData#\u003e#}\u003e","COMPLETION: PointerType : PointerType","COMPLETION: PointerTypeLoc : PointerTypeLoc","COMPLETION: PoisonIdentifierRAIIObject : PoisonIdentifierRAIIObject","COMPLETION: PoisonSEHIdentifiersRAIIObject : PoisonSEHIdentifiersRAIIObject","COMPLETION: PostCondition : PostCondition","COMPLETION: PostImplicitCall : PostImplicitCall","COMPLETION: PostInitializer : PostInitializer","COMPLETION: PostLoad : PostLoad","COMPLETION: PostLValue : PostLValue","COMPLETION: PostOrderCFGView : PostOrderCFGView","COMPLETION: PostStmt : PostStmt","COMPLETION: PostStmtPurgeDeadSymbols : PostStmtPurgeDeadSymbols","COMPLETION: PostStore : PostStore","COMPLETION: PPC : PPC","COMPLETION: PPCallbacks : PPCallbacks","COMPLETION: PPChainedCallbacks : PPChainedCallbacks","COMPLETION: PPConditionalDirectiveRecord : PPConditionalDirectiveRecord","COMPLETION: PPConditionalInfo : PPConditionalInfo","COMPLETION: PragmaClangBSSSectionAttr : PragmaClangBSSSectionAttr","COMPLETION: PragmaClangDataSectionAttr : PragmaClangDataSectionAttr","COMPLETION: PragmaClangRodataSectionAttr : PragmaClangRodataSectionAttr","COMPLETION: PragmaClangTextSectionAttr : PragmaClangTextSectionAttr","COMPLETION: PragmaCommentDecl : PragmaCommentDecl","COMPLETION: PragmaDetectMismatchDecl : PragmaDetectMismatchDecl","COMPLETION: PragmaHandler : PragmaHandler","COMPLETION: PragmaHandlerRegistry : PragmaHandlerRegistry","COMPLETION: PragmaIntroducerKind : PragmaIntroducerKind","COMPLETION: PragmaMSCommentKind : PragmaMSCommentKind","COMPLETION: PragmaMSStructKind : PragmaMSStructKind","COMPLETION: PragmaNamespace : PragmaNamespace","COMPLETION: PreambleBounds : PreambleBounds","COMPLETION: PreambleCallbacks : PreambleCallbacks","COMPLETION: prec : prec","COMPLETION: PrecompiledPreamble : PrecompiledPreamble","COMPLETION: PredefinedExpr : PredefinedExpr","COMPLETION: PreImplicitCall : PreImplicitCall","COMPLETION: PreLoad : PreLoad","COMPLETION: PreprocessedEntity : PreprocessedEntity","COMPLETION: PreprocessingDirective : PreprocessingDirective","COMPLETION: PreprocessingRecord : PreprocessingRecord","COMPLETION: PreprocessOnlyAction : PreprocessOnlyAction","COMPLETION: Preprocessor : Preprocessor","COMPLETION: PreprocessorFrontendAction : PreprocessorFrontendAction","COMPLETION: PreprocessorLexer : PreprocessorLexer","COMPLETION: PreprocessorOptions : PreprocessorOptions","COMPLETION: PreprocessorOutputOptions : PreprocessorOutputOptions","COMPLETION: PreserveAllAttr : PreserveAllAttr","COMPLETION: PreserveMostAttr : PreserveMostAttr","COMPLETION: PreStmt : PreStmt","COMPLETION: PreStmtPurgeDeadSymbols : PreStmtPurgeDeadSymbols","COMPLETION: PreStore : PreStore","COMPLETION: PresumedLoc : PresumedLoc","COMPLETION: PrettyDeclStackTraceEntry : PrettyDeclStackTraceEntry","COMPLETION: PrettyStackTraceDecl : PrettyStackTraceDecl","COMPLETION: PrettyStackTraceLoc : PrettyStackTraceLoc","COMPLETION: PrinterHelper : PrinterHelper","COMPLETION: PrintingCodeCompleteConsumer : PrintingCodeCompleteConsumer","COMPLETION: PrintingPolicy : PrintingPolicy","COMPLETION: PrintPreambleAction : PrintPreambleAction","COMPLETION: PrintPreprocessedAction : PrintPreprocessedAction","COMPLETION: printTemplateArgumentList : [#void#]printTemplateArgumentList(\u003c#raw_ostream \u0026OS#\u003e, \u003c#ArrayRef\u003cTemplateArgument\u003e Args#\u003e, \u003c#const PrintingPolicy \u0026Policy#\u003e)","COMPLETION: printTemplateArgumentList : [#void#]printTemplateArgumentList(\u003c#raw_ostream \u0026OS#\u003e, \u003c#ArrayRef\u003cTemplateArgumentLoc\u003e Args#\u003e, \u003c#const PrintingPolicy \u0026Policy#\u003e)","COMPLETION: printTemplateArgumentList : [#void#]printTemplateArgumentList(\u003c#raw_ostream \u0026OS#\u003e, \u003c#const TemplateArgumentListInfo \u0026Args#\u003e, \u003c#const PrintingPolicy \u0026Policy#\u003e)","COMPLETION: ProcessWarningOptions : [#void#]ProcessWarningOptions(\u003c#DiagnosticsEngine \u0026Diags#\u003e, \u003c#const DiagnosticOptions \u0026Opts#\u003e{#, \u003c#bool ReportDiags = true#\u003e#})","COMPLETION: ProgramPoint : ProgramPoint","COMPLETION: ProgramPointTag : ProgramPointTag","COMPLETION: ProtectedVisibility : [#clang::Visibility#]ProtectedVisibility","COMPLETION: PseudoConstantAnalysis : PseudoConstantAnalysis","COMPLETION: PseudoDestructorTypeStorage : PseudoDestructorTypeStorage","COMPLETION: PseudoObjectExpr : PseudoObjectExpr","COMPLETION: PtGuardedByAttr : PtGuardedByAttr","COMPLETION: PtGuardedVarAttr : PtGuardedVarAttr","COMPLETION: PTHLexer : PTHLexer","COMPLETION: PTHManager : PTHManager","COMPLETION: PureAttr : PureAttr","COMPLETION: PurgeBlock : [#clang::AnalysisPurgeMode#]PurgeBlock","COMPLETION: PurgeNone : [#clang::AnalysisPurgeMode#]PurgeNone","COMPLETION: PurgeStmt : [#clang::AnalysisPurgeMode#]PurgeStmt","COMPLETION: QualifiedTemplateName : QualifiedTemplateName","COMPLETION: QualifiedTypeLoc : QualifiedTypeLoc","COMPLETION: QualifierCollector : QualifierCollector","COMPLETION: QualifierInfo : QualifierInfo","COMPLETION: Qualifiers : Qualifiers","COMPLETION: QualType : QualType","COMPLETION: QualTypeOrdering : QualTypeOrdering","COMPLETION: RangeConstraintsModel : [#clang::AnalysisConstraints#]RangeConstraintsModel","COMPLETION: raw_ostream : raw_ostream","COMPLETION: raw_pwrite_stream : raw_pwrite_stream","COMPLETION: RawComment : RawComment","COMPLETION: RawCommentList : RawCommentList","COMPLETION: RawPCHContainerReader : RawPCHContainerReader","COMPLETION: RawPCHContainerWriter : RawPCHContainerWriter","COMPLETION: reachable_code : reachable_code","COMPLETION: RecordDecl : RecordDecl","COMPLETION: RecordType : RecordType","COMPLETION: RecordTypeLoc : RecordTypeLoc","COMPLETION: RecursiveASTVisitor : RecursiveASTVisitor\u003c\u003c#typename Derived#\u003e\u003e","COMPLETION: RecursiveCloneTypeIIHashConstraint : RecursiveCloneTypeIIHashConstraint","COMPLETION: RecursiveCloneTypeIIVerifyConstraint : RecursiveCloneTypeIIVerifyConstraint","COMPLETION: Redeclarable : Redeclarable\u003c\u003c#typename decl_type#\u003e\u003e","COMPLETION: RedeclarableTemplateDecl : RedeclarableTemplateDecl","COMPLETION: RefCountedBase : RefCountedBase\u003c\u003c#class Derived#\u003e\u003e","COMPLETION: ReferenceType : ReferenceType","COMPLETION: ReferenceTypeLoc : ReferenceTypeLoc","COMPLETION: RefQualifierKind : RefQualifierKind","COMPLETION: RegCallAttr : RegCallAttr","COMPLETION: RegionStoreModel : [#clang::AnalysisStores#]RegionStoreModel","COMPLETION: RelaxedLiveVariables : RelaxedLiveVariables","COMPLETION: ReleaseCapabilityAttr : ReleaseCapabilityAttr","COMPLETION: RenderScriptKernelAttr : RenderScriptKernelAttr","COMPLETION: ReqdWorkGroupSizeAttr : ReqdWorkGroupSizeAttr","COMPLETION: RequireConstantInitAttr : RequireConstantInitAttr","COMPLETION: RequiresCapabilityAttr : RequiresCapabilityAttr","COMPLETION: RestrictAttr : RestrictAttr","COMPLETION: ReturnAdjustment : ReturnAdjustment","COMPLETION: ReturnsNonNullAttr : ReturnsNonNullAttr","COMPLETION: ReturnStmt : ReturnStmt","COMPLETION: ReturnsTwiceAttr : ReturnsTwiceAttr","COMPLETION: ReturnTypestateAttr : ReturnTypestateAttr","COMPLETION: RewriteBuffer : RewriteBuffer","COMPLETION: RewriteIncludesAction : RewriteIncludesAction","COMPLETION: RewriteIncludesInInput : [#void#]RewriteIncludesInInput(\u003c#Preprocessor \u0026PP#\u003e, \u003c#raw_ostream *OS#\u003e, \u003c#const PreprocessorOutputOptions \u0026Opts#\u003e)","COMPLETION: RewriteMacrosAction : RewriteMacrosAction","COMPLETION: RewriteMacrosInInput : [#void#]RewriteMacrosInInput(\u003c#Preprocessor \u0026PP#\u003e, \u003c#raw_ostream *OS#\u003e)","COMPLETION: RewriteObjCAction : RewriteObjCAction","COMPLETION: Rewriter : Rewriter","COMPLETION: RewriteRope : RewriteRope","COMPLETION: RewriteTestAction : RewriteTestAction","COMPLETION: RopePiece : RopePiece","COMPLETION: RopePieceBTree : RopePieceBTree","COMPLETION: RopePieceBTreeIterator : RopePieceBTreeIterator","COMPLETION: RopeRefCountString : RopeRefCountString","COMPLETION: RQ_LValue : [#clang::RefQualifierKind#]RQ_LValue","COMPLETION: RQ_None : [#clang::RefQualifierKind#]RQ_None","COMPLETION: RQ_RValue : [#clang::RefQualifierKind#]RQ_RValue","COMPLETION: runUninitializedVariablesAnalysis : [#void#]runUninitializedVariablesAnalysis(\u003c#const DeclContext \u0026dc#\u003e, \u003c#const CFG \u0026cfg#\u003e, \u003c#AnalysisDeclContext \u0026ac#\u003e, \u003c#UninitVariablesHandler \u0026handler#\u003e, \u003c#UninitVariablesAnalysisStats \u0026stats#\u003e)","COMPLETION: RValueReferenceType : RValueReferenceType","COMPLETION: RValueReferenceTypeLoc : RValueReferenceTypeLoc","COMPLETION: SanitizerBlacklist : SanitizerBlacklist","COMPLETION: SanitizerKind : SanitizerKind","COMPLETION: SanitizerMask : SanitizerMask","COMPLETION: SanitizerSet : SanitizerSet","COMPLETION: SanitizerSpecialCaseList : SanitizerSpecialCaseList","COMPLETION: SaveAndRestore : SaveAndRestore\u003c\u003c#typename T#\u003e\u003e","COMPLETION: SavedStreamPosition : SavedStreamPosition","COMPLETION: SC_Auto : [#clang::StorageClass#]SC_Auto","COMPLETION: SC_Extern : [#clang::StorageClass#]SC_Extern","COMPLETION: SC_None : [#clang::StorageClass#]SC_None","COMPLETION: SC_PrivateExtern : [#clang::StorageClass#]SC_PrivateExtern","COMPLETION: SC_Register : [#clang::StorageClass#]SC_Register","COMPLETION: SC_Static : [#clang::StorageClass#]SC_Static","COMPLETION: Scope : Scope","COMPLETION: ScopeContext : ScopeContext","COMPLETION: ScopedLockableAttr : ScopedLockableAttr","COMPLETION: ScratchBuffer : ScratchBuffer","COMPLETION: SD_Automatic : [#clang::StorageDuration#]SD_Automatic","COMPLETION: SD_Dynamic : [#clang::StorageDuration#]SD_Dynamic","COMPLETION: SD_FullExpression : [#clang::StorageDuration#]SD_FullExpression","COMPLETION: SD_Static : [#clang::StorageDuration#]SD_Static","COMPLETION: SD_Thread : [#clang::StorageDuration#]SD_Thread","COMPLETION: SectionAttr : SectionAttr","COMPLETION: SEHExceptStmt : SEHExceptStmt","COMPLETION: SEHFinallyStmt : SEHFinallyStmt","COMPLETION: SEHLeaveStmt : SEHLeaveStmt","COMPLETION: SEHTryStmt : SEHTryStmt","COMPLETION: SelectAnyAttr : SelectAnyAttr","COMPLETION: Selector : Selector","COMPLETION: SelectorLocationsKind : SelectorLocationsKind","COMPLETION: SelectorTable : SelectorTable","COMPLETION: SelLoc_NonStandard : [#clang::SelectorLocationsKind#]SelLoc_NonStandard","COMPLETION: SelLoc_StandardNoSpace : [#clang::SelectorLocationsKind#]SelLoc_StandardNoSpace","COMPLETION: SelLoc_StandardWithSpace : [#clang::SelectorLocationsKind#]SelLoc_StandardWithSpace","COMPLETION: Sema : Sema","COMPLETION: sema : sema","COMPLETION: SemaConsumer : SemaConsumer","COMPLETION: SentinelAttr : SentinelAttr","COMPLETION: serialization : serialization","COMPLETION: serialized_diags : serialized_diags","COMPLETION: SetTypestateAttr : SetTypestateAttr","COMPLETION: SFF_CFString : [#clang::ObjCStringFormatFamily#]SFF_CFString","COMPLETION: SFF_None : [#clang::ObjCStringFormatFamily#]SFF_None","COMPLETION: SFF_NSString : [#clang::ObjCStringFormatFamily#]SFF_NSString","COMPLETION: SharedTrylockFunctionAttr : SharedTrylockFunctionAttr","COMPLETION: ShuffleVectorExpr : ShuffleVectorExpr","COMPLETION: SimpleASTReaderListener : SimpleASTReaderListener","COMPLETION: SimpleProgramPointTag : SimpleProgramPointTag","COMPLETION: SimplifiedTypeClass : SimplifiedTypeClass","COMPLETION: SizeOfPackExpr : SizeOfPackExpr","COMPLETION: SmallString : SmallString\u003c\u003c#unsigned int InternalLen#\u003e\u003e","COMPLETION: SmallVector : SmallVector\u003c\u003c#typename T#\u003e, \u003c#unsigned int N#\u003e\u003e","COMPLETION: SmallVectorImpl : SmallVectorImpl\u003c\u003c#typename T#\u003e\u003e","COMPLETION: SourceLocation : SourceLocation","COMPLETION: SourceManager : SourceManager","COMPLETION: SourceMgr : SourceMgr","COMPLETION: SourceRange : SourceRange","COMPLETION: specific_attr_begin : [#specific_attr_iterator\u003cSpecificAttr, Container\u003e#]specific_attr_begin\u003c\u003c#typename SpecificAttr#\u003e\u003e(\u003c#const Container \u0026container#\u003e)","COMPLETION: specific_attr_end : [#specific_attr_iterator\u003cSpecificAttr, Container\u003e#]specific_attr_end\u003c\u003c#typename SpecificAttr#\u003e\u003e(\u003c#const Container \u0026container#\u003e)","COMPLETION: specific_attr_iterator : specific_attr_iterator\u003c\u003c#typename SpecificAttr#\u003e{#, \u003c#typename Container#\u003e#}\u003e","COMPLETION: SplitQualType : SplitQualType","COMPLETION: SrcMgr : SrcMgr","COMPLETION: StackFrameContext : StackFrameContext","COMPLETION: StandardConversionSequence : StandardConversionSequence","COMPLETION: StaticAssertDecl : StaticAssertDecl","COMPLETION: STC_Arithmetic : [#clang::SimplifiedTypeClass#]STC_Arithmetic","COMPLETION: STC_Array : [#clang::SimplifiedTypeClass#]STC_Array","COMPLETION: STC_Block : [#clang::SimplifiedTypeClass#]STC_Block","COMPLETION: STC_Function : [#clang::SimplifiedTypeClass#]STC_Function","COMPLETION: STC_ObjectiveC : [#clang::SimplifiedTypeClass#]STC_ObjectiveC","COMPLETION: STC_Other : [#clang::SimplifiedTypeClass#]STC_Other","COMPLETION: STC_Pointer : [#clang::SimplifiedTypeClass#]STC_Pointer","COMPLETION: STC_Record : [#clang::SimplifiedTypeClass#]STC_Record","COMPLETION: STC_Void : [#clang::SimplifiedTypeClass#]STC_Void","COMPLETION: StdCallAttr : StdCallAttr","COMPLETION: Stmt : Stmt","COMPLETION: StmtAttr : StmtAttr","COMPLETION: StmtEmpty : [#StmtResult#]StmtEmpty()","COMPLETION: StmtError : [#StmtResult#]StmtError()","COMPLETION: StmtError : [#StmtResult#]StmtError(\u003c#const DiagnosticBuilder \u0026#\u003e)","COMPLETION: StmtExpr : StmtExpr","COMPLETION: StmtIterator : StmtIterator","COMPLETION: StmtIteratorBase : StmtIteratorBase","COMPLETION: StmtIteratorImpl : StmtIteratorImpl\u003c\u003c#typename DERIVED#\u003e, \u003c#typename REFERENCE#\u003e\u003e","COMPLETION: StmtPoint : StmtPoint","COMPLETION: StmtResult : StmtResult","COMPLETION: StmtSequence : StmtSequence","COMPLETION: StmtVisitor : StmtVisitor\u003c\u003c#typename ImplClass#\u003e{#, \u003c#typename RetTy#\u003e, \u003c#typename ParamTys#\u003e#}\u003e","COMPLETION: StmtVisitorBase : StmtVisitorBase\u003c\u003c#template\u003c...\u003e class Ptr#\u003e, \u003c#typename ImplClass#\u003e{#, \u003c#typename RetTy#\u003e, \u003c#class ParamTys#\u003e#}\u003e","COMPLETION: StorageClass : StorageClass","COMPLETION: StorageDuration : StorageDuration","COMPLETION: StoredDeclsList : StoredDeclsList","COMPLETION: StoredDeclsMap : StoredDeclsMap","COMPLETION: StoredDiagnostic : StoredDiagnostic","COMPLETION: StringLiteral : StringLiteral","COMPLETION: StringLiteralParser : StringLiteralParser","COMPLETION: StringRef : StringRef","COMPLETION: StringSizerHelper : StringSizerHelper\u003c\u003c#size_t SizeOfStr#\u003e, \u003c#typename FieldType#\u003e\u003e","COMPLETION: StringToCudaArch : [#CudaArch#]StringToCudaArch(\u003c#llvm::StringRef S#\u003e)","COMPLETION: StringToCudaVirtualArch : [#CudaVirtualArch#]StringToCudaVirtualArch(\u003c#llvm::StringRef S#\u003e)","COMPLETION: StructuralEquivalenceContext : StructuralEquivalenceContext","COMPLETION: SubobjectAdjustment : SubobjectAdjustment","COMPLETION: SubstNonTypeTemplateParmExpr : SubstNonTypeTemplateParmExpr","COMPLETION: SubstNonTypeTemplateParmPackExpr : SubstNonTypeTemplateParmPackExpr","COMPLETION: SubstTemplateTemplateParmPackStorage : SubstTemplateTemplateParmPackStorage","COMPLETION: SubstTemplateTemplateParmStorage : SubstTemplateTemplateParmStorage","COMPLETION: SubstTemplateTypeParmPackType : SubstTemplateTypeParmPackType","COMPLETION: SubstTemplateTypeParmPackTypeLoc : SubstTemplateTypeParmPackTypeLoc","COMPLETION: SubstTemplateTypeParmType : SubstTemplateTypeParmType","COMPLETION: SubstTemplateTypeParmTypeLoc : SubstTemplateTypeParmTypeLoc","COMPLETION: supportsVariadicCall : [#bool#]supportsVariadicCall(\u003c#CallingConv CC#\u003e)","COMPLETION: SuppressAccessChecks : SuppressAccessChecks","COMPLETION: SuppressAttr : SuppressAttr","COMPLETION: SwiftCallAttr : SwiftCallAttr","COMPLETION: SwiftContextAttr : SwiftContextAttr","COMPLETION: SwiftErrorResultAttr : SwiftErrorResultAttr","COMPLETION: SwiftIndirectResultAttr : SwiftIndirectResultAttr","COMPLETION: SwitchCase : SwitchCase","COMPLETION: SwitchStmt : SwitchStmt","COMPLETION: SyncScope : SyncScope","COMPLETION: SyntaxOnlyAction : SyntaxOnlyAction","COMPLETION: SystemZ : SystemZ","COMPLETION: SysVABIAttr : SysVABIAttr","COMPLETION: TagDecl : TagDecl","COMPLETION: TagType : TagType","COMPLETION: TagTypeKind : TagTypeKind","COMPLETION: TagTypeLoc : TagTypeLoc","COMPLETION: TargetAttr : TargetAttr","COMPLETION: TargetCXXABI : TargetCXXABI","COMPLETION: TargetInfo : TargetInfo","COMPLETION: TargetOptions : TargetOptions","COMPLETION: TemplateArgument : TemplateArgument","COMPLETION: TemplateArgumentList : TemplateArgumentList","COMPLETION: TemplateArgumentListInfo : TemplateArgumentListInfo","COMPLETION: TemplateArgumentLoc : TemplateArgumentLoc","COMPLETION: TemplateArgumentLocInfo : TemplateArgumentLocInfo","COMPLETION: TemplateDecl : TemplateDecl","COMPLETION: TemplateDeclInstantiator : TemplateDeclInstantiator","COMPLETION: TemplateDiffTypes : TemplateDiffTypes","COMPLETION: TemplateIdAnnotation : TemplateIdAnnotation","COMPLETION: TemplateName : TemplateName","COMPLETION: TemplateNameKind : TemplateNameKind","COMPLETION: TemplateNameLocInfo : TemplateNameLocInfo","COMPLETION: TemplateParameter : TemplateParameter","COMPLETION: TemplateParameterList : TemplateParameterList","COMPLETION: TemplateParmPosition : TemplateParmPosition","COMPLETION: TemplatePartialOrderingContext : TemplatePartialOrderingContext","COMPLETION: TemplateSpecCandidate : TemplateSpecCandidate","COMPLETION: TemplateSpecCandidateSet : TemplateSpecCandidateSet","COMPLETION: TemplateSpecializationKind : TemplateSpecializationKind","COMPLETION: TemplateSpecializationLocInfo : TemplateSpecializationLocInfo","COMPLETION: TemplateSpecializationType : TemplateSpecializationType","COMPLETION: TemplateSpecializationTypeLoc : TemplateSpecializationTypeLoc","COMPLETION: TemplateTemplateParmDecl : TemplateTemplateParmDecl","COMPLETION: TemplateTypeParmDecl : TemplateTypeParmDecl","COMPLETION: TemplateTypeParmType : TemplateTypeParmType","COMPLETION: TemplateTypeParmTypeLoc : TemplateTypeParmTypeLoc","COMPLETION: TestTypestateAttr : TestTypestateAttr","COMPLETION: TextDiagnostic : TextDiagnostic","COMPLETION: TextDiagnosticBuffer : TextDiagnosticBuffer","COMPLETION: TextDiagnosticFormat : TextDiagnosticFormat","COMPLETION: TextDiagnosticPrinter : TextDiagnosticPrinter","COMPLETION: ThisAdjustment : ThisAdjustment","COMPLETION: ThisCallAttr : ThisCallAttr","COMPLETION: ThreadAttr : ThreadAttr","COMPLETION: threadSafety : threadSafety","COMPLETION: ThreadStorageClassSpecifier : ThreadStorageClassSpecifier","COMPLETION: ThunkInfo : ThunkInfo","COMPLETION: TLSModelAttr : TLSModelAttr","COMPLETION: TNK_Dependent_template_name : [#clang::TemplateNameKind#]TNK_Dependent_template_name","COMPLETION: TNK_Function_template : [#clang::TemplateNameKind#]TNK_Function_template","COMPLETION: TNK_Non_template : [#clang::TemplateNameKind#]TNK_Non_template","COMPLETION: TNK_Type_template : [#clang::TemplateNameKind#]TNK_Type_template","COMPLETION: TNK_Var_template : [#clang::TemplateNameKind#]TNK_Var_template","COMPLETION: ToggleHighlight : [#const char#]ToggleHighlight","COMPLETION: tok : tok","COMPLETION: Token : Token","COMPLETION: TokenConcatenation : TokenConcatenation","COMPLETION: TokenLexer : TokenLexer","COMPLETION: TokenRewriter : TokenRewriter","COMPLETION: TokenValue : TokenValue","COMPLETION: toLowercase : [#char#]toLowercase(\u003c#char c#\u003e)","COMPLETION: tooling : tooling","COMPLETION: toTargetAddressSpace : [#unsigned int#]toTargetAddressSpace(\u003c#LangAS AS#\u003e)","COMPLETION: toUppercase : [#char#]toUppercase(\u003c#char c#\u003e)","COMPLETION: TPOC : TPOC","COMPLETION: TPOC_Call : [#clang::TPOC#]TPOC_Call","COMPLETION: TPOC_Conversion : [#clang::TPOC#]TPOC_Conversion","COMPLETION: TPOC_Other : [#clang::TPOC#]TPOC_Other","COMPLETION: TranslationUnitDecl : TranslationUnitDecl","COMPLETION: TranslationUnitKind : TranslationUnitKind","COMPLETION: TransparentUnionAttr : TransparentUnionAttr","COMPLETION: TrivialModuleLoader : TrivialModuleLoader","COMPLETION: TryAcquireCapabilityAttr : TryAcquireCapabilityAttr","COMPLETION: TSCS___thread : [#clang::ThreadStorageClassSpecifier#]TSCS___thread","COMPLETION: TSCS__Thread_local : [#clang::ThreadStorageClassSpecifier#]TSCS__Thread_local","COMPLETION: TSCS_thread_local : [#clang::ThreadStorageClassSpecifier#]TSCS_thread_local","COMPLETION: TSCS_unspecified : [#clang::ThreadStorageClassSpecifier#]TSCS_unspecified","COMPLETION: TSK_ExplicitInstantiationDeclaration : [#clang::TemplateSpecializationKind#]TSK_ExplicitInstantiationDeclaration","COMPLETION: TSK_ExplicitInstantiationDefinition : [#clang::TemplateSpecializationKind#]TSK_ExplicitInstantiationDefinition","COMPLETION: TSK_ExplicitSpecialization : [#clang::TemplateSpecializationKind#]TSK_ExplicitSpecialization","COMPLETION: TSK_ImplicitInstantiation : [#clang::TemplateSpecializationKind#]TSK_ImplicitInstantiation","COMPLETION: TSK_Undeclared : [#clang::TemplateSpecializationKind#]TSK_Undeclared","COMPLETION: TSP_pipe : [#clang::TypeSpecifiersPipe#]TSP_pipe","COMPLETION: TSP_unspecified : [#clang::TypeSpecifiersPipe#]TSP_unspecified","COMPLETION: TSS_signed : [#clang::TypeSpecifierSign#]TSS_signed","COMPLETION: TSS_unsigned : [#clang::TypeSpecifierSign#]TSS_unsigned","COMPLETION: TSS_unspecified : [#clang::TypeSpecifierSign#]TSS_unspecified","COMPLETION: TST_atomic : [#clang::TypeSpecifierType#]TST_atomic","COMPLETION: TST_auto : [#clang::TypeSpecifierType#]TST_auto","COMPLETION: TST_auto_type : [#clang::TypeSpecifierType#]TST_auto_type","COMPLETION: TST_bool : [#clang::TypeSpecifierType#]TST_bool","COMPLETION: TST_char : [#clang::TypeSpecifierType#]TST_char","COMPLETION: TST_char16 : [#clang::TypeSpecifierType#]TST_char16","COMPLETION: TST_char32 : [#clang::TypeSpecifierType#]TST_char32","COMPLETION: TST_class : [#clang::TypeSpecifierType#]TST_class","COMPLETION: TST_decimal128 : [#clang::TypeSpecifierType#]TST_decimal128","COMPLETION: TST_decimal32 : [#clang::TypeSpecifierType#]TST_decimal32","COMPLETION: TST_decimal64 : [#clang::TypeSpecifierType#]TST_decimal64","COMPLETION: TST_decltype : [#clang::TypeSpecifierType#]TST_decltype","COMPLETION: TST_decltype_auto : [#clang::TypeSpecifierType#]TST_decltype_auto","COMPLETION: TST_double : [#clang::TypeSpecifierType#]TST_double","COMPLETION: TST_enum : [#clang::TypeSpecifierType#]TST_enum","COMPLETION: TST_error : [#clang::TypeSpecifierType#]TST_error","COMPLETION: TST_float : [#clang::TypeSpecifierType#]TST_float","COMPLETION: TST_float128 : [#clang::TypeSpecifierType#]TST_float128","COMPLETION: TST_Float16 : [#clang::TypeSpecifierType#]TST_Float16","COMPLETION: TST_half : [#clang::TypeSpecifierType#]TST_half","COMPLETION: TST_image1d_array_t : [#clang::TypeSpecifierType#]TST_image1d_array_t","COMPLETION: TST_image1d_buffer_t : [#clang::TypeSpecifierType#]TST_image1d_buffer_t","COMPLETION: TST_image1d_t : [#clang::TypeSpecifierType#]TST_image1d_t","COMPLETION: TST_image2d_array_depth_t : [#clang::TypeSpecifierType#]TST_image2d_array_depth_t","COMPLETION: TST_image2d_array_msaa_depth_t : [#clang::TypeSpecifierType#]TST_image2d_array_msaa_depth_t","COMPLETION: TST_image2d_array_msaa_t : [#clang::TypeSpecifierType#]TST_image2d_array_msaa_t","COMPLETION: TST_image2d_array_t : [#clang::TypeSpecifierType#]TST_image2d_array_t","COMPLETION: TST_image2d_depth_t : [#clang::TypeSpecifierType#]TST_image2d_depth_t","COMPLETION: TST_image2d_msaa_depth_t : [#clang::TypeSpecifierType#]TST_image2d_msaa_depth_t","COMPLETION: TST_image2d_msaa_t : [#clang::TypeSpecifierType#]TST_image2d_msaa_t","COMPLETION: TST_image2d_t : [#clang::TypeSpecifierType#]TST_image2d_t","COMPLETION: TST_image3d_t : [#clang::TypeSpecifierType#]TST_image3d_t","COMPLETION: TST_int : [#clang::TypeSpecifierType#]TST_int","COMPLETION: TST_int128 : [#clang::TypeSpecifierType#]TST_int128","COMPLETION: TST_interface : [#clang::TypeSpecifierType#]TST_interface","COMPLETION: TST_struct : [#clang::TypeSpecifierType#]TST_struct","COMPLETION: TST_typename : [#clang::TypeSpecifierType#]TST_typename","COMPLETION: TST_typeofExpr : [#clang::TypeSpecifierType#]TST_typeofExpr","COMPLETION: TST_typeofType : [#clang::TypeSpecifierType#]TST_typeofType","COMPLETION: TST_underlyingType : [#clang::TypeSpecifierType#]TST_underlyingType","COMPLETION: TST_union : [#clang::TypeSpecifierType#]TST_union","COMPLETION: TST_unknown_anytype : [#clang::TypeSpecifierType#]TST_unknown_anytype","COMPLETION: TST_unspecified : [#clang::TypeSpecifierType#]TST_unspecified","COMPLETION: TST_void : [#clang::TypeSpecifierType#]TST_void","COMPLETION: TST_wchar : [#clang::TypeSpecifierType#]TST_wchar","COMPLETION: TSW_long : [#clang::TypeSpecifierWidth#]TSW_long","COMPLETION: TSW_longlong : [#clang::TypeSpecifierWidth#]TSW_longlong","COMPLETION: TSW_short : [#clang::TypeSpecifierWidth#]TSW_short","COMPLETION: TSW_unspecified : [#clang::TypeSpecifierWidth#]TSW_unspecified","COMPLETION: TT_IsConstructible : [#clang::TypeTrait#]TT_IsConstructible","COMPLETION: TT_IsNothrowConstructible : [#clang::TypeTrait#]TT_IsNothrowConstructible","COMPLETION: TT_IsTriviallyConstructible : [#clang::TypeTrait#]TT_IsTriviallyConstructible","COMPLETION: TTK_Class : [#clang::TagTypeKind#]TTK_Class","COMPLETION: TTK_Enum : [#clang::TagTypeKind#]TTK_Enum","COMPLETION: TTK_Interface : [#clang::TagTypeKind#]TTK_Interface","COMPLETION: TTK_Struct : [#clang::TagTypeKind#]TTK_Struct","COMPLETION: TTK_Union : [#clang::TagTypeKind#]TTK_Union","COMPLETION: TU_Complete : [#clang::TranslationUnitKind#]TU_Complete","COMPLETION: TU_Module : [#clang::TranslationUnitKind#]TU_Module","COMPLETION: TU_Prefix : [#clang::TranslationUnitKind#]TU_Prefix","COMPLETION: Twine : Twine","COMPLETION: Type : Type","COMPLETION: TypeAliasDecl : TypeAliasDecl","COMPLETION: TypeAliasTemplateDecl : TypeAliasTemplateDecl","COMPLETION: TypeAlignment : [#clang::(anonymous)#]TypeAlignment","COMPLETION: TypeAlignmentInBits : [#clang::(anonymous)#]TypeAlignmentInBits","COMPLETION: TypeDecl : TypeDecl","COMPLETION: TypedefDecl : TypedefDecl","COMPLETION: TypedefNameDecl : TypedefNameDecl","COMPLETION: TypedefType : TypedefType","COMPLETION: TypedefTypeLoc : TypedefTypeLoc","COMPLETION: TypeInfo : TypeInfo","COMPLETION: TypeIsArrayType : TypeIsArrayType\u003c\u003c#typename T#\u003e\u003e","COMPLETION: TypeLoc : TypeLoc","COMPLETION: TypeLocVisitor : TypeLocVisitor\u003c\u003c#typename ImplClass#\u003e{#, \u003c#typename RetTy#\u003e#}\u003e","COMPLETION: TypeName : TypeName","COMPLETION: TypeOfExprType : TypeOfExprType","COMPLETION: TypeOfExprTypeLoc : TypeOfExprTypeLoc","COMPLETION: TypeOfExprTypeLocInfo : TypeOfExprTypeLocInfo","COMPLETION: TypeofLikeTypeLoc : TypeofLikeTypeLoc\u003c\u003c#class Derived#\u003e, \u003c#class TypeClass#\u003e{#, \u003c#class LocalData#\u003e#}\u003e","COMPLETION: TypeofLocInfo : TypeofLocInfo","COMPLETION: TypeOfType : TypeOfType","COMPLETION: TypeOfTypeLoc : TypeOfTypeLoc","COMPLETION: TypeOfTypeLocInfo : TypeOfTypeLocInfo","COMPLETION: TypeResult : TypeResult","COMPLETION: TypeSourceInfo : TypeSourceInfo","COMPLETION: TypeSpecifierSign : TypeSpecifierSign","COMPLETION: TypeSpecifiersPipe : TypeSpecifiersPipe","COMPLETION: TypeSpecifierType : TypeSpecifierType","COMPLETION: TypeSpecifierWidth : TypeSpecifierWidth","COMPLETION: TypeSpecLocInfo : TypeSpecLocInfo","COMPLETION: TypeSpecTypeLoc : TypeSpecTypeLoc","COMPLETION: TypeTagForDatatypeAttr : TypeTagForDatatypeAttr","COMPLETION: TypeTrait : TypeTrait","COMPLETION: TypeTraitExpr : TypeTraitExpr","COMPLETION: TypeVisibilityAttr : TypeVisibilityAttr","COMPLETION: TypeVisitor : TypeVisitor\u003c\u003c#typename ImplClass#\u003e{#, \u003c#typename RetTy#\u003e#}\u003e","COMPLETION: TypeWithKeyword : TypeWithKeyword","COMPLETION: TypoCorrection : TypoCorrection","COMPLETION: TypoCorrectionConsumer : TypoCorrectionConsumer","COMPLETION: TypoExpr : TypoExpr","COMPLETION: UETT_AlignOf : [#clang::UnaryExprOrTypeTrait#]UETT_AlignOf","COMPLETION: UETT_OpenMPRequiredSimdAlign : [#clang::UnaryExprOrTypeTrait#]UETT_OpenMPRequiredSimdAlign","COMPLETION: UETT_SizeOf : [#clang::UnaryExprOrTypeTrait#]UETT_SizeOf","COMPLETION: UETT_VecStep : [#clang::UnaryExprOrTypeTrait#]UETT_VecStep","COMPLETION: UnaryExprOrTypeTrait : UnaryExprOrTypeTrait","COMPLETION: UnaryExprOrTypeTraitExpr : UnaryExprOrTypeTraitExpr","COMPLETION: UnaryOperator : UnaryOperator","COMPLETION: UnaryOperatorKind : UnaryOperatorKind","COMPLETION: UnaryTransformType : UnaryTransformType","COMPLETION: UnaryTransformTypeLoc : UnaryTransformTypeLoc","COMPLETION: UnaryTransformTypeLocInfo : UnaryTransformTypeLocInfo","COMPLETION: UnavailableAttr : UnavailableAttr","COMPLETION: UncommonTemplateNameStorage : UncommonTemplateNameStorage","COMPLETION: UndefMacroDirective : UndefMacroDirective","COMPLETION: UnexpandedParameterPack : UnexpandedParameterPack","COMPLETION: UninitUse : UninitUse","COMPLETION: UninitVariablesAnalysisStats : UninitVariablesAnalysisStats","COMPLETION: UninitVariablesHandler : UninitVariablesHandler","COMPLETION: UnionOpaquePtr : UnionOpaquePtr\u003c\u003c#class T#\u003e\u003e","COMPLETION: UnionParsedTemplateTy : UnionParsedTemplateTy","COMPLETION: UnionParsedType : UnionParsedType","COMPLETION: UniqueExternalLinkage : [#clang::Linkage#]UniqueExternalLinkage","COMPLETION: UniqueVirtualMethod : UniqueVirtualMethod","COMPLETION: UnqualifiedId : UnqualifiedId","COMPLETION: UnqualifiedIdKind : UnqualifiedIdKind","COMPLETION: UnqualTypeLoc : UnqualTypeLoc","COMPLETION: UnresolvedLookupExpr : UnresolvedLookupExpr","COMPLETION: UnresolvedMemberExpr : UnresolvedMemberExpr","COMPLETION: UnresolvedSet : UnresolvedSet\u003c\u003c#unsigned int N#\u003e\u003e","COMPLETION: UnresolvedSetImpl : UnresolvedSetImpl","COMPLETION: UnresolvedSetIterator : UnresolvedSetIterator","COMPLETION: UnresolvedUsingType : UnresolvedUsingType","COMPLETION: UnresolvedUsingTypeLoc : UnresolvedUsingTypeLoc","COMPLETION: UnresolvedUsingTypenameDecl : UnresolvedUsingTypenameDecl","COMPLETION: UnresolvedUsingValueDecl : UnresolvedUsingValueDecl","COMPLETION: UnusedAttr : UnusedAttr","COMPLETION: UO_AddrOf : [#clang::UnaryOperatorKind#]UO_AddrOf","COMPLETION: UO_Coawait : [#clang::UnaryOperatorKind#]UO_Coawait","COMPLETION: UO_Deref : [#clang::UnaryOperatorKind#]UO_Deref","COMPLETION: UO_Extension : [#clang::UnaryOperatorKind#]UO_Extension","COMPLETION: UO_Imag : [#clang::UnaryOperatorKind#]UO_Imag","COMPLETION: UO_LNot : [#clang::UnaryOperatorKind#]UO_LNot","COMPLETION: UO_Minus : [#clang::UnaryOperatorKind#]UO_Minus","COMPLETION: UO_Not : [#clang::UnaryOperatorKind#]UO_Not","COMPLETION: UO_Plus : [#clang::UnaryOperatorKind#]UO_Plus","COMPLETION: UO_PostDec : [#clang::UnaryOperatorKind#]UO_PostDec","COMPLETION: UO_PostInc : [#clang::UnaryOperatorKind#]UO_PostInc","COMPLETION: UO_PreDec : [#clang::UnaryOperatorKind#]UO_PreDec","COMPLETION: UO_PreInc : [#clang::UnaryOperatorKind#]UO_PreInc","COMPLETION: UO_Real : [#clang::UnaryOperatorKind#]UO_Real","COMPLETION: UsedAttr : UsedAttr","COMPLETION: UserDefinedConversionSequence : UserDefinedConversionSequence","COMPLETION: UserDefinedLiteral : UserDefinedLiteral","COMPLETION: UsingDecl : UsingDecl","COMPLETION: UsingDirectiveDecl : UsingDirectiveDecl","COMPLETION: UsingPackDecl : UsingPackDecl","COMPLETION: UsingShadowDecl : UsingShadowDecl","COMPLETION: UTT_HasNothrowAssign : [#clang::TypeTrait#]UTT_HasNothrowAssign","COMPLETION: UTT_HasNothrowConstructor : [#clang::TypeTrait#]UTT_HasNothrowConstructor","COMPLETION: UTT_HasNothrowCopy : [#clang::TypeTrait#]UTT_HasNothrowCopy","COMPLETION: UTT_HasNothrowMoveAssign : [#clang::TypeTrait#]UTT_HasNothrowMoveAssign","COMPLETION: UTT_HasTrivialAssign : [#clang::TypeTrait#]UTT_HasTrivialAssign","COMPLETION: UTT_HasTrivialCopy : [#clang::TypeTrait#]UTT_HasTrivialCopy","COMPLETION: UTT_HasTrivialDefaultConstructor : [#clang::TypeTrait#]UTT_HasTrivialDefaultConstructor","COMPLETION: UTT_HasTrivialDestructor : [#clang::TypeTrait#]UTT_HasTrivialDestructor","COMPLETION: UTT_HasTrivialMoveAssign : [#clang::TypeTrait#]UTT_HasTrivialMoveAssign","COMPLETION: UTT_HasTrivialMoveConstructor : [#clang::TypeTrait#]UTT_HasTrivialMoveConstructor","COMPLETION: UTT_HasUniqueObjectRepresentations : [#clang::TypeTrait#]UTT_HasUniqueObjectRepresentations","COMPLETION: UTT_HasVirtualDestructor : [#clang::TypeTrait#]UTT_HasVirtualDestructor","COMPLETION: UTT_IsAbstract : [#clang::TypeTrait#]UTT_IsAbstract","COMPLETION: UTT_IsAggregate : [#clang::TypeTrait#]UTT_IsAggregate","COMPLETION: UTT_IsArithmetic : [#clang::TypeTrait#]UTT_IsArithmetic","COMPLETION: UTT_IsArray : [#clang::TypeTrait#]UTT_IsArray","COMPLETION: UTT_IsClass : [#clang::TypeTrait#]UTT_IsClass","COMPLETION: UTT_IsCompleteType : [#clang::TypeTrait#]UTT_IsCompleteType","COMPLETION: UTT_IsCompound : [#clang::TypeTrait#]UTT_IsCompound","COMPLETION: UTT_IsConst : [#clang::TypeTrait#]UTT_IsConst","COMPLETION: UTT_IsDestructible : [#clang::TypeTrait#]UTT_IsDestructible","COMPLETION: UTT_IsEmpty : [#clang::TypeTrait#]UTT_IsEmpty","COMPLETION: UTT_IsEnum : [#clang::TypeTrait#]UTT_IsEnum","COMPLETION: UTT_IsFinal : [#clang::TypeTrait#]UTT_IsFinal","COMPLETION: UTT_IsFloatingPoint : [#clang::TypeTrait#]UTT_IsFloatingPoint","COMPLETION: UTT_IsFunction : [#clang::TypeTrait#]UTT_IsFunction","COMPLETION: UTT_IsFundamental : [#clang::TypeTrait#]UTT_IsFundamental","COMPLETION: UTT_IsIntegral : [#clang::TypeTrait#]UTT_IsIntegral","COMPLETION: UTT_IsInterfaceClass : [#clang::TypeTrait#]UTT_IsInterfaceClass","COMPLETION: UTT_IsLiteral : [#clang::TypeTrait#]UTT_IsLiteral","COMPLETION: UTT_IsLvalueReference : [#clang::TypeTrait#]UTT_IsLvalueReference","COMPLETION: UTT_IsMemberFunctionPointer : [#clang::TypeTrait#]UTT_IsMemberFunctionPointer","COMPLETION: UTT_IsMemberObjectPointer : [#clang::TypeTrait#]UTT_IsMemberObjectPointer","COMPLETION: UTT_IsMemberPointer : [#clang::TypeTrait#]UTT_IsMemberPointer","COMPLETION: UTT_IsNothrowDestructible : [#clang::TypeTrait#]UTT_IsNothrowDestructible","COMPLETION: UTT_IsObject : [#clang::TypeTrait#]UTT_IsObject","COMPLETION: UTT_IsPOD : [#clang::TypeTrait#]UTT_IsPOD","COMPLETION: UTT_IsPointer : [#clang::TypeTrait#]UTT_IsPointer","COMPLETION: UTT_IsPolymorphic : [#clang::TypeTrait#]UTT_IsPolymorphic","COMPLETION: UTT_IsReference : [#clang::TypeTrait#]UTT_IsReference","COMPLETION: UTT_IsRvalueReference : [#clang::TypeTrait#]UTT_IsRvalueReference","COMPLETION: UTT_IsScalar : [#clang::TypeTrait#]UTT_IsScalar","COMPLETION: UTT_IsSealed : [#clang::TypeTrait#]UTT_IsSealed","COMPLETION: UTT_IsSigned : [#clang::TypeTrait#]UTT_IsSigned","COMPLETION: UTT_IsStandardLayout : [#clang::TypeTrait#]UTT_IsStandardLayout","COMPLETION: UTT_IsTrivial : [#clang::TypeTrait#]UTT_IsTrivial","COMPLETION: UTT_IsTriviallyCopyable : [#clang::TypeTrait#]UTT_IsTriviallyCopyable","COMPLETION: UTT_IsTriviallyDestructible : [#clang::TypeTrait#]UTT_IsTriviallyDestructible","COMPLETION: UTT_IsUnion : [#clang::TypeTrait#]UTT_IsUnion","COMPLETION: UTT_IsUnsigned : [#clang::TypeTrait#]UTT_IsUnsigned","COMPLETION: UTT_IsVoid : [#clang::TypeTrait#]UTT_IsVoid","COMPLETION: UTT_IsVolatile : [#clang::TypeTrait#]UTT_IsVolatile","COMPLETION: UTT_Last : [#clang::TypeTrait#]UTT_Last","COMPLETION: UuidAttr : UuidAttr","COMPLETION: VAArgExpr : VAArgExpr","COMPLETION: ValueDecl : ValueDecl","COMPLETION: VAOptDefinitionContext : VAOptDefinitionContext","COMPLETION: VAOptExpansionContext : VAOptExpansionContext","COMPLETION: VarDecl : VarDecl","COMPLETION: VariableArrayType : VariableArrayType","COMPLETION: VariableArrayTypeLoc : VariableArrayTypeLoc","COMPLETION: VariablePattern : VariablePattern","COMPLETION: VariadicMacroScopeGuard : VariadicMacroScopeGuard","COMPLETION: VarTemplateDecl : VarTemplateDecl","COMPLETION: VarTemplatePartialSpecializationDecl : VarTemplatePartialSpecializationDecl","COMPLETION: VarTemplateSpecializationDecl : VarTemplateSpecializationDecl","COMPLETION: VecReturnAttr : VecReturnAttr","COMPLETION: VectorCallAttr : VectorCallAttr","COMPLETION: VectorType : VectorType","COMPLETION: VectorTypeLoc : VectorTypeLoc","COMPLETION: VecTypeHintAttr : VecTypeHintAttr","COMPLETION: VerifyDiagnosticConsumer : VerifyDiagnosticConsumer","COMPLETION: VerifyPCHAction : VerifyPCHAction","COMPLETION: VersionTuple : VersionTuple","COMPLETION: vfs : vfs","COMPLETION: VirtSpecifiers : VirtSpecifiers","COMPLETION: VirtualArchForCudaArch : [#CudaVirtualArch#]VirtualArchForCudaArch(\u003c#CudaArch A#\u003e)","COMPLETION: VirtualBaseInfo : VirtualBaseInfo","COMPLETION: Visibility : Visibility","COMPLETION: VisibilityAttr : VisibilityAttr","COMPLETION: VisibilityMacroDirective : VisibilityMacroDirective","COMPLETION: VisibleDeclConsumer : VisibleDeclConsumer","COMPLETION: VisibleModuleSet : VisibleModuleSet","COMPLETION: VisibleNoLinkage : [#clang::Linkage#]VisibleNoLinkage","COMPLETION: VK_LValue : [#clang::ExprValueKind#]VK_LValue","COMPLETION: VK_RValue : [#clang::ExprValueKind#]VK_RValue","COMPLETION: VK_XValue : [#clang::ExprValueKind#]VK_XValue","COMPLETION: VPtrInfo : VPtrInfo","COMPLETION: VPtrInfoVector : VPtrInfoVector","COMPLETION: VTableComponent : VTableComponent","COMPLETION: VTableContextBase : VTableContextBase","COMPLETION: VTableLayout : VTableLayout","COMPLETION: VTTBuilder : VTTBuilder","COMPLETION: VTTComponent : VTTComponent","COMPLETION: VTTVTable : VTTVTable","COMPLETION: WarnUnusedAttr : WarnUnusedAttr","COMPLETION: WarnUnusedResultAttr : WarnUnusedResultAttr","COMPLETION: WeakAttr : WeakAttr","COMPLETION: WeakImportAttr : WeakImportAttr","COMPLETION: WeakInfo : WeakInfo","COMPLETION: WeakRefAttr : WeakRefAttr","COMPLETION: WebAssembly : WebAssembly","COMPLETION: WhileStmt : WhileStmt","COMPLETION: WorkGroupSizeHintAttr : WorkGroupSizeHintAttr","COMPLETION: WrapperFrontendAction : WrapperFrontendAction","COMPLETION: WrittenBuiltinSpecs : WrittenBuiltinSpecs","COMPLETION: X86 : X86","COMPLETION: X86ForceAlignArgPointerAttr : X86ForceAlignArgPointerAttr","COMPLETION: XCore : XCore","COMPLETION: XRayFunctionFilter : XRayFunctionFilter","COMPLETION: XRayInstrumentAttr : XRayInstrumentAttr","COMPLETION: XRayLogArgsAttr : XRayLogArgsAttr","COMPLETION: Z3ConstraintsModel : [#clang::AnalysisConstraints#]Z3ConstraintsModel"],"clang::SourceLocation":["COMPLETION: dump : [#void#]dump(\u003c#const SourceManager \u0026SM#\u003e)[# const#]","COMPLETION: getFileLoc : [#SourceLocation#]getFileLoc(\u003c#unsigned int ID#\u003e)","COMPLETION: getFromPtrEncoding : [#SourceLocation#]getFromPtrEncoding(\u003c#const void *Encoding#\u003e)","COMPLETION: getFromRawEncoding : [#SourceLocation#]getFromRawEncoding(\u003c#unsigned int Encoding#\u003e)","COMPLETION: getLocWithOffset : [#SourceLocation#]getLocWithOffset(\u003c#int Offset#\u003e)[# const#]","COMPLETION: getMacroLoc : [#SourceLocation#]getMacroLoc(\u003c#unsigned int ID#\u003e)","COMPLETION: getOffset : [#unsigned int#]getOffset()[# const#]","COMPLETION: getPtrEncoding : [#void *#]getPtrEncoding()[# const#]","COMPLETION: getRawEncoding : [#unsigned int#]getRawEncoding()[# const#]","COMPLETION: ID : [#unsigned int#]ID","COMPLETION: isFileID : [#bool#]isFileID()[# const#]","COMPLETION: isInvalid : [#bool#]isInvalid()[# const#]","COMPLETION: isMacroID : [#bool#]isMacroID()[# const#]","COMPLETION: isPairOfFileLocations : [#bool#]isPairOfFileLocations(\u003c#SourceLocation Start#\u003e, \u003c#SourceLocation End#\u003e)","COMPLETION: isValid : [#bool#]isValid()[# const#]","COMPLETION: MacroIDBit : [#clang::SourceLocation::(anonymous)#]MacroIDBit","COMPLETION: operator= : [#SourceLocation \u0026#]operator=(\u003c#const SourceLocation \u0026#\u003e)","COMPLETION: operator= : [#SourceLocation \u0026#]operator=(\u003c#SourceLocation \u0026\u0026#\u003e)","COMPLETION: print : [#void#]print(\u003c#raw_ostream \u0026OS#\u003e, \u003c#const SourceManager \u0026SM#\u003e)[# const#]","COMPLETION: printToString : [#std::string#]printToString(\u003c#const SourceManager \u0026SM#\u003e)[# const#]","COMPLETION: SourceLocation : SourceLocation","COMPLETION: ~SourceLocation : [#void#]~SourceLocation()"],"clang::SourceManager":["COMPLETION: AddLineNote : [#void#]AddLineNote(\u003c#SourceLocation Loc#\u003e, \u003c#unsigned int LineNo#\u003e, \u003c#int FilenameID#\u003e, \u003c#bool IsFileEntry#\u003e, \u003c#bool IsFileExit#\u003e, \u003c#SrcMgr::CharacteristicKind FileKind#\u003e)","COMPLETION: AllocateLoadedSLocEntries : [#std::pair\u003cint, unsigned int\u003e#]AllocateLoadedSLocEntries(\u003c#unsigned int NumSLocEntries#\u003e, \u003c#unsigned int TotalSize#\u003e)","COMPLETION: associateFileChunkWithMacroArgExp : [#void#]associateFileChunkWithMacroArgExp(\u003c#MacroArgsMap \u0026MacroArgsCache#\u003e, \u003c#FileID FID#\u003e, \u003c#SourceLocation SpellLoc#\u003e, \u003c#SourceLocation ExpansionLoc#\u003e, \u003c#unsigned int ExpansionLength#\u003e)[# const#]","COMPLETION: clearIDTables : [#void#]clearIDTables()","COMPLETION: computeMacroArgsCache : [#void#]computeMacroArgsCache(\u003c#MacroArgsMap \u0026MacroArgsCache#\u003e, \u003c#FileID FID#\u003e)[# const#]","COMPLETION: ContentCacheAlloc : [#llvm::BumpPtrAllocator#]ContentCacheAlloc","COMPLETION: createExpansionLoc : [#SourceLocation#]createExpansionLoc(\u003c#SourceLocation Loc#\u003e, \u003c#SourceLocation ExpansionLocStart#\u003e, \u003c#SourceLocation ExpansionLocEnd#\u003e, \u003c#unsigned int TokLength#\u003e{#, \u003c#int LoadedID = 0#\u003e{#, \u003c#unsigned int LoadedOffset = 0#\u003e#}#})","COMPLETION: createExpansionLocImpl : [#SourceLocation#]createExpansionLocImpl(\u003c#const SrcMgr::ExpansionInfo \u0026Expansion#\u003e, \u003c#unsigned int TokLength#\u003e{#, \u003c#int LoadedID = 0#\u003e{#, \u003c#unsigned int LoadedOffset = 0#\u003e#}#})","COMPLETION: createFileID : [#FileID#]createFileID(\u003c#const FileEntry *SourceFile#\u003e, \u003c#SourceLocation IncludePos#\u003e, \u003c#SrcMgr::CharacteristicKind FileCharacter#\u003e{#, \u003c#int LoadedID = 0#\u003e{#, \u003c#unsigned int LoadedOffset = 0#\u003e#}#})","COMPLETION: createFileID : [#FileID#]createFileID(\u003c#std::unique_ptr\u003cllvm::MemoryBuffer\u003e Buffer#\u003e{#, \u003c#SrcMgr::CharacteristicKind FileCharacter = SrcMgr::C_User#\u003e{#, \u003c#int LoadedID = 0#\u003e{#, \u003c#unsigned int LoadedOffset = 0#\u003e{#, \u003c#SourceLocation IncludeLoc = SourceLocation()#\u003e#}#}#}#})","COMPLETION: createFileID : [#FileID#]createFileID(\u003c#UnownedTag#\u003e, \u003c#llvm::MemoryBuffer *Buffer#\u003e{#, \u003c#SrcMgr::CharacteristicKind FileCharacter = SrcMgr::C_User#\u003e{#, \u003c#int LoadedID = 0#\u003e{#, \u003c#unsigned int LoadedOffset = 0#\u003e{#, \u003c#SourceLocation IncludeLoc = SourceLocation()#\u003e#}#}#}#})","COMPLETION: createFileID : [#FileID#]createFileID(\u003c#const SrcMgr::ContentCache *File#\u003e, \u003c#SourceLocation IncludePos#\u003e, \u003c#SrcMgr::CharacteristicKind DirCharacter#\u003e, \u003c#int LoadedID#\u003e, \u003c#unsigned int LoadedOffset#\u003e)","COMPLETION: createMacroArgExpansionLoc : [#SourceLocation#]createMacroArgExpansionLoc(\u003c#SourceLocation Loc#\u003e, \u003c#SourceLocation ExpansionLoc#\u003e, \u003c#unsigned int TokLength#\u003e)","COMPLETION: createMemBufferContentCache : [#const SrcMgr::ContentCache *#]createMemBufferContentCache(\u003c#llvm::MemoryBuffer *Buf#\u003e, \u003c#bool DoNotFree#\u003e)","COMPLETION: CurrentLoadedOffset : [#unsigned int#]CurrentLoadedOffset","COMPLETION: Diag : [#DiagnosticsEngine \u0026#]Diag","COMPLETION: disableFileContentsOverride : [#void#]disableFileContentsOverride(\u003c#const FileEntry *File#\u003e)","COMPLETION: dump : [#void#]dump()[# const#]","COMPLETION: ExternalSLocEntries : [#ExternalSLocEntrySource *#]ExternalSLocEntries","COMPLETION: FakeBufferForRecovery : [#std::unique_ptr\u003cllvm::MemoryBuffer\u003e#]FakeBufferForRecovery","COMPLETION: FakeContentCacheForRecovery : [#std::unique_ptr\u003cSrcMgr::ContentCache\u003e#]FakeContentCacheForRecovery","COMPLETION: fileinfo_begin : [#fileinfo_iterator#]fileinfo_begin()[# const#]","COMPLETION: fileinfo_end : [#fileinfo_iterator#]fileinfo_end()[# const#]","COMPLETION: fileinfo_iterator : fileinfo_iterator","COMPLETION: FileInfos : [#llvm::DenseMap\u003cconst FileEntry *, SrcMgr::ContentCache *\u003e#]FileInfos","COMPLETION: FileMgr : [#FileManager \u0026#]FileMgr","COMPLETION: FilesAreTransient : [#bool#]FilesAreTransient","COMPLETION: getBuffer : [#llvm::MemoryBuffer *#]getBuffer(\u003c#FileID FID#\u003e, \u003c#SourceLocation Loc#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getBuffer : [#llvm::MemoryBuffer *#]getBuffer(\u003c#FileID FID#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getBufferData : [#StringRef#]getBufferData(\u003c#FileID FID#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getBufferName : [#StringRef#]getBufferName(\u003c#SourceLocation Loc#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getCharacterData : [#const char *#]getCharacterData(\u003c#SourceLocation SL#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getColumnNumber : [#unsigned int#]getColumnNumber(\u003c#FileID FID#\u003e, \u003c#unsigned int FilePos#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getContentCacheSize : [#size_t#]getContentCacheSize()[# const#]","COMPLETION: getDataStructureSizes : [#size_t#]getDataStructureSizes()[# const#]","COMPLETION: getDecomposedExpansionLoc : [#std::pair\u003cFileID, unsigned int\u003e#]getDecomposedExpansionLoc(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getDecomposedExpansionLocSlowCase : [#std::pair\u003cFileID, unsigned int\u003e#]getDecomposedExpansionLocSlowCase(\u003c#const SrcMgr::SLocEntry *E#\u003e)[# const#]","COMPLETION: getDecomposedIncludedLoc : [#std::pair\u003cFileID, unsigned int\u003e#]getDecomposedIncludedLoc(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: getDecomposedLoc : [#std::pair\u003cFileID, unsigned int\u003e#]getDecomposedLoc(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getDecomposedSpellingLoc : [#std::pair\u003cFileID, unsigned int\u003e#]getDecomposedSpellingLoc(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getDecomposedSpellingLocSlowCase : [#std::pair\u003cFileID, unsigned int\u003e#]getDecomposedSpellingLocSlowCase(\u003c#const SrcMgr::SLocEntry *E#\u003e, \u003c#unsigned int Offset#\u003e)[# const#]","COMPLETION: getDiagnostics : [#DiagnosticsEngine \u0026#]getDiagnostics()[# const#]","COMPLETION: getExpansionColumnNumber : [#unsigned int#]getExpansionColumnNumber(\u003c#SourceLocation Loc#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getExpansionLineNumber : [#unsigned int#]getExpansionLineNumber(\u003c#SourceLocation Loc#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getExpansionLoc : [#SourceLocation#]getExpansionLoc(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getExpansionLocSlowCase : [#SourceLocation#]getExpansionLocSlowCase(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getExpansionRange : [#std::pair\u003cSourceLocation, SourceLocation\u003e#]getExpansionRange(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getExpansionRange : [#SourceRange#]getExpansionRange(\u003c#SourceRange Range#\u003e)[# const#]","COMPLETION: getFakeBufferForRecovery : [#llvm::MemoryBuffer *#]getFakeBufferForRecovery()[# const#]","COMPLETION: getFakeContentCacheForRecovery : [#const SrcMgr::ContentCache *#]getFakeContentCacheForRecovery()[# const#]","COMPLETION: getFileCharacteristic : [#SrcMgr::CharacteristicKind#]getFileCharacteristic(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getFileEntryForID : [#const FileEntry *#]getFileEntryForID(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: getFileEntryForSLocEntry : [#const FileEntry *#]getFileEntryForSLocEntry(\u003c#const SrcMgr::SLocEntry \u0026sloc#\u003e)[# const#]","COMPLETION: getFileID : [#FileID#]getFileID(\u003c#SourceLocation SpellingLoc#\u003e)[# const#]","COMPLETION: getFileIDLoaded : [#FileID#]getFileIDLoaded(\u003c#unsigned int SLocOffset#\u003e)[# const#]","COMPLETION: getFileIDLocal : [#FileID#]getFileIDLocal(\u003c#unsigned int SLocOffset#\u003e)[# const#]","COMPLETION: getFileIDSize : [#unsigned int#]getFileIDSize(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: getFileIDSlow : [#FileID#]getFileIDSlow(\u003c#unsigned int SLocOffset#\u003e)[# const#]","COMPLETION: getFileLoc : [#SourceLocation#]getFileLoc(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getFileLocSlowCase : [#SourceLocation#]getFileLocSlowCase(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getFileManager : [#FileManager \u0026#]getFileManager()[# const#]","COMPLETION: getFilename : [#StringRef#]getFilename(\u003c#SourceLocation SpellingLoc#\u003e)[# const#]","COMPLETION: getFileOffset : [#unsigned int#]getFileOffset(\u003c#SourceLocation SpellingLoc#\u003e)[# const#]","COMPLETION: getImmediateExpansionRange : [#std::pair\u003cSourceLocation, SourceLocation\u003e#]getImmediateExpansionRange(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getImmediateMacroCallerLoc : [#SourceLocation#]getImmediateMacroCallerLoc(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getImmediateSpellingLoc : [#SourceLocation#]getImmediateSpellingLoc(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getInBeforeInTUCache : [#InBeforeInTUCacheEntry \u0026#]getInBeforeInTUCache(\u003c#FileID LFID#\u003e, \u003c#FileID RFID#\u003e)[# const#]","COMPLETION: getIncludeLoc : [#SourceLocation#]getIncludeLoc(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: getLineNumber : [#unsigned int#]getLineNumber(\u003c#FileID FID#\u003e, \u003c#unsigned int FilePos#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getLineTable : [#LineTableInfo \u0026#]getLineTable()","COMPLETION: getLineTableFilenameID : [#unsigned int#]getLineTableFilenameID(\u003c#StringRef Str#\u003e)","COMPLETION: getLoadedSLocEntry : [#const SrcMgr::SLocEntry \u0026#]getLoadedSLocEntry(\u003c#unsigned int Index#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getLoadedSLocEntryByID : [#const SrcMgr::SLocEntry \u0026#]getLoadedSLocEntryByID(\u003c#int ID#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getLocalSLocEntry : [#const SrcMgr::SLocEntry \u0026#]getLocalSLocEntry(\u003c#unsigned int Index#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getLocForEndOfFile : [#SourceLocation#]getLocForEndOfFile(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: getLocForStartOfFile : [#SourceLocation#]getLocForStartOfFile(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: getMacroArgExpandedLocation : [#SourceLocation#]getMacroArgExpandedLocation(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getMainFileID : [#FileID#]getMainFileID()[# const#]","COMPLETION: getMemoryBufferForFile : [#llvm::MemoryBuffer *#]getMemoryBufferForFile(\u003c#const FileEntry *File#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})","COMPLETION: getMemoryBufferSizes : [#MemoryBufferSizes#]getMemoryBufferSizes()[# const#]","COMPLETION: getModuleBuildStack : [#ModuleBuildStack#]getModuleBuildStack()[# const#]","COMPLETION: getModuleImportLoc : [#std::pair\u003cSourceLocation, StringRef\u003e#]getModuleImportLoc(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getNextFileID : [#FileID#]getNextFileID(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: getNextLocalOffset : [#unsigned int#]getNextLocalOffset()[# const#]","COMPLETION: getNumCreatedFIDsForFileID : [#unsigned int#]getNumCreatedFIDsForFileID(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: getOrCreateContentCache : [#const SrcMgr::ContentCache *#]getOrCreateContentCache(\u003c#const FileEntry *SourceFile#\u003e{#, \u003c#bool isSystemFile = false#\u003e#})","COMPLETION: getOrCreateFileID : [#FileID#]getOrCreateFileID(\u003c#const FileEntry *SourceFile#\u003e, \u003c#SrcMgr::CharacteristicKind FileCharacter#\u003e)","COMPLETION: getOverriddenFilesInfo : [#OverriddenFilesInfoTy \u0026#]getOverriddenFilesInfo()","COMPLETION: getPreambleFileID : [#FileID#]getPreambleFileID()[# const#]","COMPLETION: getPresumedColumnNumber : [#unsigned int#]getPresumedColumnNumber(\u003c#SourceLocation Loc#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getPresumedLineNumber : [#unsigned int#]getPresumedLineNumber(\u003c#SourceLocation Loc#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getPresumedLoc : [#PresumedLoc#]getPresumedLoc(\u003c#SourceLocation Loc#\u003e{#, \u003c#bool UseLineDirectives = true#\u003e#})[# const#]","COMPLETION: getPreviousFileID : [#FileID#]getPreviousFileID(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: getSLocEntry : [#const SrcMgr::SLocEntry \u0026#]getSLocEntry(\u003c#FileID FID#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getSLocEntryByID : [#const SrcMgr::SLocEntry \u0026#]getSLocEntryByID(\u003c#int ID#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getSpellingColumnNumber : [#unsigned int#]getSpellingColumnNumber(\u003c#SourceLocation Loc#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getSpellingLineNumber : [#unsigned int#]getSpellingLineNumber(\u003c#SourceLocation Loc#\u003e{#, \u003c#bool *Invalid = nullptr#\u003e#})[# const#]","COMPLETION: getSpellingLoc : [#SourceLocation#]getSpellingLoc(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: getSpellingLocSlowCase : [#SourceLocation#]getSpellingLocSlowCase(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: hasFileInfo : [#bool#]hasFileInfo(\u003c#const FileEntry *File#\u003e)[# const#]","COMPLETION: hasLineTable : [#bool#]hasLineTable()[# const#]","COMPLETION: IBTUCache : [#InBeforeInTUCache#]IBTUCache","COMPLETION: IBTUCacheOverflow : [#InBeforeInTUCacheEntry#]IBTUCacheOverflow","COMPLETION: InBeforeInTUCache : InBeforeInTUCache","COMPLETION: IncludedLocMap : [#llvm::DenseMap\u003cFileID, std::pair\u003cFileID, unsigned int\u003e \u003e#]IncludedLocMap","COMPLETION: initializeForReplay : [#void#]initializeForReplay(\u003c#const SourceManager \u0026Old#\u003e)","COMPLETION: isAtEndOfImmediateMacroExpansion : [#bool#]isAtEndOfImmediateMacroExpansion(\u003c#SourceLocation Loc#\u003e{#, \u003c#SourceLocation *MacroEnd = nullptr#\u003e#})[# const#]","COMPLETION: isAtStartOfImmediateMacroExpansion : [#bool#]isAtStartOfImmediateMacroExpansion(\u003c#SourceLocation Loc#\u003e{#, \u003c#SourceLocation *MacroBegin = nullptr#\u003e#})[# const#]","COMPLETION: isBeforeInSLocAddrSpace : [#bool#]isBeforeInSLocAddrSpace(\u003c#SourceLocation LHS#\u003e, \u003c#SourceLocation RHS#\u003e)[# const#]","COMPLETION: isBeforeInSLocAddrSpace : [#bool#]isBeforeInSLocAddrSpace(\u003c#SourceLocation LHS#\u003e, \u003c#unsigned int RHS#\u003e)[# const#]","COMPLETION: isBeforeInTranslationUnit : [#bool#]isBeforeInTranslationUnit(\u003c#SourceLocation LHS#\u003e, \u003c#SourceLocation RHS#\u003e)[# const#]","COMPLETION: IsBeforeInTUCacheKey : IsBeforeInTUCacheKey","COMPLETION: isFileOverridden : [#bool#]isFileOverridden(\u003c#const FileEntry *File#\u003e)[# const#]","COMPLETION: isInExternCSystemHeader : [#bool#]isInExternCSystemHeader(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: isInFileID : [#bool#]isInFileID(\u003c#SourceLocation Loc#\u003e, \u003c#FileID FID#\u003e{#, \u003c#unsigned int *RelativeOffset = nullptr#\u003e#})[# const#]","COMPLETION: isInMainFile : [#bool#]isInMainFile(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: isInSameSLocAddrSpace : [#bool#]isInSameSLocAddrSpace(\u003c#SourceLocation LHS#\u003e, \u003c#SourceLocation RHS#\u003e, \u003c#int *RelativeOffset#\u003e)[# const#]","COMPLETION: isInSLocAddrSpace : [#bool#]isInSLocAddrSpace(\u003c#SourceLocation Loc#\u003e, \u003c#SourceLocation Start#\u003e, \u003c#unsigned int Length#\u003e{#, \u003c#unsigned int *RelativeOffset = nullptr#\u003e#})[# const#]","COMPLETION: isInSystemHeader : [#bool#]isInSystemHeader(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: isInSystemMacro : [#bool#]isInSystemMacro(\u003c#SourceLocation loc#\u003e)[# const#]","COMPLETION: isInTheSameTranslationUnit : [#std::pair\u003cbool, bool\u003e#]isInTheSameTranslationUnit(\u003c#std::pair\u003cFileID, unsigned int\u003e \u0026LOffs#\u003e, \u003c#std::pair\u003cFileID, unsigned int\u003e \u0026ROffs#\u003e)[# const#]","COMPLETION: isLoadedFileID : [#bool#]isLoadedFileID(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: isLoadedSourceLocation : [#bool#]isLoadedSourceLocation(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: isLocalFileID : [#bool#]isLocalFileID(\u003c#FileID FID#\u003e)[# const#]","COMPLETION: isLocalSourceLocation : [#bool#]isLocalSourceLocation(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: isMacroArgExpansion : [#bool#]isMacroArgExpansion(\u003c#SourceLocation Loc#\u003e{#, \u003c#SourceLocation *StartLoc = nullptr#\u003e#})[# const#]","COMPLETION: isMacroBodyExpansion : [#bool#]isMacroBodyExpansion(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: isOffsetInFileID : [#bool#]isOffsetInFileID(\u003c#FileID FID#\u003e, \u003c#unsigned int SLocOffset#\u003e)[# const#]","COMPLETION: isPointWithin : [#bool#]isPointWithin(\u003c#SourceLocation Location#\u003e, \u003c#SourceLocation Start#\u003e, \u003c#SourceLocation End#\u003e)[# const#]","COMPLETION: isWrittenInMainFile : [#bool#]isWrittenInMainFile(\u003c#SourceLocation Loc#\u003e)[# const#]","COMPLETION: isWrittenInSameFile : [#bool#]isWrittenInSameFile(\u003c#SourceLocation Loc1#\u003e, \u003c#SourceLocation Loc2#\u003e)[# const#]","COMPLETION: LastFileIDLookup : [#FileID#]LastFileIDLookup","COMPLETION: LastLineNoContentCache : [#SrcMgr::ContentCache *#]LastLineNoContentCache","COMPLETION: LastLineNoFileIDQuery : [#FileID#]LastLineNoFileIDQuery","COMPLETION: LastLineNoFilePos : [#unsigned int#]LastLineNoFilePos","COMPLETION: LastLineNoResult : [#unsigned int#]LastLineNoResult","COMPLETION: LineTable : [#LineTableInfo *#]LineTable","COMPLETION: loaded_sloc_entry_size : [#unsigned int#]loaded_sloc_entry_size()[# const#]","COMPLETION: LoadedSLocEntryTable : [#SmallVector\u003cSrcMgr::SLocEntry, 0\u003e#]LoadedSLocEntryTable","COMPLETION: loadSLocEntry : [#const SrcMgr::SLocEntry \u0026#]loadSLocEntry(\u003c#unsigned int Index#\u003e, \u003c#bool *Invalid#\u003e)[# const#]","COMPLETION: local_sloc_entry_size : [#unsigned int#]local_sloc_entry_size()[# const#]","COMPLETION: LocalSLocEntryTable : [#SmallVector\u003cSrcMgr::SLocEntry, 0\u003e#]LocalSLocEntryTable","COMPLETION: MacroArgsCacheMap : [#llvm::DenseMap\u003cFileID, std::unique_ptr\u003cMacroArgsMap\u003e \u003e#]MacroArgsCacheMap","COMPLETION: MacroArgsMap : MacroArgsMap","COMPLETION: MainFileID : [#FileID#]MainFileID","COMPLETION: MaxLoadedOffset : [#const unsigned int#]MaxLoadedOffset","COMPLETION: MemBufferInfos : [#std::vector\u003cSrcMgr::ContentCache *\u003e#]MemBufferInfos","COMPLETION: MemoryBufferSizes : MemoryBufferSizes","COMPLETION: NextLocalOffset : [#unsigned int#]NextLocalOffset","COMPLETION: NumBinaryProbes : [#unsigned int#]NumBinaryProbes","COMPLETION: NumLinearScans : [#unsigned int#]NumLinearScans","COMPLETION: operator= : [#SourceManager \u0026#]operator=(\u003c#const SourceManager \u0026#\u003e)","COMPLETION: operator= (Hidden) : [#RefCountedBase\u003cSourceManager\u003e \u0026#]llvm::RefCountedBase\u003cSourceManager\u003e::operator=(\u003c#const RefCountedBase\u003cSourceManager\u003e \u0026#\u003e)","COMPLETION: OverriddenFilesInfo : [#std::unique_ptr\u003cOverriddenFilesInfoTy\u003e#]OverriddenFilesInfo","COMPLETION: OverriddenFilesInfoTy : OverriddenFilesInfoTy","COMPLETION: overrideFileContents : [#void#]overrideFileContents(\u003c#const FileEntry *SourceFile#\u003e, \u003c#llvm::MemoryBuffer *Buffer#\u003e, \u003c#bool DoNotFree#\u003e)","COMPLETION: overrideFileContents : [#void#]overrideFileContents(\u003c#const FileEntry *SourceFile#\u003e, \u003c#std::unique_ptr\u003cllvm::MemoryBuffer\u003e Buffer#\u003e)","COMPLETION: overrideFileContents : [#void#]overrideFileContents(\u003c#const FileEntry *SourceFile#\u003e, \u003c#const FileEntry *NewFile#\u003e)","COMPLETION: OverridenFilesKeepOriginalName : [#bool#]OverridenFilesKeepOriginalName","COMPLETION: PreambleFileID : [#FileID#]PreambleFileID","COMPLETION: PrintStats : [#void#]PrintStats()[# const#]","COMPLETION: pushModuleBuildStack : [#void#]pushModuleBuildStack(\u003c#StringRef moduleName#\u003e, \u003c#FullSourceLoc importLoc#\u003e)","COMPLETION: RefCount : [#unsigned int#]RefCount","COMPLETION: RefCountedBase : RefCountedBase","COMPLETION: Release : [#void#]Release()[# const#]","COMPLETION: Retain : [#void#]Retain()[# const#]","COMPLETION: setAllFilesAreTransient : [#void#]setAllFilesAreTransient(\u003c#bool Transient#\u003e)","COMPLETION: setExternalSLocEntrySource : [#void#]setExternalSLocEntrySource(\u003c#ExternalSLocEntrySource *Source#\u003e)","COMPLETION: setFileIsTransient : [#void#]setFileIsTransient(\u003c#const FileEntry *SourceFile#\u003e)","COMPLETION: setMainFileID : [#void#]setMainFileID(\u003c#FileID FID#\u003e)","COMPLETION: setModuleBuildStack : [#void#]setModuleBuildStack(\u003c#ModuleBuildStack stack#\u003e)","COMPLETION: setNumCreatedFIDsForFileID : [#void#]setNumCreatedFIDsForFileID(\u003c#FileID FID#\u003e, \u003c#unsigned int NumFIDs#\u003e)[# const#]","COMPLETION: setOverridenFilesKeepOriginalName : [#void#]setOverridenFilesKeepOriginalName(\u003c#bool value#\u003e)","COMPLETION: setPreambleFileID : [#void#]setPreambleFileID(\u003c#FileID Preamble#\u003e)","COMPLETION: SLocEntryLoaded : [#llvm::BitVector#]SLocEntryLoaded","COMPLETION: SourceManager : SourceManager","COMPLETION: StoredModuleBuildStack : [#SmallVector\u003cstd::pair\u003cstd::string, FullSourceLoc\u003e, 2\u003e#]StoredModuleBuildStack","COMPLETION: translateFile : [#FileID#]translateFile(\u003c#const FileEntry *SourceFile#\u003e)[# const#]","COMPLETION: translateFileLineCol : [#SourceLocation#]translateFileLineCol(\u003c#const FileEntry *SourceFile#\u003e, \u003c#unsigned int Line#\u003e, \u003c#unsigned int Col#\u003e)[# const#]","COMPLETION: translateLineCol : [#SourceLocation#]translateLineCol(\u003c#FileID FID#\u003e, \u003c#unsigned int Line#\u003e, \u003c#unsigned int Col#\u003e)[# const#]","COMPLETION: Unowned : [#clang::SourceManager::UnownedTag#]Unowned","COMPLETION: UnownedTag : UnownedTag","COMPLETION: UserFilesAreVolatile : [#bool#]UserFilesAreVolatile","COMPLETION: userFilesAreVolatile : [#bool#]userFilesAreVolatile()[# const#]","COMPLETION: ~RefCountedBase : [#void#]~RefCountedBase()","COMPLETION: ~SourceManager : [#void#]~SourceManager()"],"clang::SourceRange":["COMPLETION: B : [#SourceLocation#]B","COMPLETION: E : [#SourceLocation#]E","COMPLETION: getBegin : [#SourceLocation#]getBegin()[# const#]","COMPLETION: getEnd : [#SourceLocation#]getEnd()[# const#]","COMPLETION: isInvalid : [#bool#]isInvalid()[# const#]","COMPLETION: isValid : [#bool#]isValid()[# const#]","COMPLETION: operator!= : [#bool#]operator!=(\u003c#const SourceRange \u0026X#\u003e)[# const#]","COMPLETION: operator= : [#SourceRange \u0026#]operator=(\u003c#const SourceRange \u0026#\u003e)","COMPLETION: operator= : [#SourceRange \u0026#]operator=(\u003c#SourceRange \u0026\u0026#\u003e)","COMPLETION: operator== : [#bool#]operator==(\u003c#const SourceRange \u0026X#\u003e)[# const#]","COMPLETION: setBegin : [#void#]setBegin(\u003c#SourceLocation b#\u003e)","COMPLETION: setEnd : [#void#]setEnd(\u003c#SourceLocation e#\u003e)","COMPLETION: SourceRange : SourceRange","COMPLETION: ~SourceRange : [#void#]~SourceRange()"],"clang::VarDecl":["COMPLETION: Access : [#unsigned int#]Access","COMPLETION: AccessDeclContextSanity : [#bool#]AccessDeclContextSanity()[# const#]","COMPLETION: AccessSpec : [#clang::Decl::Kind#]AccessSpec","COMPLETION: add : [#void#]add(\u003c#Kind k#\u003e)","COMPLETION: addAttr : [#void#]addAttr(\u003c#Attr *A#\u003e)","COMPLETION: AllBits : [#unsigned int#]AllBits","COMPLETION: anchor : [#void#]anchor()","COMPLETION: anchor (Hidden) : [#void#]clang::NamedDecl::anchor()","COMPLETION: attr_begin : [#attr_iterator#]attr_begin()[# const#]","COMPLETION: attr_end : [#attr_iterator#]attr_end()[# const#]","COMPLETION: attr_iterator : attr_iterator","COMPLETION: attr_range : attr_range","COMPLETION: attrs : [#attr_range#]attrs()[# const#]","COMPLETION: Binding : [#clang::Decl::Kind#]Binding","COMPLETION: Block : [#clang::Decl::Kind#]Block","COMPLETION: BuiltinTemplate : [#clang::Decl::Kind#]BuiltinTemplate","COMPLETION: CacheValidAndLinkage : [#unsigned int#]CacheValidAndLinkage","COMPLETION: CallInit : [#clang::VarDecl::InitializationStyle#]CallInit","COMPLETION: canBeWeakImported : [#bool#]canBeWeakImported(\u003c#bool \u0026IsDefinition#\u003e)[# const#]","COMPLETION: Captured : [#clang::Decl::Kind#]Captured","COMPLETION: castFromDeclContext : [#Decl *#]castFromDeclContext(\u003c#const DeclContext *#\u003e)","COMPLETION: castToDeclContext : [#DeclContext *#]castToDeclContext(\u003c#const Decl *#\u003e)","COMPLETION: checkInitIsICE : [#bool#]checkInitIsICE()[# const#]","COMPLETION: CInit : [#clang::VarDecl::InitializationStyle#]CInit","COMPLETION: classof : [#bool#]classof(\u003c#const Decl *D#\u003e)","COMPLETION: classof (Hidden) : [#bool#]clang::DeclaratorDecl::classof(\u003c#const Decl *D#\u003e)","COMPLETION: classof (Hidden) : [#bool#]clang::ValueDecl::classof(\u003c#const Decl *D#\u003e)","COMPLETION: classof (Hidden) : [#bool#]clang::NamedDecl::classof(\u003c#const Decl *D#\u003e)","COMPLETION: classofKind : [#bool#]classofKind(\u003c#Kind K#\u003e)","COMPLETION: classofKind (Hidden) : [#bool#]clang::DeclaratorDecl::classofKind(\u003c#Kind K#\u003e)","COMPLETION: classofKind (Hidden) : [#bool#]clang::ValueDecl::classofKind(\u003c#Kind K#\u003e)","COMPLETION: classofKind (Hidden) : [#bool#]clang::NamedDecl::classofKind(\u003c#Kind K#\u003e)","COMPLETION: classofKind (Hidden) : [#bool#]clang::Decl::classofKind(\u003c#Kind K#\u003e)","COMPLETION: ClassScopeFunctionSpecialization : [#clang::Decl::Kind#]ClassScopeFunctionSpecialization","COMPLETION: ClassTemplate : [#clang::Decl::Kind#]ClassTemplate","COMPLETION: ClassTemplatePartialSpecialization : [#clang::Decl::Kind#]ClassTemplatePartialSpecialization","COMPLETION: ClassTemplateSpecialization : [#clang::Decl::Kind#]ClassTemplateSpecialization","COMPLETION: ConstructorUsingShadow : [#clang::Decl::Kind#]ConstructorUsingShadow","COMPLETION: Create : [#VarDecl *#]Create(\u003c#ASTContext \u0026C#\u003e, \u003c#DeclContext *DC#\u003e, \u003c#SourceLocation StartLoc#\u003e, \u003c#SourceLocation IdLoc#\u003e, \u003c#IdentifierInfo *Id#\u003e, \u003c#QualType T#\u003e, \u003c#TypeSourceInfo *TInfo#\u003e, \u003c#StorageClass S#\u003e)","COMPLETION: CreateDeserialized : [#VarDecl *#]CreateDeserialized(\u003c#ASTContext \u0026C#\u003e, \u003c#unsigned int ID#\u003e)","COMPLETION: CXXConstructor : [#clang::Decl::Kind#]CXXConstructor","COMPLETION: CXXConversion : [#clang::Decl::Kind#]CXXConversion","COMPLETION: CXXDeductionGuide : [#clang::Decl::Kind#]CXXDeductionGuide","COMPLETION: CXXDestructor : [#clang::Decl::Kind#]CXXDestructor","COMPLETION: CXXMethod : [#clang::Decl::Kind#]CXXMethod","COMPLETION: CXXRecord : [#clang::Decl::Kind#]CXXRecord","COMPLETION: DAK_None : [#clang::VarDecl::DefaultArgKind#]DAK_None","COMPLETION: DAK_Normal : [#clang::VarDecl::DefaultArgKind#]DAK_Normal","COMPLETION: DAK_Uninstantiated : [#clang::VarDecl::DefaultArgKind#]DAK_Uninstantiated","COMPLETION: DAK_Unparsed : [#clang::VarDecl::DefaultArgKind#]DAK_Unparsed","COMPLETION: Decl : Decl","COMPLETION: DeclarationOnly : [#clang::VarDecl::DefinitionKind#]DeclarationOnly","COMPLETION: declarationReplaces : [#bool#]declarationReplaces(\u003c#NamedDecl *OldD#\u003e{#, \u003c#bool IsKnownNewer = true#\u003e#})[# const#]","COMPLETION: DeclaratorDecl : DeclaratorDecl","COMPLETION: DeclCtx : [#llvm::PointerUnion\u003cDeclContext *, MultipleDC *\u003e#]DeclCtx","COMPLETION: DeclInfo : [#llvm::PointerUnion\u003cTypeSourceInfo *, ExtInfo *\u003e#]DeclInfo","COMPLETION: DeclKind : [#unsigned int#]DeclKind","COMPLETION: DeclLink : DeclLink","COMPLETION: DeclType : [#QualType#]DeclType","COMPLETION: Decomposition : [#clang::Decl::Kind#]Decomposition","COMPLETION: DefaultArgKind : DefaultArgKind","COMPLETION: Definition : [#clang::VarDecl::DefinitionKind#]Definition","COMPLETION: DefinitionKind : DefinitionKind","COMPLETION: demoteThisDefinitionToDeclaration : [#void#]demoteThisDefinitionToDeclaration()","COMPLETION: dropAttr : [#void#]dropAttr\u003c\u003c#typename T#\u003e\u003e()","COMPLETION: dropAttrs : [#void#]dropAttrs()","COMPLETION: dump : [#void#]dump()[# const#]","COMPLETION: dump : [#void#]dump(\u003c#raw_ostream \u0026Out#\u003e{#, \u003c#bool Deserialize = false#\u003e#})[# const#]","COMPLETION: dumpColor : [#void#]dumpColor()[# const#]","COMPLETION: Empty : [#clang::Decl::Kind#]Empty","COMPLETION: EmptyShell : EmptyShell","COMPLETION: EnableStatistics : [#void#]EnableStatistics()","COMPLETION: ensureEvaluatedStmt : [#EvaluatedStmt *#]ensureEvaluatedStmt()[# const#]","COMPLETION: Enum : [#clang::Decl::Kind#]Enum","COMPLETION: EnumConstant : [#clang::Decl::Kind#]EnumConstant","COMPLETION: evaluateValue : [#APValue *#]evaluateValue()[# const#]","COMPLETION: evaluateValue : [#APValue *#]evaluateValue(\u003c#SmallVectorImpl\u003cPartialDiagnosticAt\u003e \u0026Notes#\u003e)[# const#]","COMPLETION: ExplicitVisibilityKind : ExplicitVisibilityKind","COMPLETION: Export : [#clang::Decl::Kind#]Export","COMPLETION: ExternCContext : [#clang::Decl::Kind#]ExternCContext","COMPLETION: ExtInfo : ExtInfo","COMPLETION: Field : [#clang::Decl::Kind#]Field","COMPLETION: FileScopeAsm : [#clang::Decl::Kind#]FileScopeAsm","COMPLETION: First : [#VarDecl *#]First","COMPLETION: firstClassTemplateSpecialization : [#clang::Decl::Kind#]firstClassTemplateSpecialization","COMPLETION: firstCXXMethod : [#clang::Decl::Kind#]firstCXXMethod","COMPLETION: firstCXXRecord : [#clang::Decl::Kind#]firstCXXRecord","COMPLETION: firstDecl : [#clang::Decl::Kind#]firstDecl","COMPLETION: firstDeclarator : [#clang::Decl::Kind#]firstDeclarator","COMPLETION: firstField : [#clang::Decl::Kind#]firstField","COMPLETION: firstFunction : [#clang::Decl::Kind#]firstFunction","COMPLETION: firstNamed : [#clang::Decl::Kind#]firstNamed","COMPLETION: firstObjCContainer : [#clang::Decl::Kind#]firstObjCContainer","COMPLETION: firstObjCImpl : [#clang::Decl::Kind#]firstObjCImpl","COMPLETION: firstRecord : [#clang::Decl::Kind#]firstRecord","COMPLETION: firstRedeclarableTemplate : [#clang::Decl::Kind#]firstRedeclarableTemplate","COMPLETION: firstTag : [#clang::Decl::Kind#]firstTag","COMPLETION: firstTemplate : [#clang::Decl::Kind#]firstTemplate","COMPLETION: firstType : [#clang::Decl::Kind#]firstType","COMPLETION: firstTypedefName : [#clang::Decl::Kind#]firstTypedefName","COMPLETION: firstUsingShadow : [#clang::Decl::Kind#]firstUsingShadow","COMPLETION: firstValue : [#clang::Decl::Kind#]firstValue","COMPLETION: firstVar : [#clang::Decl::Kind#]firstVar","COMPLETION: firstVarTemplateSpecialization : [#clang::Decl::Kind#]firstVarTemplateSpecialization","COMPLETION: FOK_Declared : [#clang::Decl::FriendObjectKind#]FOK_Declared","COMPLETION: FOK_None : [#clang::Decl::FriendObjectKind#]FOK_None","COMPLETION: FOK_Undeclared : [#clang::Decl::FriendObjectKind#]FOK_Undeclared","COMPLETION: Friend : [#clang::Decl::Kind#]Friend","COMPLETION: FriendObjectKind : FriendObjectKind","COMPLETION: FriendTemplate : [#clang::Decl::Kind#]FriendTemplate","COMPLETION: FromASTFile : [#unsigned int#]FromASTFile","COMPLETION: Function : [#clang::Decl::Kind#]Function","COMPLETION: FunctionTemplate : [#clang::Decl::Kind#]FunctionTemplate","COMPLETION: getAccess : [#AccessSpecifier#]getAccess()[# const#]","COMPLETION: getAccessUnsafe : [#AccessSpecifier#]getAccessUnsafe()[# const#]","COMPLETION: getActingDefinition : [#VarDecl *#]getActingDefinition()","COMPLETION: getActingDefinition : [#const VarDecl *#]getActingDefinition()[# const#]","COMPLETION: getAnyInitializer : [#const Expr *#]getAnyInitializer()[# const#]","COMPLETION: getAnyInitializer : [#const Expr *#]getAnyInitializer(\u003c#const VarDecl *\u0026D#\u003e)[# const#]","COMPLETION: getAsFunction : [#FunctionDecl *#]getAsFunction()","COMPLETION: getAsFunction : [#const FunctionDecl *#]getAsFunction()[# const#]","COMPLETION: getASTContext : [#ASTContext \u0026#]getASTContext()[# const#]","COMPLETION: getASTMutationListener : [#ASTMutationListener *#]getASTMutationListener()[# const#]","COMPLETION: getAttr : [#T *#]getAttr\u003c\u003c#typename T#\u003e\u003e()[# const#]","COMPLETION: getAttrs : [#AttrVec \u0026#]getAttrs()","COMPLETION: getAttrs : [#const AttrVec \u0026#]getAttrs()[# const#]","COMPLETION: getAvailability : [#AvailabilityResult#]getAvailability({#\u003c#std::string *Message = nullptr#\u003e{#, \u003c#VersionTuple EnclosingVersion = VersionTuple()#\u003e#}#})[# const#]","COMPLETION: getBody : [#Stmt *#]getBody()[# const#]","COMPLETION: getBodyRBrace : [#SourceLocation#]getBodyRBrace()[# const#]","COMPLETION: getCachedLinkage : [#Linkage#]getCachedLinkage()[# const#]","COMPLETION: getCanonicalDecl : [#VarDecl *#]getCanonicalDecl()","COMPLETION: getCanonicalDecl : [#const VarDecl *#]getCanonicalDecl()[# const#]","COMPLETION: getCanonicalDecl (Hidden) : [#Decl *#]clang::Decl::getCanonicalDecl()","COMPLETION: getCanonicalDecl (Hidden) : [#const Decl *#]clang::Decl::getCanonicalDecl()[# const#]","COMPLETION: getDeclContext : [#DeclContext *#]getDeclContext()","COMPLETION: getDeclContext : [#const DeclContext *#]getDeclContext()[# const#]","COMPLETION: getDeclKindName : [#const char *#]getDeclKindName()[# const#]","COMPLETION: getDeclName : [#DeclarationName#]getDeclName()[# const#]","COMPLETION: getDefiningAttr : [#const Attr *#]getDefiningAttr()[# const#]","COMPLETION: getDefinition : [#VarDecl *#]getDefinition(\u003c#ASTContext \u0026#\u003e)","COMPLETION: getDefinition : [#const VarDecl *#]getDefinition(\u003c#ASTContext \u0026C#\u003e)[# const#]","COMPLETION: getDefinition : [#VarDecl *#]getDefinition()","COMPLETION: getDefinition : [#const VarDecl *#]getDefinition()[# const#]","COMPLETION: getDescribedTemplate : [#TemplateDecl *#]getDescribedTemplate()[# const#]","COMPLETION: getDescribedVarTemplate : [#VarTemplateDecl *#]getDescribedVarTemplate()[# const#]","COMPLETION: getEvaluatedValue : [#APValue *#]getEvaluatedValue()[# const#]","COMPLETION: getExplicitVisibility : [#Optional\u003cVisibility\u003e#]getExplicitVisibility(\u003c#ExplicitVisibilityKind kind#\u003e)[# const#]","COMPLETION: getExternalSourceSymbolAttr : [#ExternalSourceSymbolAttr *#]getExternalSourceSymbolAttr()[# const#]","COMPLETION: getExtInfo : [#ExtInfo *#]getExtInfo()","COMPLETION: getExtInfo : [#const ExtInfo *#]getExtInfo()[# const#]","COMPLETION: getFirstDecl : [#VarDecl *#]getFirstDecl()","COMPLETION: getFirstDecl : [#const VarDecl *#]getFirstDecl()[# const#]","COMPLETION: getFormalLinkage : [#Linkage#]getFormalLinkage()[# const#]","COMPLETION: getFriendObjectKind : [#FriendObjectKind#]getFriendObjectKind()[# const#]","COMPLETION: getFunctionType : [#const FunctionType *#]getFunctionType({#\u003c#bool BlocksToo = true#\u003e#})[# const#]","COMPLETION: getGlobalID : [#unsigned int#]getGlobalID()[# const#]","COMPLETION: getIdentifier : [#IdentifierInfo *#]getIdentifier()[# const#]","COMPLETION: getIdentifierNamespace : [#unsigned int#]getIdentifierNamespace()[# const#]","COMPLETION: getIdentifierNamespaceForKind : [#unsigned int#]getIdentifierNamespaceForKind(\u003c#Kind DK#\u003e)","COMPLETION: getImportedOwningModule : [#Module *#]getImportedOwningModule()[# const#]","COMPLETION: getInit : [#const Expr *#]getInit()[# const#]","COMPLETION: getInit : [#Expr *#]getInit()","COMPLETION: getInitAddress : [#Stmt **#]getInitAddress()","COMPLETION: getInitStyle : [#InitializationStyle#]getInitStyle()[# const#]","COMPLETION: getInnerLocStart : [#SourceLocation#]getInnerLocStart()[# const#]","COMPLETION: getInstantiatedFromStaticDataMember : [#VarDecl *#]getInstantiatedFromStaticDataMember()[# const#]","COMPLETION: getKind : [#Kind#]getKind()[# const#]","COMPLETION: getLanguageLinkage : [#LanguageLinkage#]getLanguageLinkage()[# const#]","COMPLETION: getLexicalDeclContext : [#DeclContext *#]getLexicalDeclContext()","COMPLETION: getLexicalDeclContext : [#const DeclContext *#]getLexicalDeclContext()[# const#]","COMPLETION: getLinkageAndVisibility : [#LinkageInfo#]getLinkageAndVisibility()[# const#]","COMPLETION: getLinkageInternal : [#Linkage#]getLinkageInternal()[# const#]","COMPLETION: getLocalOwningModule : [#Module *#]getLocalOwningModule()[# const#]","COMPLETION: getLocation : [#SourceLocation#]getLocation()[# const#]","COMPLETION: getLocEnd : [#SourceLocation#]getLocEnd()[# const#]","COMPLETION: getLocStart : [#SourceLocation#]getLocStart()[# const#]","COMPLETION: getLocStart (Hidden) : [#SourceLocation#]clang::Decl::getLocStart()[# const#]","COMPLETION: getMaxAlignment : [#unsigned int#]getMaxAlignment()[# const#]","COMPLETION: getMemberSpecializationInfo : [#MemberSpecializationInfo *#]getMemberSpecializationInfo()[# const#]","COMPLETION: getModuleOwnershipKind : [#ModuleOwnershipKind#]getModuleOwnershipKind()[# const#]","COMPLETION: getModuleOwnershipKindForChildOf : [#ModuleOwnershipKind#]getModuleOwnershipKindForChildOf(\u003c#DeclContext *DC#\u003e)","COMPLETION: getMostRecentDecl : [#VarDecl *#]getMostRecentDecl()","COMPLETION: getMostRecentDecl : [#const VarDecl *#]getMostRecentDecl()[# const#]","COMPLETION: getMostRecentDecl (Hidden) : [#NamedDecl *#]clang::NamedDecl::getMostRecentDecl()","COMPLETION: getMostRecentDecl (Hidden) : [#const NamedDecl *#]clang::NamedDecl::getMostRecentDecl()[# const#]","COMPLETION: getMostRecentDecl (Hidden) : [#Decl *#]clang::Decl::getMostRecentDecl()","COMPLETION: getMostRecentDecl (Hidden) : [#const Decl *#]clang::Decl::getMostRecentDecl()[# const#]","COMPLETION: getMostRecentDeclImpl : [#VarDecl *#]getMostRecentDeclImpl()","COMPLETION: getMostRecentDeclImpl (Hidden) : [#Decl *#]clang::Decl::getMostRecentDeclImpl()","COMPLETION: getMultipleDC : [#MultipleDC *#]getMultipleDC()[# const#]","COMPLETION: getName : [#StringRef#]getName()[# const#]","COMPLETION: getNameAsString : [#std::string#]getNameAsString()[# const#]","COMPLETION: getNameForDiagnostic : [#void#]getNameForDiagnostic(\u003c#raw_ostream \u0026OS#\u003e, \u003c#const PrintingPolicy \u0026Policy#\u003e, \u003c#bool Qualified#\u003e)[# const#]","COMPLETION: getNextDeclInContext : [#Decl *#]getNextDeclInContext()","COMPLETION: getNextDeclInContext : [#const Decl *#]getNextDeclInContext()[# const#]","COMPLETION: getNextRedeclaration : [#VarDecl *#]getNextRedeclaration()[# const#]","COMPLETION: getNextRedeclarationImpl : [#VarDecl *#]getNextRedeclarationImpl()","COMPLETION: getNextRedeclarationImpl (Hidden) : [#Decl *#]clang::Decl::getNextRedeclarationImpl()","COMPLETION: getNonClosureContext : [#Decl *#]getNonClosureContext()","COMPLETION: getNonClosureContext : [#const Decl *#]getNonClosureContext()[# const#]","COMPLETION: getNumTemplateParameterLists : [#unsigned int#]getNumTemplateParameterLists()[# const#]","COMPLETION: getObjCFStringFormattingFamily : [#ObjCStringFormatFamily#]getObjCFStringFormattingFamily()[# const#]","COMPLETION: getOuterLocStart : [#SourceLocation#]getOuterLocStart()[# const#]","COMPLETION: getOwningModule : [#Module *#]getOwningModule()[# const#]","COMPLETION: getOwningModuleForLinkage : [#Module *#]getOwningModuleForLinkage({#\u003c#bool IgnoreLinkage = false#\u003e#})[# const#]","COMPLETION: getOwningModuleID : [#unsigned int#]getOwningModuleID()[# const#]","COMPLETION: getOwningModuleSlow : [#Module *#]getOwningModuleSlow()[# const#]","COMPLETION: getParentFunctionOrMethod : [#const DeclContext *#]getParentFunctionOrMethod()[# const#]","COMPLETION: getParentFunctionOrMethod : [#DeclContext *#]getParentFunctionOrMethod()","COMPLETION: getPointOfInstantiation : [#SourceLocation#]getPointOfInstantiation()[# const#]","COMPLETION: getPreviousDecl : [#VarDecl *#]getPreviousDecl()","COMPLETION: getPreviousDecl : [#const VarDecl *#]getPreviousDecl()[# const#]","COMPLETION: getPreviousDecl (Hidden) : [#Decl *#]clang::Decl::getPreviousDecl()","COMPLETION: getPreviousDecl (Hidden) : [#const Decl *#]clang::Decl::getPreviousDecl()[# const#]","COMPLETION: getPreviousDeclImpl : [#VarDecl *#]getPreviousDeclImpl()","COMPLETION: getPreviousDeclImpl (Hidden) : [#Decl *#]clang::Decl::getPreviousDeclImpl()","COMPLETION: getQualifiedNameAsString : [#std::string#]getQualifiedNameAsString()[# const#]","COMPLETION: getQualifier : [#NestedNameSpecifier *#]getQualifier()[# const#]","COMPLETION: getQualifierLoc : [#NestedNameSpecifierLoc#]getQualifierLoc()[# const#]","COMPLETION: getSemanticDC : [#DeclContext *#]getSemanticDC()[# const#]","COMPLETION: getSourceRange : [#SourceRange#]getSourceRange()[# const#]","COMPLETION: getSourceRange (Hidden) : [#SourceRange#]clang::DeclaratorDecl::getSourceRange()[# const#]","COMPLETION: getSourceRange (Hidden) : [#SourceRange#]clang::Decl::getSourceRange()[# const#]","COMPLETION: getStorageClass : [#StorageClass#]getStorageClass()[# const#]","COMPLETION: getStorageClassSpecifierString : [#const char *#]getStorageClassSpecifierString(\u003c#StorageClass SC#\u003e)","COMPLETION: getStorageDuration : [#StorageDuration#]getStorageDuration()[# const#]","COMPLETION: getTemplateInstantiationPattern : [#VarDecl *#]getTemplateInstantiationPattern()[# const#]","COMPLETION: getTemplateParameterList : [#TemplateParameterList *#]getTemplateParameterList(\u003c#unsigned int index#\u003e)[# const#]","COMPLETION: getTemplateSpecializationKind : [#TemplateSpecializationKind#]getTemplateSpecializationKind()[# const#]","COMPLETION: getTLSKind : [#TLSKind#]getTLSKind()[# const#]","COMPLETION: getTranslationUnitDecl : [#TranslationUnitDecl *#]getTranslationUnitDecl()","COMPLETION: getTranslationUnitDecl : [#const TranslationUnitDecl *#]getTranslationUnitDecl()[# const#]","COMPLETION: getTSCSpec : [#ThreadStorageClassSpecifier#]getTSCSpec()[# const#]","COMPLETION: getType : [#QualType#]getType()[# const#]","COMPLETION: getTypeSourceInfo : [#TypeSourceInfo *#]getTypeSourceInfo()[# const#]","COMPLETION: getTypeSpecStartLoc : [#SourceLocation#]getTypeSpecStartLoc()[# const#]","COMPLETION: getUnderlyingDecl : [#NamedDecl *#]getUnderlyingDecl()","COMPLETION: getUnderlyingDecl : [#const NamedDecl *#]getUnderlyingDecl()[# const#]","COMPLETION: getUnderlyingDeclImpl : [#NamedDecl *#]getUnderlyingDeclImpl()","COMPLETION: getVersionIntroduced : [#VersionTuple#]getVersionIntroduced()[# const#]","COMPLETION: getVisibility : [#Visibility#]getVisibility()[# const#]","COMPLETION: hasAttr : [#bool#]hasAttr\u003c\u003c#typename T#\u003e\u003e()[# const#]","COMPLETION: HasAttrs : [#unsigned int#]HasAttrs","COMPLETION: hasAttrs : [#bool#]hasAttrs()[# const#]","COMPLETION: hasBody : [#bool#]hasBody()[# const#]","COMPLETION: hasCachedLinkage : [#bool#]hasCachedLinkage()[# const#]","COMPLETION: hasDefiningAttr : [#bool#]hasDefiningAttr()[# const#]","COMPLETION: hasDefinition : [#DefinitionKind#]hasDefinition(\u003c#ASTContext \u0026#\u003e)[# const#]","COMPLETION: hasDefinition : [#DefinitionKind#]hasDefinition()[# const#]","COMPLETION: hasExternalFormalLinkage : [#bool#]hasExternalFormalLinkage()[# const#]","COMPLETION: hasExternalStorage : [#bool#]hasExternalStorage()[# const#]","COMPLETION: hasExtInfo : [#bool#]hasExtInfo()[# const#]","COMPLETION: hasGlobalStorage : [#bool#]hasGlobalStorage()[# const#]","COMPLETION: hasInit : [#bool#]hasInit()[# const#]","COMPLETION: hasLinkage : [#bool#]hasLinkage()[# const#]","COMPLETION: hasLinkageBeenComputed : [#bool#]hasLinkageBeenComputed()[# const#]","COMPLETION: hasLocalOwningModuleStorage : [#bool#]hasLocalOwningModuleStorage()[# const#]","COMPLETION: hasLocalStorage : [#bool#]hasLocalStorage()[# const#]","COMPLETION: hasOwningModule : [#bool#]hasOwningModule()[# const#]","COMPLETION: hasTagIdentifierNamespace : [#bool#]hasTagIdentifierNamespace()[# const#]","COMPLETION: IdentifierNamespace : [#unsigned int#]IdentifierNamespace","COMPLETION: IDNS_Label : [#clang::Decl::IdentifierNamespace#]IDNS_Label","COMPLETION: IDNS_LocalExtern : [#clang::Decl::IdentifierNamespace#]IDNS_LocalExtern","COMPLETION: IDNS_Member : [#clang::Decl::IdentifierNamespace#]IDNS_Member","COMPLETION: IDNS_Namespace : [#clang::Decl::IdentifierNamespace#]IDNS_Namespace","COMPLETION: IDNS_NonMemberOperator : [#clang::Decl::IdentifierNamespace#]IDNS_NonMemberOperator","COMPLETION: IDNS_ObjCProtocol : [#clang::Decl::IdentifierNamespace#]IDNS_ObjCProtocol","COMPLETION: IDNS_OMPReduction : [#clang::Decl::IdentifierNamespace#]IDNS_OMPReduction","COMPLETION: IDNS_Ordinary : [#clang::Decl::IdentifierNamespace#]IDNS_Ordinary","COMPLETION: IDNS_OrdinaryFriend : [#clang::Decl::IdentifierNamespace#]IDNS_OrdinaryFriend","COMPLETION: IDNS_Tag : [#clang::Decl::IdentifierNamespace#]IDNS_Tag","COMPLETION: IDNS_TagFriend : [#clang::Decl::IdentifierNamespace#]IDNS_TagFriend","COMPLETION: IDNS_Type : [#clang::Decl::IdentifierNamespace#]IDNS_Type","COMPLETION: IDNS_Using : [#clang::Decl::IdentifierNamespace#]IDNS_Using","COMPLETION: Implicit : [#unsigned int#]Implicit","COMPLETION: ImplicitParam : [#clang::Decl::Kind#]ImplicitParam","COMPLETION: Import : [#clang::Decl::Kind#]Import","COMPLETION: IndirectField : [#clang::Decl::Kind#]IndirectField","COMPLETION: Init : [#InitType#]Init","COMPLETION: InitializationStyle : InitializationStyle","COMPLETION: InitType : InitType","COMPLETION: InnerLocStart : [#SourceLocation#]InnerLocStart","COMPLETION: InvalidDecl : [#unsigned int#]InvalidDecl","COMPLETION: isARCPseudoStrong : [#bool#]isARCPseudoStrong()[# const#]","COMPLETION: isCanonicalDecl : [#bool#]isCanonicalDecl()[# const#]","COMPLETION: isConstexpr : [#bool#]isConstexpr()[# const#]","COMPLETION: isCXXClassMember : [#bool#]isCXXClassMember()[# const#]","COMPLETION: isCXXForRangeDecl : [#bool#]isCXXForRangeDecl()[# const#]","COMPLETION: isCXXInstanceMember : [#bool#]isCXXInstanceMember()[# const#]","COMPLETION: isDefinedOutsideFunctionOrMethod : [#bool#]isDefinedOutsideFunctionOrMethod()[# const#]","COMPLETION: isDeprecated : [#bool#]isDeprecated({#\u003c#std::string *Message = nullptr#\u003e#})[# const#]","COMPLETION: isDirectInit : [#bool#]isDirectInit()[# const#]","COMPLETION: isExceptionVariable : [#bool#]isExceptionVariable()[# const#]","COMPLETION: isExported : [#bool#]isExported()[# const#]","COMPLETION: isExternallyDeclarable : [#bool#]isExternallyDeclarable()[# const#]","COMPLETION: isExternallyVisible : [#bool#]isExternallyVisible()[# const#]","COMPLETION: isExternC : [#bool#]isExternC()[# const#]","COMPLETION: isFileVarDecl : [#bool#]isFileVarDecl()[# const#]","COMPLETION: isFirstDecl : [#bool#]isFirstDecl()[# const#]","COMPLETION: isFirstDecl (Hidden) : [#bool#]clang::Decl::isFirstDecl()[# const#]","COMPLETION: isFromASTFile : [#bool#]isFromASTFile()[# const#]","COMPLETION: isFunctionOrFunctionTemplate : [#bool#]isFunctionOrFunctionTemplate()[# const#]","COMPLETION: isFunctionOrMethodVarDecl : [#bool#]isFunctionOrMethodVarDecl()[# const#]","COMPLETION: isHidden : [#bool#]isHidden()[# const#]","COMPLETION: isImplicit : [#bool#]isImplicit()[# const#]","COMPLETION: isInAnonymousNamespace : [#bool#]isInAnonymousNamespace()[# const#]","COMPLETION: isInExternCContext : [#bool#]isInExternCContext()[# const#]","COMPLETION: isInExternCXXContext : [#bool#]isInExternCXXContext()[# const#]","COMPLETION: isInIdentifierNamespace : [#bool#]isInIdentifierNamespace(\u003c#unsigned int NS#\u003e)[# const#]","COMPLETION: isInitCapture : [#bool#]isInitCapture()[# const#]","COMPLETION: isInitICE : [#bool#]isInitICE()[# const#]","COMPLETION: isInitKnownICE : [#bool#]isInitKnownICE()[# const#]","COMPLETION: isInline : [#bool#]isInline()[# const#]","COMPLETION: isInlineSpecified : [#bool#]isInlineSpecified()[# const#]","COMPLETION: isInSemaDC : [#bool#]isInSemaDC()[# const#]","COMPLETION: isInStdNamespace : [#bool#]isInStdNamespace()[# const#]","COMPLETION: isInvalidDecl : [#bool#]isInvalidDecl()[# const#]","COMPLETION: isLexicallyWithinFunctionOrMethod : [#bool#]isLexicallyWithinFunctionOrMethod()[# const#]","COMPLETION: isLinkageValid : [#bool#]isLinkageValid()[# const#]","COMPLETION: isLocalExternDecl : [#bool#]isLocalExternDecl()","COMPLETION: isLocalVarDecl : [#bool#]isLocalVarDecl()[# const#]","COMPLETION: isLocalVarDeclOrParm : [#bool#]isLocalVarDeclOrParm()[# const#]","COMPLETION: isModulePrivate : [#bool#]isModulePrivate()[# const#]","COMPLETION: isNRVOVariable : [#bool#]isNRVOVariable()[# const#]","COMPLETION: isOutOfLine : [#bool#]isOutOfLine()[# const#]","COMPLETION: isOutOfLine (Hidden) : [#bool#]clang::Decl::isOutOfLine()[# const#]","COMPLETION: isOutOfSemaDC : [#bool#]isOutOfSemaDC()[# const#]","COMPLETION: isParameterPack : [#bool#]isParameterPack()[# const#]","COMPLETION: isPreviousDeclInSameBlockScope : [#bool#]isPreviousDeclInSameBlockScope()[# const#]","COMPLETION: isReferenced : [#bool#]isReferenced()[# const#]","COMPLETION: isStaticDataMember : [#bool#]isStaticDataMember()[# const#]","COMPLETION: isStaticLocal : [#bool#]isStaticLocal()[# const#]","COMPLETION: isTagIdentifierNamespace : [#bool#]isTagIdentifierNamespace(\u003c#unsigned int NS#\u003e)","COMPLETION: isTemplated : [#bool#]isTemplated()[# const#]","COMPLETION: isTemplateDecl : [#bool#]isTemplateDecl()[# const#]","COMPLETION: isTemplateParameter : [#bool#]isTemplateParameter()[# const#]","COMPLETION: isTemplateParameterPack : [#bool#]isTemplateParameterPack()[# const#]","COMPLETION: isThisDeclarationADefinition : [#DefinitionKind#]isThisDeclarationADefinition(\u003c#ASTContext \u0026#\u003e)[# const#]","COMPLETION: isThisDeclarationADefinition : [#DefinitionKind#]isThisDeclarationADefinition()[# const#]","COMPLETION: isThisDeclarationADemotedDefinition : [#bool#]isThisDeclarationADemotedDefinition()[# const#]","COMPLETION: isThisDeclarationReferenced : [#bool#]isThisDeclarationReferenced()[# const#]","COMPLETION: isTopLevelDeclInObjCContainer : [#bool#]isTopLevelDeclInObjCContainer()[# const#]","COMPLETION: isUnavailable : [#bool#]isUnavailable({#\u003c#std::string *Message = nullptr#\u003e#})[# const#]","COMPLETION: isUsableInConstantExpressions : [#bool#]isUsableInConstantExpressions(\u003c#ASTContext \u0026C#\u003e)[# const#]","COMPLETION: isUsed : [#bool#]isUsed({#\u003c#bool CheckUsedAttr = true#\u003e#})[# const#]","COMPLETION: isWeak : [#bool#]isWeak()[# const#]","COMPLETION: isWeakImported : [#bool#]isWeakImported()[# const#]","COMPLETION: Kind : Kind","COMPLETION: Label : [#clang::Decl::Kind#]Label","COMPLETION: lastClassTemplateSpecialization : [#clang::Decl::Kind#]lastClassTemplateSpecialization","COMPLETION: lastCXXMethod : [#clang::Decl::Kind#]lastCXXMethod","COMPLETION: lastCXXRecord : [#clang::Decl::Kind#]lastCXXRecord","COMPLETION: lastDecl : [#clang::Decl::Kind#]lastDecl","COMPLETION: lastDeclarator : [#clang::Decl::Kind#]lastDeclarator","COMPLETION: lastField : [#clang::Decl::Kind#]lastField","COMPLETION: lastFunction : [#clang::Decl::Kind#]lastFunction","COMPLETION: lastNamed : [#clang::Decl::Kind#]lastNamed","COMPLETION: lastObjCContainer : [#clang::Decl::Kind#]lastObjCContainer","COMPLETION: lastObjCImpl : [#clang::Decl::Kind#]lastObjCImpl","COMPLETION: lastRecord : [#clang::Decl::Kind#]lastRecord","COMPLETION: lastRedeclarableTemplate : [#clang::Decl::Kind#]lastRedeclarableTemplate","COMPLETION: lastTag : [#clang::Decl::Kind#]lastTag","COMPLETION: lastTemplate : [#clang::Decl::Kind#]lastTemplate","COMPLETION: lastType : [#clang::Decl::Kind#]lastType","COMPLETION: lastTypedefName : [#clang::Decl::Kind#]lastTypedefName","COMPLETION: lastUsingShadow : [#clang::Decl::Kind#]lastUsingShadow","COMPLETION: lastValue : [#clang::Decl::Kind#]lastValue","COMPLETION: lastVar : [#clang::Decl::Kind#]lastVar","COMPLETION: lastVarTemplateSpecialization : [#clang::Decl::Kind#]lastVarTemplateSpecialization","COMPLETION: LatestDeclLink : [#DeclLink#]LatestDeclLink(\u003c#const ASTContext \u0026Ctx#\u003e)","COMPLETION: LinkageSpec : [#clang::Decl::Kind#]LinkageSpec","COMPLETION: ListInit : [#clang::VarDecl::InitializationStyle#]ListInit","COMPLETION: Loc : [#SourceLocation#]Loc","COMPLETION: markUsed : [#void#]markUsed(\u003c#ASTContext \u0026C#\u003e)","COMPLETION: ModuleOwnershipKind : ModuleOwnershipKind","COMPLETION: MSProperty : [#clang::Decl::Kind#]MSProperty","COMPLETION: MultipleDC : MultipleDC","COMPLETION: Name : [#DeclarationName#]Name","COMPLETION: NamedDecl : NamedDecl","COMPLETION: Namespace : [#clang::Decl::Kind#]Namespace","COMPLETION: NamespaceAlias : [#clang::Decl::Kind#]NamespaceAlias","COMPLETION: NextInContextAndBits : [#llvm::PointerIntPair\u003cDecl *, 2, ModuleOwnershipKind\u003e#]NextInContextAndBits","COMPLETION: NonParmVarDeclBitfields : NonParmVarDeclBitfields","COMPLETION: NonParmVarDeclBits : [#NonParmVarDeclBitfields#]NonParmVarDeclBits","COMPLETION: NonTypeTemplateParm : [#clang::Decl::Kind#]NonTypeTemplateParm","COMPLETION: NumParameterIndexBits : [#clang::VarDecl::(anonymous)#]NumParameterIndexBits","COMPLETION: NumVarDeclBits : [#clang::VarDecl::(anonymous)#]NumVarDeclBits","COMPLETION: OBJC_TQ_Bycopy : [#clang::Decl::ObjCDeclQualifier#]OBJC_TQ_Bycopy","COMPLETION: OBJC_TQ_Byref : [#clang::Decl::ObjCDeclQualifier#]OBJC_TQ_Byref","COMPLETION: OBJC_TQ_CSNullability : [#clang::Decl::ObjCDeclQualifier#]OBJC_TQ_CSNullability","COMPLETION: OBJC_TQ_In : [#clang::Decl::ObjCDeclQualifier#]OBJC_TQ_In","COMPLETION: OBJC_TQ_Inout : [#clang::Decl::ObjCDeclQualifier#]OBJC_TQ_Inout","COMPLETION: OBJC_TQ_None : [#clang::Decl::ObjCDeclQualifier#]OBJC_TQ_None","COMPLETION: OBJC_TQ_Oneway : [#clang::Decl::ObjCDeclQualifier#]OBJC_TQ_Oneway","COMPLETION: OBJC_TQ_Out : [#clang::Decl::ObjCDeclQualifier#]OBJC_TQ_Out","COMPLETION: ObjCAtDefsField : [#clang::Decl::Kind#]ObjCAtDefsField","COMPLETION: ObjCCategory : [#clang::Decl::Kind#]ObjCCategory","COMPLETION: ObjCCategoryImpl : [#clang::Decl::Kind#]ObjCCategoryImpl","COMPLETION: ObjCCompatibleAlias : [#clang::Decl::Kind#]ObjCCompatibleAlias","COMPLETION: ObjCDeclQualifier : ObjCDeclQualifier","COMPLETION: ObjCImplementation : [#clang::Decl::Kind#]ObjCImplementation","COMPLETION: ObjCInterface : [#clang::Decl::Kind#]ObjCInterface","COMPLETION: ObjCIvar : [#clang::Decl::Kind#]ObjCIvar","COMPLETION: ObjCMethod : [#clang::Decl::Kind#]ObjCMethod","COMPLETION: ObjCProperty : [#clang::Decl::Kind#]ObjCProperty","COMPLETION: ObjCPropertyImpl : [#clang::Decl::Kind#]ObjCPropertyImpl","COMPLETION: ObjCProtocol : [#clang::Decl::Kind#]ObjCProtocol","COMPLETION: ObjCTypeParam : [#clang::Decl::Kind#]ObjCTypeParam","COMPLETION: OMPCapturedExpr : [#clang::Decl::Kind#]OMPCapturedExpr","COMPLETION: OMPDeclareReduction : [#clang::Decl::Kind#]OMPDeclareReduction","COMPLETION: OMPThreadPrivate : [#clang::Decl::Kind#]OMPThreadPrivate","COMPLETION: operator new : [#void *#]operator new(\u003c#std::size_t Size#\u003e, \u003c#const ASTContext \u0026Ctx#\u003e, \u003c#unsigned int ID#\u003e{#, \u003c#std::size_t Extra = 0#\u003e#})","COMPLETION: operator new : [#void *#]operator new(\u003c#std::size_t Size#\u003e, \u003c#const ASTContext \u0026Ctx#\u003e, \u003c#DeclContext *Parent#\u003e{#, \u003c#std::size_t Extra = 0#\u003e#})","COMPLETION: operator= : [#VarDecl \u0026#]operator=(\u003c#const VarDecl \u0026#\u003e)","COMPLETION: operator= : [#VarDecl \u0026#]operator=(\u003c#VarDecl \u0026\u0026#\u003e)","COMPLETION: operator= (Hidden) : [#DeclaratorDecl \u0026#]clang::DeclaratorDecl::operator=(\u003c#const DeclaratorDecl \u0026#\u003e)","COMPLETION: operator= (Hidden) : [#DeclaratorDecl \u0026#]clang::DeclaratorDecl::operator=(\u003c#DeclaratorDecl \u0026\u0026#\u003e)","COMPLETION: operator= (Hidden) : [#ValueDecl \u0026#]clang::ValueDecl::operator=(\u003c#const ValueDecl \u0026#\u003e)","COMPLETION: operator= (Hidden) : [#ValueDecl \u0026#]clang::ValueDecl::operator=(\u003c#ValueDecl \u0026\u0026#\u003e)","COMPLETION: operator= (Hidden) : [#NamedDecl \u0026#]clang::NamedDecl::operator=(\u003c#const NamedDecl \u0026#\u003e)","COMPLETION: operator= (Hidden) : [#NamedDecl \u0026#]clang::NamedDecl::operator=(\u003c#NamedDecl \u0026\u0026#\u003e)","COMPLETION: operator= (Hidden) : [#Decl \u0026#]clang::Decl::operator=(\u003c#const Decl \u0026#\u003e)","COMPLETION: operator= (Hidden) : [#Redeclarable\u003cVarDecl\u003e \u0026#]clang::Redeclarable\u003cVarDecl\u003e::operator=(\u003c#const Redeclarable\u003cVarDecl\u003e \u0026#\u003e)","COMPLETION: operator= (Hidden) : [#Redeclarable\u003cVarDecl\u003e \u0026#]clang::Redeclarable\u003cVarDecl\u003e::operator=(\u003c#Redeclarable\u003cVarDecl\u003e \u0026\u0026#\u003e)","COMPLETION: ParmVar : [#clang::Decl::Kind#]ParmVar","COMPLETION: ParmVarDeclBitfields : ParmVarDeclBitfields","COMPLETION: ParmVarDeclBits : [#ParmVarDeclBitfields#]ParmVarDeclBits","COMPLETION: PragmaComment : [#clang::Decl::Kind#]PragmaComment","COMPLETION: PragmaDetectMismatch : [#clang::Decl::Kind#]PragmaDetectMismatch","COMPLETION: PreviousDeclLink : [#DeclLink#]PreviousDeclLink(\u003c#VarDecl *D#\u003e)","COMPLETION: print : [#void#]print(\u003c#raw_ostream \u0026Out#\u003e{#, \u003c#unsigned int Indentation = 0#\u003e{#, \u003c#bool PrintInstantiation = false#\u003e#}#})[# const#]","COMPLETION: print : [#void#]print(\u003c#raw_ostream \u0026Out#\u003e, \u003c#const PrintingPolicy \u0026Policy#\u003e{#, \u003c#unsigned int Indentation = 0#\u003e{#, \u003c#bool PrintInstantiation = false#\u003e#}#})[# const#]","COMPLETION: printGroup : [#void#]printGroup(\u003c#Decl **Begin#\u003e, \u003c#unsigned int NumDecls#\u003e, \u003c#raw_ostream \u0026Out#\u003e, \u003c#const PrintingPolicy \u0026Policy#\u003e{#, \u003c#unsigned int Indentation = 0#\u003e#})","COMPLETION: printName : [#void#]printName(\u003c#raw_ostream \u0026os#\u003e)[# const#]","COMPLETION: printQualifiedName : [#void#]printQualifiedName(\u003c#raw_ostream \u0026OS#\u003e)[# const#]","COMPLETION: printQualifiedName : [#void#]printQualifiedName(\u003c#raw_ostream \u0026OS#\u003e, \u003c#const PrintingPolicy \u0026Policy#\u003e)[# const#]","COMPLETION: PrintStats : [#void#]PrintStats()","COMPLETION: Record : [#clang::Decl::Kind#]Record","COMPLETION: redecl_iterator : redecl_iterator","COMPLETION: redecl_iterator (Hidden) : clang::Decl::redecl_iterator","COMPLETION: redecl_iterator (Hidden) : clang::Redeclarable\u003cVarDecl\u003e::redecl_iterator","COMPLETION: redecl_range : redecl_range","COMPLETION: redecl_range (Hidden) : clang::Decl::redecl_range","COMPLETION: redecl_range (Hidden) : clang::Redeclarable\u003cVarDecl\u003e::redecl_range","COMPLETION: Redeclarable : Redeclarable","COMPLETION: redeclarable_base : redeclarable_base","COMPLETION: RedeclLink : [#DeclLink#]RedeclLink","COMPLETION: redecls : [#redecl_range#]redecls()[# const#]","COMPLETION: redecls (Hidden) : [#redecl_range#]clang::Decl::redecls()[# const#]","COMPLETION: redecls_begin : [#redecl_iterator#]redecls_begin()[# const#]","COMPLETION: redecls_begin (Hidden) : [#redecl_iterator#]clang::Decl::redecls_begin()[# const#]","COMPLETION: redecls_end : [#redecl_iterator#]redecls_end()[# const#]","COMPLETION: redecls_end (Hidden) : [#redecl_iterator#]clang::Decl::redecls_end()[# const#]","COMPLETION: Referenced : [#unsigned int#]Referenced","COMPLETION: setAccess : [#void#]setAccess(\u003c#AccessSpecifier AS#\u003e)","COMPLETION: setARCPseudoStrong : [#void#]setARCPseudoStrong(\u003c#bool ps#\u003e)","COMPLETION: setAttrs : [#void#]setAttrs(\u003c#const AttrVec \u0026Attrs#\u003e)","COMPLETION: setAttrsImpl : [#void#]setAttrsImpl(\u003c#const AttrVec \u0026Attrs#\u003e, \u003c#ASTContext \u0026Ctx#\u003e)","COMPLETION: setCachedLinkage : [#void#]setCachedLinkage(\u003c#Linkage L#\u003e)[# const#]","COMPLETION: setConstexpr : [#void#]setConstexpr(\u003c#bool IC#\u003e)","COMPLETION: setCXXForRangeDecl : [#void#]setCXXForRangeDecl(\u003c#bool FRD#\u003e)","COMPLETION: setDeclContext : [#void#]setDeclContext(\u003c#DeclContext *DC#\u003e)","COMPLETION: setDeclContextsImpl : [#void#]setDeclContextsImpl(\u003c#DeclContext *SemaDC#\u003e, \u003c#DeclContext *LexicalDC#\u003e, \u003c#ASTContext \u0026Ctx#\u003e)","COMPLETION: setDeclName : [#void#]setDeclName(\u003c#DeclarationName N#\u003e)","COMPLETION: setDescribedVarTemplate : [#void#]setDescribedVarTemplate(\u003c#VarTemplateDecl *Template#\u003e)","COMPLETION: setExceptionVariable : [#void#]setExceptionVariable(\u003c#bool EV#\u003e)","COMPLETION: setImplicit : [#void#]setImplicit({#\u003c#bool I = true#\u003e#})","COMPLETION: setImplicitlyInline : [#void#]setImplicitlyInline()","COMPLETION: setInit : [#void#]setInit(\u003c#Expr *I#\u003e)","COMPLETION: setInitCapture : [#void#]setInitCapture(\u003c#bool IC#\u003e)","COMPLETION: setInitStyle : [#void#]setInitStyle(\u003c#InitializationStyle Style#\u003e)","COMPLETION: setInlineSpecified : [#void#]setInlineSpecified()","COMPLETION: setInnerLocStart : [#void#]setInnerLocStart(\u003c#SourceLocation L#\u003e)","COMPLETION: setInstantiationOfStaticDataMember : [#void#]setInstantiationOfStaticDataMember(\u003c#VarDecl *VD#\u003e, \u003c#TemplateSpecializationKind TSK#\u003e)","COMPLETION: setInvalidDecl : [#void#]setInvalidDecl({#\u003c#bool Invalid = true#\u003e#})","COMPLETION: setIsUsed : [#void#]setIsUsed()","COMPLETION: setLexicalDeclContext : [#void#]setLexicalDeclContext(\u003c#DeclContext *DC#\u003e)","COMPLETION: setLocalExternDecl : [#void#]setLocalExternDecl()","COMPLETION: setLocalOwningModule : [#void#]setLocalOwningModule(\u003c#Module *M#\u003e)","COMPLETION: setLocation : [#void#]setLocation(\u003c#SourceLocation L#\u003e)","COMPLETION: setModuleOwnershipKind : [#void#]setModuleOwnershipKind(\u003c#ModuleOwnershipKind MOK#\u003e)","COMPLETION: setModulePrivate : [#void#]setModulePrivate()","COMPLETION: setNonMemberOperator : [#void#]setNonMemberOperator()","COMPLETION: setNRVOVariable : [#void#]setNRVOVariable(\u003c#bool NRVO#\u003e)","COMPLETION: setObjectOfFriendDecl : [#void#]setObjectOfFriendDecl({#\u003c#bool PerformFriendInjection = false#\u003e#})","COMPLETION: setOwningModuleID : [#void#]setOwningModuleID(\u003c#unsigned int ID#\u003e)","COMPLETION: setPreviousDecl : [#void#]setPreviousDecl(\u003c#VarDecl *PrevDecl#\u003e)","COMPLETION: setPreviousDeclInSameBlockScope : [#void#]setPreviousDeclInSameBlockScope(\u003c#bool Same#\u003e)","COMPLETION: setQualifierInfo : [#void#]setQualifierInfo(\u003c#NestedNameSpecifierLoc QualifierLoc#\u003e)","COMPLETION: setReferenced : [#void#]setReferenced({#\u003c#bool R = true#\u003e#})","COMPLETION: setStorageClass : [#void#]setStorageClass(\u003c#StorageClass SC#\u003e)","COMPLETION: setTemplateParameterListsInfo : [#void#]setTemplateParameterListsInfo(\u003c#ASTContext \u0026Context#\u003e, \u003c#ArrayRef\u003cTemplateParameterList *\u003e TPLists#\u003e)","COMPLETION: setTemplateSpecializationKind : [#void#]setTemplateSpecializationKind(\u003c#TemplateSpecializationKind TSK#\u003e{#, \u003c#SourceLocation PointOfInstantiation = SourceLocation()#\u003e#})","COMPLETION: setTopLevelDeclInObjCContainer : [#void#]setTopLevelDeclInObjCContainer({#\u003c#bool V = true#\u003e#})","COMPLETION: setTSCSpec : [#void#]setTSCSpec(\u003c#ThreadStorageClassSpecifier TSC#\u003e)","COMPLETION: setType : [#void#]setType(\u003c#QualType newType#\u003e)","COMPLETION: setTypeSourceInfo : [#void#]setTypeSourceInfo(\u003c#TypeSourceInfo *TI#\u003e)","COMPLETION: setVisibleDespiteOwningModule : [#void#]setVisibleDespiteOwningModule()","COMPLETION: specific_attr_begin : [#specific_attr_iterator\u003cT\u003e#]specific_attr_begin\u003c\u003c#typename T#\u003e\u003e()[# const#]","COMPLETION: specific_attr_end : [#specific_attr_iterator\u003cT\u003e#]specific_attr_end\u003c\u003c#typename T#\u003e\u003e()[# const#]","COMPLETION: specific_attrs : [#llvm::iterator_range\u003cspecific_attr_iterator\u003cT\u003e \u003e#]specific_attrs\u003c\u003c#typename T#\u003e\u003e()[# const#]","COMPLETION: StaticAssert : [#clang::Decl::Kind#]StaticAssert","COMPLETION: StatisticsEnabled : [#bool#]StatisticsEnabled","COMPLETION: TemplateTemplateParm : [#clang::Decl::Kind#]TemplateTemplateParm","COMPLETION: TemplateTypeParm : [#clang::Decl::Kind#]TemplateTypeParm","COMPLETION: TentativeDefinition : [#clang::VarDecl::DefinitionKind#]TentativeDefinition","COMPLETION: TLS_Dynamic : [#clang::VarDecl::TLSKind#]TLS_Dynamic","COMPLETION: TLS_None : [#clang::VarDecl::TLSKind#]TLS_None","COMPLETION: TLS_Static : [#clang::VarDecl::TLSKind#]TLS_Static","COMPLETION: TLSKind : TLSKind","COMPLETION: TopLevelDeclInObjCContainer : [#unsigned int#]TopLevelDeclInObjCContainer","COMPLETION: TranslationUnit : [#clang::Decl::Kind#]TranslationUnit","COMPLETION: TypeAlias : [#clang::Decl::Kind#]TypeAlias","COMPLETION: TypeAliasTemplate : [#clang::Decl::Kind#]TypeAliasTemplate","COMPLETION: Typedef : [#clang::Decl::Kind#]Typedef","COMPLETION: UnresolvedUsingTypename : [#clang::Decl::Kind#]UnresolvedUsingTypename","COMPLETION: UnresolvedUsingValue : [#clang::Decl::Kind#]UnresolvedUsingValue","COMPLETION: updateOutOfDate : [#void#]updateOutOfDate(\u003c#IdentifierInfo \u0026II#\u003e)[# const#]","COMPLETION: Used : [#unsigned int#]Used","COMPLETION: Using : [#clang::Decl::Kind#]Using","COMPLETION: UsingDirective : [#clang::Decl::Kind#]UsingDirective","COMPLETION: UsingPack : [#clang::Decl::Kind#]UsingPack","COMPLETION: UsingShadow : [#clang::Decl::Kind#]UsingShadow","COMPLETION: ValueDecl : ValueDecl","COMPLETION: Var : [#clang::Decl::Kind#]Var","COMPLETION: VarDecl : VarDecl","COMPLETION: VarDeclBitfields : VarDeclBitfields","COMPLETION: VarDeclBits : [#VarDeclBitfields#]VarDeclBits","COMPLETION: VarTemplate : [#clang::Decl::Kind#]VarTemplate","COMPLETION: VarTemplatePartialSpecialization : [#clang::Decl::Kind#]VarTemplatePartialSpecialization","COMPLETION: VarTemplateSpecialization : [#clang::Decl::Kind#]VarTemplateSpecialization","COMPLETION: VisibilityForType : [#clang::NamedDecl::ExplicitVisibilityKind#]VisibilityForType","COMPLETION: VisibilityForValue : [#clang::NamedDecl::ExplicitVisibilityKind#]VisibilityForValue","COMPLETION: ~Decl : [#void#]~Decl()","COMPLETION: ~DeclaratorDecl : [#void#]~DeclaratorDecl()","COMPLETION: ~NamedDecl : [#void#]~NamedDecl()","COMPLETION: ~Redeclarable : [#void#]~Redeclarable()","COMPLETION: ~ValueDecl : [#void#]~ValueDecl()","COMPLETION: ~VarDecl : [#void#]~VarDecl()"]}